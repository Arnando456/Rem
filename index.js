/**Tqto nya jangan di hapus njing* Tambahin nama author lah* Author MhankBarBar, www.youtube.com/MrG{108P}** Tambahin ya Cape Gan ngefix² Yg Ga work* Jan numpang nama doank- What's New?* New Features*/const {   WAConnection,   MessageType,   Presence,   MessageOptions,   Mimetype,   WALocationMessage,   WA_MESSAGE_STUB_TYPES,   ReconnectMode,   ProxyAgent,   GroupSettingChange,   waChatKey,   mentionedJid,   processTime,} = require("@adiwajshing/baileys")const qrcode = require("qrcode-terminal") const moment = require("moment-timezone") const fs = require("fs") const crypto = require('crypto')const imageToBase64 = require('image-to-base64')const axios = require('axios')const { color, bgcolor } = require('./lib/color')const { donasi } = require('./lib/donasi')const { fetchJson } = require('./lib/fetcher')const { recognize } = require('./lib/ocr')const { cara } = require('./src/cara')const { exec } = require("child_process")const { wait, simih, getBuffer, h2k, generateMessageID, getGroupAdmins, getRandom, banner, start, info, success, close } = require('./lib/functions')const tiktod = require('tiktok-scraper')const speed = require('performance-now')const brainly = require('brainly-scraper')const isUrl = (ini_url) => {                return ini_url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))}const ffmpeg = require('fluent-ffmpeg')const public = JSON.parse(fs.readFileSync('./src/public.json'))const cd = 4.32e+7const { removeBackgroundFromImageFile } = require('remove.bg')const { ind } = require('./language')const vcard = 'BEGIN:VCARD\n'//JANGAN DI GANTI ANJING            + 'VERSION:3.0\n'//JANGAN DI GANTI ANJING,NTAR EROR            + 'FN:Owner Emelia\n' // GANTI NAMA LU BODOH            + 'ORG: REMBOT;\n'//GANTI NAMA BOT LUH BANGSAT            + 'TEL;type=CELL;type=VOICE;waid=6281534162316:+62 815-3416-2316\n' // GANTI NOMOR LU BEGONIAN            + 'END:VCARD'// UDAH SEGITU KONTOLL KEBAWAH BIARIN AJAconst ngonsol = JSON.parse(fs.readFileSync('./settings/Rem.json'))const {    botName,    ownerName,    BarBarKey,    XteamKey,    VhtearKey,    TobzKey,    ownerNumber,    botPrefix,    GrupLimitz,    UserLimitz,    CeerTod} = ngonsol// POWERED BY MrG{108P}*prefix = "#"blocked = []   limitawal = 1200memberlimit = 2fake = 'YDBOT-FIX-ANTIDELETE'ator = 'SUBSCRIBE'namo = 'MrG{108P}*'cr = "~*SUBSCRIBE:MrG{108P}🍁~OWNER:Arnando🍁*"// LOAD JSONconst setiker = JSON.parse(fs.readFileSync('./strg/stik.json'))const _leveling = JSON.parse(fs.readFileSync('./database/group/leveling.json'))const _level = JSON.parse(fs.readFileSync('./database/user/level.json'))const _registered = JSON.parse(fs.readFileSync('./database/user/registered.json'))const welkom = JSON.parse(fs.readFileSync('./database/group/welkom.json'))const nsfw = JSON.parse(fs.readFileSync('./database/group/nsfw.json'))const samih = JSON.parse(fs.readFileSync('./database/group/simi.json'))const event = JSON.parse(fs.readFileSync('./database/group/event.json'))const _limit = JSON.parse(fs.readFileSync('./database/user/limit.json'))const uang = JSON.parse(fs.readFileSync('./database/user/uang.json'))const ban = JSON.parse(fs.readFileSync('./database/user/banned.json'))const premium = JSON.parse(fs.readFileSync('./database/user/premium.json'))const antilink = JSON.parse(fs.readFileSync('./database/group/antilink.json'))const _afk = JSON.parse(fs.readFileSync('./database/user/afk.json'))/*[-> afk <-]*/const {	addAfkUser,    checkAfkUser,    getAfkReason,    getAfkTime,    getAfkId,    getAfkPosition} = require('./lib/afk.js')/*]=====> FUNCTION <=====[*/const getLevelingXp = (sender) => {            let position = false            Object.keys(_level).forEach((i) => {                if (_level[i].id === sender) {                    position = i                }            })            if (position !== false) {                return _level[position].xp            }        }        const getLevelingLevel = (sender) => {            let position = false            Object.keys(_level).forEach((i) => {                if (_level[i].id === sender) {                    position = i                }            })            if (position !== false) {                return _level[position].level            }        }        const getLevelingId = (sender) => {            let position = false            Object.keys(_level).forEach((i) => {                if (_level[i].id === sender) {                    position = i                }            })            if (position !== false) {                return _level[position].id            }        }        const addLevelingXp = (sender, amount) => {            let position = false            Object.keys(_level).forEach((i) => {                if (_level[i].id === sender) {                    position = i                }            })            if (position !== false) {                _level[position].xp += amount                fs.writeFileSync('./database/user/level.json', JSON.stringify(_level))            }        }        const addLevelingLevel = (sender, amount) => {            let position = false            Object.keys(_level).forEach((i) => {                if (_level[i].id === sender) {                    position = i                }            })            if (position !== false) {                _level[position].level += amount                fs.writeFileSync('./database/user/level.json', JSON.stringify(_level))            }        }        const addLevelingId = (sender) => {            const obj = {id: sender, xp: 1, level: 1}            _level.push(obj)            fs.writeFileSync('./database/user/level.json', JSON.stringify(_level))        }                      const getRegisteredRandomId = () => {            return _registered[Math.floor(Math.random() * _registered.length)].id        }        const addRegisteredUser = (userid, sender, age, time, serials) => {            const obj = { id: userid, name: sender, age: age, time: time, serial: serials }            fs.writeFileSync('./database/user/registered.json', JSON.stringify(_registered))        }        const createSerial = (size) => {            return crypto.randomBytes(size).toString('hex').slice(0, size)        }        const checkRegisteredUser = (sender) => {            let status = false            Object.keys(_registered).forEach((i) => {                if (_registered[i].id === sender) {                    status = true                }            })            return status        }                const addATM = (sender) => {        	const obj = {id: sender, uang : 0}            uang.push(obj)            fs.writeFileSync('./database/user/uang.json', JSON.stringify(uang))        }                const addKoinUser = (sender, amount) => {            let position = false            Object.keys(uang).forEach((i) => {                if (uang[i].id === sender) {                    position = i                }            })            if (position !== false) {                uang[position].uang += amount                fs.writeFileSync('./database/user/uang.json', JSON.stringify(uang))            }        }                const checkATMuser = (sender) => {        	let position = false            Object.keys(uang).forEach((i) => {                if (uang[i].id === sender) {                    position = i                }            })            if (position !== false) {                return uang[position].uang            }        }                const bayarLimit = (sender, amount) => {        	let position = false            Object.keys(_limit).forEach((i) => {                if (_limit[i].id === sender) {                    position = i                }            })            if (position !== false) {                _limit[position].limit -= amount                fs.writeFileSync('./database/user/limit.json', JSON.stringify(_limit))            }        }        	        const confirmATM = (sender, amount) => {        	let position = false            Object.keys(uang).forEach((i) => {                if (uang[i].id === sender) {                    position = i                }            })            if (position !== false) {                uang[position].uang -= amount                fs.writeFileSync('./database/user/uang.json', JSON.stringify(uang))            }        }                 const limitAdd = (sender) => {             let position = false            Object.keys(_limit).forEach((i) => {                if (_limit[i].id == sender) {                    position = i                }            })            if (position !== false) {                _limit[position].limit += 1                fs.writeFileSync('./database/user/limit.json', JSON.stringify(_limit))            }        }                     function kyun(seconds){  function pad(s){    return (s < 10 ? '0' : '') + s;  }  var hours = Math.floor(seconds / (60*60));  var minutes = Math.floor(seconds % (60*60) / 60);  var seconds = Math.floor(seconds % 60);  //return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds)  return `${pad(hours)} Jam ${pad(minutes)} Menit ${pad(seconds)} Detik`}/*]=====> SCAN QR <=====[*/const baby = new WAConnection()baby.logger.level = 'warn'console.log(banner.string)   baby.on('qr', qr => {   qrcode.generate(qr, { small: true })	console.log(color('[','white'), color('!','red'), color(']','white'), color(' SCAN QR MU <POWERED BY MrG{108P}*>'))})	baby.on('credentials-updated', () => {		fs.writeFileSync('./Rem.json', JSON.stringify(baby.base64EncodedAuthInfo(), null, '\t'))		info('2', 'MrG{108P}* Loading...')	})	fs.existsSync('./Rem.json') && baby.loadAuthInfo('./Rem.json')	baby.on('connecting', () => {		start('2', 'MrG{108P}* Connecting...')	})	baby.on('open', () => {		success('2', 'MrG{108P}* Connected')	})	baby.connect({timeoutMs: 30*1000})baby.on('group-participants-update', async (anu) => {		if (!welkom.includes(anu.jid)) return		try {			const mdata = await baby.groupMetadata(anu.jid)			console.log(anu)			if (anu.action == 'add') {				num = anu.participants[0]				try {					ppimg = await baby.getProfilePicture(`${anu.participants[0].split('@')[0]}@c.us`)				} catch {					ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'				}				teks = `[ *WELCOME IN GC ${mdata.subject}* ] \n___________________________\n@${num.split('@')[0]} Intro/Dikick!!! \n➸ Nama : \n➸ Umur : \n➸ Askot : \n➸ Gender : \n➸ Udah Punya Doi/Blm: \n➸ Pap Muka dumlu!!! \n➸ Instagram? \n𝐒𝐚𝐯𝐞 𝐍𝐨𝐦𝐨𝐫 𝐀𝐃𝐌𝐈𝐍! \n *___________________________*\nJangan jadi kutu lomcat sayang!!  kalau mau makai sc gua,pw:Hartah tahta paha rikka`				let buff = await getBuffer(ppimg)				baby.sendMessage(mdata.id, buff, MessageType.image, {caption: teks, contextInfo: {"mentionedJid": [num]}})			} else if (anu.action == 'remove') {				num = anu.participants[0]				try {					ppimg = await baby.getProfilePicture(`${num.split('@')[0]}@c.us`)				} catch {					ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'				}				teks = `SELAMAT TINGGAL... @${num.split('@')[0]}👋* \n_Jasamu akan saya kubur dalam dalam_`				let buff = await getBuffer(ppimg)				baby.sendMessage(mdata.id, buff, MessageType.image, {caption: teks, contextInfo: {"mentionedJid": [num]}})			}		} catch (e) {			console.log('Error : %s', color(e, 'red'))		}	})	baby.on('CB:Blocklist', json => {		if (blocked.length > 2) return	    for (let i of json[1].blocklist) {	    	blocked.push(i.replace('c.us','s.whatsapp.net'))	    }	})	baby.on('message-new', async (mek) => {		try {			if (!mek.message) return			if (mek.key && mek.key.remoteJid == 'status@broadcast') return			if (mek.key.fromMe) return			global.prefix			global.blocked			const content = JSON.stringify(mek.message)			const from = mek.key.remoteJid			const type = Object.keys(mek.message)[0]			const { text, extendedText, contact, location, liveLocation, image, video, sticker, document, audio, product } = MessageType			const time = moment.tz('Asia/Jakarta').format('DD/MM HH:mm:ss')			const timi = moment.tz('Asia/Jakarta').add(30, 'days').calendar();			const timu = moment.tz('Asia/Jakarta').add(20, 'days').calendar();            body = (type === 'conversation' && mek.message.conversation.startsWith(prefix)) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption.startsWith(prefix) ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption.startsWith(prefix) ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text.startsWith(prefix) ? mek.message.extendedTextMessage.text : ''			budy = (type === 'conversation') ? mek.message.conversation : (type === 'extendedTextMessage') ? mek.message.extendedTextMessage.text : ''            var tas = (type === 'conversation' && mek.message.conversation) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text ? mek.message.extendedTextMessage.text : ''			const mesejAnti = tas.slice(0).trim().split(/ +/).shift().toLowerCase()			const command = body.slice(1).trim().split(/ +/).shift().toLowerCase()			const args = body.trim().split(/ +/).slice(1)			const isCmd = body.startsWith(prefix)			const tescuk = ["0@s.whatsapp.net"]			const isGroup = from.endsWith('@g.us')			const q = args.join(' ')			const botNumber = baby.user.jid			const sender = isGroup ? mek.participant : mek.key.remoteJid			pushname = baby.contacts[sender] != undefined ? baby.contacts[sender].vname || baby.contacts[sender].notify : undefined			const groupMetadata = isGroup ? await baby.groupMetadata(from) : ''			const groupName = isGroup ? groupMetadata.subject : ''			const groupId = isGroup ? groupMetadata.jid : ''			const groupMembers = isGroup ? groupMetadata.participants : ''			const groupDesc = isGroup ? groupMetadata.desc : ''            const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''            /*]=====> MrG{108P}* <=====[*/            const isEventon = isGroup ? event.includes(from) : false            const isRegistered = checkRegisteredUser(sender)            const isBanned = ban.includes(sender)            const isPrem = premium.includes(sender)            const isBotGroupAdmins = groupAdmins.includes(botNumber) || false            const isLevelingOn = isGroup ? _leveling.includes(from) : false			const isGroupAdmins = groupAdmins.includes(sender) || false			const isWelkom = isGroup ? welkom.includes(from) : false			const isNsfw = isGroup ? nsfw.includes(from) : false			const isSimi = isGroup ? samih.includes(from) : false			const isAntiLink = isGroup ? antilink.includes(from) : false			const isOwner = ownerNumber.includes(sender)			const isImage = type === 'imageMessage'			const isUrl = (url) => {			    return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))			}			const reply = (teks) => {				baby.sendMessage(from, teks, text, {quoted:mek})			}			const sendMess = (hehe, teks) => {				baby.sendMessage(hehe, teks, text)			}			const mentions = (teks, memberr, id) => {				(id == null || id == undefined || id == false) ? baby.sendMessage(from, teks.trim(), extendedText, {contextInfo: {"mentionedJid": memberr}}) : baby.sendMessage(from, teks.trim(), extendedText, {quoted: mek, contextInfo: {"mentionedJid": memberr}})			}			const sendImage = (teks) => {		    baby.sendMessage(from, teks, image, {quoted:mek})		    }		    const costum = (pesan, tipe, target, target2) => {			baby.sendMessage(from, pesan, tipe, {quoted: { key: { fromMe: false, participant: `${target}`, ...(from ? { remoteJid: from } : {}) }, message: { conversation: `${target2}` }}})			}		    const sendPtt = (teks) => {		    baby.sendMessage(from, audio, mp3, {quoted:mek})		    }			/*stickerMessage*/function addMetadata(packname, author) {		if (!packname) packname = 'WABot'; if (!author) author = 'Bot';		author = author.replace(/[^a-zA-Z0-9]/g, '');		let name = `${author}_${packname}`	if (fs.existsSync(`./${name}.exif`)) return `./${name}.exif`	const json = {			"sticker-pack-name": packname,		"sticker-pack-publisher": author,	}	const littleEndian = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00])		const bytes = [0x00, 0x00, 0x16, 0x00, 0x00, 0x00]		let len = JSON.stringify(json).length		let last		if (len > 256) {			len = len - 256			bytes.unshift(0x01)		} else {			bytes.unshift(0x00)		}		if (len < 16) {			last = len.toString(16)			last = "0" + len		} else {			last = len.toString(16)		}		const buf2 = Buffer.from(last, "hex")		const buf3 = Buffer.from(bytes)		const buf4 = Buffer.from(JSON.stringify(json))		const buffer = Buffer.concat([littleEndian, buf2, buf3, buf4])		fs.writeFile(`./${name}.exif`, buffer, (err) => {			return `./${name}.exif`		})	}/*]=====> LEVELING <=====[*/            if (isGroup && isRegistered && isLevelingOn) {            const currentLevel = getLevelingLevel(sender)            const checkId = getLevelingId(sender)            try {                if (currentLevel === undefined && checkId === undefined) addLevelingId(sender)                const amountXp = Math.floor(Math.random() * 10) + 500                const requiredXp = 5000 * (Math.pow(2, currentLevel) - 1)                const getLevel = getLevelingLevel(sender)                addLevelingXp(sender, amountXp)                if (requiredXp <= getLevelingXp(sender)) {                    addLevelingLevel(sender, 1)                    bayarLimit(sender, 3)                    await reply(ind.levelup(pushname, sender, getLevelingXp,  getLevel, getLevelingLevel))                }            } catch (err) {                console.error(err)            }        }/*]=====> CHECK LIMIT BY MrG{108P}*<=====[*/          const checkLimit = (sender) => {          	let found = false                    for (let lmt of _limit) {                        if (lmt.id === sender) {                            let limitCounts = limitawal - lmt.limit                            if (limitCounts <= 0) return baby.sendMessage(from,`Limit anda sudah habis\n\n_Note : limit bisa di dapatkan dengan cara ${prefix}buylimit dan naik level_`, text,{ quoted: mek})                            baby.sendMessage(from, ind.limitcount(limitCounts), text, { quoted : mek})                            found = true                        }                    }                    if (found === false) {                        let obj = { id: sender, limit: 0 }                        _limit.push(obj)                        fs.writeFileSync('./database/user/limit.json', JSON.stringify(_limit))                        baby.sendMessage(from, ind.limitcount(limitCounts), text, { quoted : mek})                    }				}/*]=====> LIMITED BY LANN ID <=====[*/           const isLimit = (sender) =>{ 		      let position = false              for (let i of _limit) {              if (i.id === sender) {              	let limits = i.limit              if (limits >= limitawal ) {              	  position = true                    baby.sendMessage(from, ind.limitend(pushname), text, {quoted: mek})                    return true              } else {              	_limit                  position = true                  return false               }             }           }           if (position === false) {           	const obj = { id: sender, limit: 0 }                _limit.push(obj)                fs.writeFileSync('./database/user/limit.json',JSON.stringify(_limit))           return false       }     }            if (isGroup) {				try {					const getmemex = groupMembers.length					    if (getmemex <= memberlimit) {                            baby.groupLeave(from)					    }		       } catch (err) { console.error(err)  }        }/*]=====> ATM <=====[*/            if (isRegistered ) {            const checkATM = checkATMuser(sender)            try {                if (checkATM === undefined) addATM(sender)                const uangsaku = Math.floor(Math.random() * 10) + 90                addKoinUser(sender, uangsaku)            } catch (err) {                console.error(err)            }        }// ANTI LINK GRUP                if (mesejAnti.includes("://chat.whatsapp.com/")){		        if (!isGroup) return		        if (!isAntiLink) return		        if (isGroupAdmins) return reply('Admin Grup Mah Bebas:D')		        baby.updatePresence(from, Presence.composing)		        if (mesejAnti.includes(",izinkak")) return reply("Iya kak jangan spam ya")		        var kic = `${sender.split("@")[0]}@s.whatsapp.net`		        reply(`Maaf kak ${sender.split("@")[0]} Grup ini anti link, siap siap kamu di kick`)		        setTimeout( () => {			        baby.groupRemove(from, [kic]).catch((e)=>{reply(`*NICO HARUS JADI ADMIN├в┬ЭтАФ*`)})		        }, 3000)		        setTimeout( () => {			        baby.updatePresence(from, Presence.composing)			        reply("Hedsot....")		        }, 2000)		        setTimeout( () => {			        baby.updatePresence(from, Presence.composing)			        reply("Bismillah...")		        }, 1000)		        setTimeout( () => {			        baby.updatePresence(from, Presence.composing)			        reply("Ready?...")		        }, 0)		  }               			colors = ['red','white','black','blue','yellow','green']			const isMedia = (type === 'imageMessage' || type === 'videoMessage')			const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')			const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')			const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')			if (!isGroup && isCmd) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mEXEC\x1b[1;37m]', time, color(command), 'from', color(sender.split('@')[0]), 'args :', color(args.length))			if (!isGroup && !isCmd) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;31mRECV\x1b[1;37m]', time, color('Message'), 'from', color(sender.split('@')[0]), 'args :', color(args.length))			if (isCmd && isGroup) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mEXEC\x1b[1;37m]', time, color(command), 'from', color(sender.split('@')[0]), 'in', color(groupName), 'args :', color(args.length))			if (!isCmd && isGroup) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;31mRECV\x1b[1;37m]', time, color('Message'), 'from', color(sender.split('@')[0]), 'in', color(groupName), 'args :', color(args.length))switch(command) {     case 'help':				case 'menu':			runtime = process.uptime()me = baby.useruptime = process.uptime()buffer = await getBuffer(me.imgUrl)				    const uangku = checkATMuser(sender)shiz = `┏━━━━《 *${botName}*  シ︎ 》━━━━┃┃ ❏ *NAMA : ${pushname}*┃ ❏ *Prefix*: 「 ${prefix} 」┃ ❏ *UANG : Rp:${uangku}*┃ ❏ *Totar: ${mek.length}*┃┣ ❏ *ABOUT BOT* 」┃┣ ❏ *${prefix}info*┣ ❏ *${prefix}ping*┣ ❏ *${prefix}donasi*┣ ❏ *${prefix}owner* ┃┣ ❏ *ANIME MENU* 」┃┣ ❏ *${prefix}anime*┣ ❏ *${prefix}anime2*┣ ❏ *${prefix}naruto*┣ ❏ *${prefix}boruto*┣ ❏ *${prefix}minato*┣ ❏ *${prefix}hinata*┣ ❏ *${prefix}sakura*┣ ❏ *${prefix}sasuke*┣ ❏ *${prefix}kaneki*┣ ❏ *${prefix}toukachan*┣ ❏ *${prefix}rize*┣ ❏ *${prefix}akira*┣ ❏ *${prefix}itori*┣ ❏ *${prefix}kurumi*┣ ❏ *${prefix}miku*┣ ❏ *${prefix}baby*┣ ❏ *${prefix}rem*┣ ❏ *${prefix}animecry*┣ ❏ *${prefix}neonime*┣ ❏ *${prefix}animekiss*┣ ❏ *${prefix}wink*┣ ❏ *${prefix}waifu*┣ ❏ *${prefix}husbu*┣ ❏ *${prefix}loli*┣ ❏ *${prefix}waifukawai*┣ ❏ *${prefix}kemonomimi*┣ ❏ *${prefix}kuni*┣ ❏ *${prefix}nsfwloli3*┣ ❏ *${prefix}neko2*┣ ❏ *${prefix}holo*┣ ❏ *${prefix}wallpapernime*┣ ❏ *${prefix}kusonime*┣ ❏ *${prefix}testwaifu*┣ ❏ *${prefix}nsfwavatar*┣ ❏ *${prefix}pictwaifu*┣ ❏ *${prefix}pictlolicon*┣ ❏ *${prefix}pictneko*┣ ❏ *${prefix}kurumi2*┣ ❏ *${prefix}nakanomiku*┣ ❏ *${prefix}ram*┣ ❏ *${prefix}yotsuba*┣ ❏ *${prefix}randomanime*┣ ❏ *${prefix}character*┣ ❏ *${prefix}manga*┃┣ ❏ *DOMPET* 」┃┣ ❏ *${prefix}limit*┣ ❏ *${prefix}atm*┣ ❏ *${prefix}transfer*┣ ❏ *${prefix}buylimit*┣ ❏ *DOWNLOADER* 」┃┣ ❏ *${prefix}play*┣ ❏ *${prefix}play2*┣ ❏ *${prefix}ytplay*┣ ❏ *${prefix}ytplay2*┣ ❏ *${prefix}joox*┣ ❏ *${prefix}ytmp4*┣ ❏ *${prefix}ytmp3*┣ ❏ *${prefix}fbdl*┃┣ ❏ *GABUT* 」┃┣ ❏ *${prefix}apakah*┣ ❏ *${prefix}bisakah*┣ ❏ *${prefix}kapankah*┣ ❏ *${prefix}hobby*┣ ❏ *${prefix}rate*┣ ❏ *${prefix}seberapagay*┣ ❏ *${prefix}truth*┣ ❏ *${prefix}dare*┣ ❏ *${prefix}tebakin*┣ ❏ *${prefix}caklontong*┣ ❏ *${prefix}timer*┣ ❏ *${prefix}simi*┃┣ ❏ *GROUP MENU* 」┃┣ ❏ *${prefix}welcome* 「1/0」┣ ❏ *${prefix}leveling* 「1/0」┣ ❏ *${prefix}simih* 「1/0」┣ ❏ *${prefix}nsfw* 「1/0」┣ ❏ *${prefix}antilinkgrup* 「1/0」┣ ❏ *${prefix}grup* 「buka/tutup」┣ ❏ *${prefix}add*┣ ❏ *${prefix}kick*┣ ❏ *${prefix}hedsot*┣ ❏ *${prefix}linkgrup*┣ ❏ *${prefix}promote*┣ ❏ *${prefix}demote*┣ ❏ *${prefix}setname*┣ ❏ *${prefix}setdesc*┣ ❏ *${prefix}leave*┣ ❏ *${prefix}tagall*┣ ❏ *${prefix}admin*┣ ❏ *${prefix}level*┣ ❏ *${prefix}fitnah*┣ ❏ *${prefix}hidetag*┃┣ ❏ *MAKER MENU* 」┃┣ ❏ *${prefix}hartatahta*┣ ❏ *${prefix}hartatahta2*┣ ❏ *${prefix}hartatahta3*┣ ❏ *${prefix}galaxtext*┣ ❏ *${prefix}pupycut*┣ ❏ *${prefix}galaxstyle*┣ ❏ *${prefix}hologram*┣ ❏ *${prefix}textbyname*┣ ❏ *${prefix}herrypoter*┣ ❏ *${prefix}greanneon*┣ ❏ *${prefix}coffetext*┣ ❏ *${prefix}metallogo*┣ ❏ *${prefix}cblackpink*┣ ❏ *${prefix}imgmaker*┣ ❏ *${prefix}battelfiel*┣ ❏ *${prefix}grenneon*┣ ❏ *${prefix}laptop*┣ ❏ *${prefix}jokerlogo*┣ ❏ *${prefix}bloodfrosted*┣ ❏ *${prefix}halloween*┣ ❏ *${prefix}firework*┣ ❏ *${prefix}hororblood*┣ ❏ *${prefix}glitch*┣ ❏ *${prefix}googles*┣ ❏ *${prefix}goldplay*┣ ❏ *${prefix}shadow*┣ ❏ *${prefix}cup*┣ ❏ *${prefix}cup1*┣ ❏ *${prefix}romance*┣ ❏ *${prefix}smoke*┣ ❏ *${prefix}burnpaper*┣ ❏ *${prefix}lovemessage*┣ ❏ *${prefix}undergrass*┣ ❏ *${prefix}love*┣ ❏ *${prefix}coffe*┣ ❏ *${prefix}woodheart*┣ ❏ *${prefix}flowerheart*┣ ❏ *${prefix}woodenboard*┣ ❏ *${prefix}summer3d*┣ ❏ *${prefix}wolfmetal*┣ ❏ *${prefix}nature3d*┣ ❏ *${prefix}underwater*┣ ❏ *${prefix}golderrose*┣ ❏ *${prefix}summernature*┣ ❏ *${prefix}letterleaves*┣ ❏ *${prefix}flamming*┣ ❏ *${prefix}harrypotter*┣ ❏ *${prefix}carvedwood*┣ ❏ *${prefix}wetglass*┣ ❏ *${prefix}multicolor3d*┣ ❏ *${prefix}watercolor*┣ ❏ *${prefix}luxurygold*┣ ❏ *${prefix}galaxywallpaper*┣ ❏ *${prefix}lighttext*┣ ❏ *${prefix}beautifulflower*┣ ❏ *${prefix}puppycute*┣ ❏ *${prefix}royaltext*┣ ❏ *${prefix}heartshaped*┣ ❏ *${prefix}birthdaycake*┣ ❏ *${prefix}galaxystyle*┣ ❏ *${prefix}hologram3d*┣ ❏ *${prefix}greenneon*┣ ❏ *${prefix}glossychrome*┣ ❏ *${prefix}greenbush*┣ ❏ *${prefix}metallogo*┣ ❏ *${prefix}noeltext*┣ ❏ *${prefix}glittergold*┣ ❏ *${prefix}textcake*┣ ❏ *${prefix}starsnight*┣ ❏ *${prefix}wooden3d*┣ ❏ *${prefix}textbyname*┣ ❏ *${prefix}writegalacy*┣ ❏ *${prefix}galaxybat*┣ ❏ *${prefix}snow3d*┣ ❏ *${prefix}birthdayday*┣ ❏ *${prefix}goldplaybutton*┣ ❏ *${prefix}silverplaybutton*┣ ❏ *${prefix}freefire*┣ ❏ *${prefix}battlefield*┣ ❏ *${prefix}8bit*┣ ❏ *${prefix}googlesearch*┣ ❏ *${prefix}glitch*┣ ❏ *${prefix}pubglogo*┣ ❏ *${prefix}butterfly*┣ ❏ *${prefix}hbd*┣ ❏ *${prefix}shine*┣ ❏ *${prefix}thenight*┣ ❏ *${prefix}rainbow*┣ ❏ *${prefix}love*┣ ❏ *${prefix}burnpaper*┣ ❏ *${prefix}onecup*┣ ❏ *${prefix}textsky*┣ ❏ *${prefix}nature*┣ ❏ *${prefix}rosegold*┣ ❏ *${prefix}nature3d*┣ ❏ *${prefix}ocean*┣ ❏ *${prefix}woodheart*┣ ❏ *${prefix}summer*┣ ❏ *${prefix}underglass*┣ ❏ *${prefix}cemetery*┣ ❏ *${prefix}royallock*┣ ❏ *${prefix}coffecup*┣ ❏ *${prefix}coffecup2*┣ ❏ *${prefix}neon*┣ ❏ *${prefix}glow*┣ ❏ *${prefix}summer*┣ ❏ *${prefix}flower*┣ ❏ *${prefix}grandient*┣ ❏ *${prefix}embroidery*┣ ❏ *${prefix}funnycup*┣ ❏ *${prefix}orchids*┣ ❏ *${prefix}smoke2*┣ ❏ *${prefix}loveone*┣ ❏ *${prefix}smoke*┣ ❏ *${prefix}onesilk*┣ ❏ *${prefix}glowing*┣ ❏ *${prefix}heart*┣ ❏ *${prefix}wolf*┣ ❏ *${prefix}candy*┣ ❏ *${prefix}fakedonald*┣ ❏ *${prefix}tolol*┃┣◪ *SERTI MENU* 」┃┣ ❏ *${prefix}babuserti*┣ ❏ *${prefix}bucinserti*┣ ❏ *${prefix}bocilepepserti*┣ ❏ *${prefix}gayserti*┣ ❏ *${prefix}pacarserti*┣ ❏ *${prefix}sadboyserti*┣ ❏ *${prefix}surgaserti*┣ ❏ *${prefix}pintarserti*┣ ❏ *${prefix}badboyserti*┣ ❏ *${prefix}badgirlserti*┣ ❏ *${prefix}goodboyserti*┣ ❏ *${prefix}goodgirlserti*┣ ❏ *${prefix}editorberkelasserti*┣ ❏ *${prefix}goodlookingserti*┣ ❏ *${prefix}fucekboyserti*┣ ❏ *${prefix}jametserti*┣ ❏ *${prefix}hekelserti*┣ ❏ *${prefix}fftourserti*┣ ❏ *${prefix}fftourserti2*┣ ❏ *${prefix}fftourserti3*┣ ❏ *${prefix}fftourserti4*┣ ❏ *${prefix}fftourserti5*┣ ❏ *${prefix}pubgtourserti*┣ ❏ *${prefix}pubgtourserti2*┣ ❏ *${prefix}pubgtourserti3*┣ ❏ *${prefix}pubgtourserti4*┣ ❏ *${prefix}pubgtourserti5*┣ ❏ *${prefix}mltourserti*┣ ❏ *${prefix}mltourserti2*┣ ❏ *${prefix}mltourserti3*┣ ❏ *${prefix}mltourserti4*┣ ❏ *${prefix}mltourserti5*┣ ❏ *${prefix}tweetfake*┃┣ ❏ *NSFW MENU* 」┃┣ ❏ *${prefix}nsfw (1/0)*┣ ❏ *${prefix}hentai*┣ ❏ *${prefix}chiisaihentai*┣ ❏ *${prefix}randomhentai*┣ ❏ *${prefix}trap*┣ ❏ *${prefix}blowjob*┣ ❏ *${prefix}yaoi*┣ ❏ *${prefix}ecchi*┣ ❏ *${prefix}ahegao*┣ ❏ *${prefix}hololewd*┣ ❏ *${prefix}animefeets*┣ ❏ *${prefix}sideoppai*┣ ❏ *${prefix}animebooty*┣ ❏ *${prefix}animethighss*┣ ❏ *${prefix}hentaiparadise*┣ ❏ *${prefix}animearmpits*┣ ❏ *${prefix}lewdanimegirls*┣ ❏ *${prefix}hentaifemdom*┣ ❏ *${prefix}animebellybutton*┣ ❏ *${prefix}hentai4everyone*┃┣ ❏ *OTHER MENU* 」┃┣ ❏ *${prefix}brainly*┣ ❏ *${prefix}pinterest*┣ ❏ *${prefix}resepmakanan*┣ ❏ *${prefix}beritahoax*┣ ❏ *${prefix}timer*┣ ❏ *${prefix}nulis*┣ ❏ *${prefix}nulis1*┣ ❏ *${prefix}nulis2*┣ ❏ *${prefix}googleimage*┣ ❏ *${prefix}githubstalk*┣ ❏ *${prefix}igstalk*┣ ❏ *${prefix}imagesearch*┣ ❏ *${prefix}semoji*┃┣ ❏ *DEFACER MENU* 」┃┣ ❏ *${prefix}dorking*┣ ❏ *${prefix}encode64*┣ ❏ *${prefix}decode64*┣ ❏ *${prefix}decode32*┣ ❏ *${prefix}encode32*┣ ❏ *${prefix}encbinary*┣ ❏ *${prefix}decbinary*┣ ❏ *${prefix}encoctal*┣ ❏ *${prefix}decoctal*┣ ❏ *${prefix}becrypt*┣ ❏ *${prefix}hashidentifier*┃┣ ❏ *ISLAM MENU* 」┃┣ ❏ *${prefix}asmaulhusna*┣ ❏ *${prefix}niatsholat*┣ ❏ *${prefix}doaharian*┣ ❏ *${prefix}bacaansholat*┣ ❏ *${prefix}kisahnabi*┣ ❏ *${prefix}tahlil*┣ ❏ *${prefix}ayatkursi*┣ ❏ *${prefix}quotemuslim*┣ ❏ *${prefix}randomquran*┣ ❏ *${prefix}quranaudio*┣ ❏ *${prefix}listsurah*┣ ❏ *${prefix}alquran*┣ ❏ *${prefix}alquranaudio*┣ ❏ *${prefix}asmaulhusna*┣ ❏ *${prefix}jadwalsholat*┣ ❏ *${prefix}kisahnabi2*┃┣ ❏ *OWNER MENU* 」┃┣ ❏ *${prefix}bc*┣ ❏ *${prefix}bcgc*┣ ❏ *${prefix}clearall*┣ ❏ *${prefix}block*┣ ❏ *${prefix}unblock*┣ ❏ *${prefix}clone*┣ ❏ *${prefix}setppbot*┣ ❏ *${prefix}setreplay*┣ ❏ *${prefix}setprefix*┣ ❏ *${prefix}addprem*┣ ❏ *${prefix}dellprem*┣ ❏ *${prefix}ban*┣ ❏ *${prefix}unban*┣ ❏ *${prefix}event1/0*┃┣ ❏ *PREMIUM MENU* 」┃┣ ❏ *${prefix}premiumlist*┣ ❏ *${prefix}randomhentai*┣ ❏ *${prefix}bokep*┣ ❏ *${prefix}blowjob*┣ ❏ *${prefix}nulis1*┣ ❏ *${prefix}nulis2*┣ ❏ *${prefix}mutual*┣ ❏ *${prefix}next*┣ ❏ *${prefix}nangis*┣ ❏ *${prefix}cium*┣ ❏ *${prefix}peluk*┣ ❏ *${prefix}tiktod*┣ ❏ *${prefix}yutubdl*┣ ❏ *${prefix}hidetag5*┣ ❏ *${prefix}hidetag10*┣ ❏ *${prefix}moddroid*┣ ❏ *${prefix}happymod*┣ ❏ *${prefix}ytmp3*┣ ❏ *${prefix}ytmp4*┣ ❏ *${prefix}igvideo*┣ ❏ *${prefix}play*┣ ❏ *${prefix}play2*┣ ❏ *${prefix}blackpink*┣ ❏ *${prefix}cloudtext*┣ ❏ *${prefix}neontext*┃┣ ❏ *RANDOM MENU* 」┃┣ ❏ *${prefix}nekonime*┣ ❏ *${prefix}wibu*┣ ❏ *${prefix}loli*┣ ❏ *${prefix}neko*┣ ❏ *${prefix}husbu*┣ ❏ *${prefix}kpop*┣ ❏ *${prefix}anjing*┣ ❏ *${prefix}pokemon*┣ ❏ *${prefix}bokep*┣ ❏ *${prefix}darkjones*┃┣ ❏ *SIMPLE MENU* 」┃┣ ❏ *${prefix}sticker*┣ ❏ *${prefix}stickerwa*┣ ❏ *${prefix}jodoh*┣ ❏ *${prefix}weton*┣ ❏ *${prefix}jadian*┣ ❏ *${prefix}tebakumur*┣ ❏ *${prefix}ttp*┣ ❏ *${prefix}ttp2*┣ ❏ *${prefix}ttp3*┣ ❏ *${prefix}ttp4*┣ ❏ *${prefix}attp*┣ ❏ *${prefix}attp2*┣ ❏ *${prefix}ytkomen*┣ ❏ *${prefix}phkomen*┣ ❏ *${prefix}amongus*┣ ❏ *${prefix}tts*┣ ❏ *${prefix}toimg*┣ ❏ *${prefix}nulis*┣ ❏ *${prefix}stalking*┣ ❏ *${prefix}quotes*┣ ❏ *${prefix}bikinquote*┣ ❏ *${prefix}memeindo*┣ ❏ *${prefix}profile*┃┣ ❏ *SOUND MENU* 」┃┣ ❏ *${prefix}iri*┣ ❏ *${prefix}pale*┣ ❏ *${prefix}sound1*┣ ❏ *${prefix}sound2*┣ ❏ *${prefix}sound3*┣ ❏ *${prefix}sound4*┣ ❏ *${prefix}sound5*┣ ❏ *${prefix}sound6*┣ ❏ *${prefix}sound7*┣ ❏ *${prefix}sound8*┣ ❏ *${prefix}sound9*┣ ❏ *${prefix}sound10*┣ ❏ *${prefix}sound11*┣ ❏ *${prefix}sound12*┣ ❏ *${prefix}sound13*┣ ❏ *${prefix}sound14*┣ ❏ *${prefix}sound15*┣ ❏ *${prefix}sound16*┣ ❏ *${prefix}sound17*┣ ❏ *${prefix}sound18*┣ ❏ *${prefix}sound19*┣ ❏ *${prefix}sound20*┣ ❏ *${prefix}sound21*┣ ❏ *${prefix}sound22*┣ ❏ *${prefix}sound23*┣ ❏ *${prefix}sound24*┣ ❏ *${prefix}sound25*┣ ❏ *${prefix}sound26*┣ ❏ *${prefix}sound27*┣ ❏ *${prefix}sound28*┣ ❏ *${prefix}sound29*┣ ❏ *${prefix}sound30*┣ ❏ *${prefix}sound31*┣ ❏ *${prefix}sound32*┣ ❏ *${prefix}sound33*┣ ❏ *${prefix}sound34*┣ ❏ *${prefix}sound35*┣ ❏ *${prefix}sound36*┣ ❏ *${prefix}sound37*┣ ❏ *${prefix}sound38*┣ ❏ *${prefix}sound39*┣ ❏ *${prefix}sound40*┣ ❏ *${prefix}sound41*┣ ❏ *${prefix}sound42*┣ ❏ *${prefix}sound43*┣ ❏ *${prefix}sound44*┣ ❏ *${prefix}sound45*┣ ❏ *${prefix}sound46*┣ ❏ *${prefix}sound47*┣ ❏ *${prefix}sound48*┣ ❏ *${prefix}sound49*┣ ❏ *${prefix}sound50*┣ ❏ *${prefix}bernyanyi*┣ ❏ *${prefix}kebenaran*┣ ❏ *${prefix}sad*┣ ❏ *${prefix}sad2*┣ ❏ *${prefix}sad3*┣ ❏ *${prefix}candagodloking*┣ ❏ *${prefix}babycute*┣ ❏ *${prefix}cidro2*┣ ❏ *${prefix}gam2piri*┣ ❏ *${prefix}akusukakamu*┣ ❏ *${prefix}terpesona*┣ ❏ *${prefix}gajelas*┣ ❏ *${prefix}ndabisabasaingris*┣ ❏ *${prefix}paplepap*┣ ❏ *${prefix}paplepapslow*┣ ◪ Thanks To┃┣ ❏ MrG{108P}┣ ❏ SofyanAmv┣ ❏ Ivan_maulana┣ ❏ Arashi~┣ ❏ Mr.A43G┣ ❏ ItsmeikyXSec404┣ ❏ Fadhill┣ ❏ Ramlan┃┗━━━━《 Rem Bot -X シ︎ 》━━━━`baby.sendMessage(from, buffer, image, { quoted: mek, caption: shiz })const menu2 = fs.readFileSync('./assets/menu2.mp3');baby.sendMessage(from, menu2, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})					break			case 'donasi':				case 'donate':				baby.sendMessage(from, donasi(pushname, prefix, botName, ownerName), text)					break				case 'bingungcok':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}									baby.sendMessage(from, cara(pushname, prefix, botName, ownerName), text)					break					case 'afk':	           //UPDATE MRG{108P}	           if (!isGroup) return reply(ind.groupo())	           if (isAfkOn) return reply(ind.afkOnAlready())	           if (isLimit(sender)) return reply(ind.limitend(pushname))	            limitAdd(sender)	              reason = body.slice(5)					if (reason === undefined || reason === ' ' || reason === '') { reason = 'nothing'}	                addAfkUser(sender, time, reason)	                reply(ind.afkOn(pushname, reason))	            break/*]=====> SIMPLE MENU <=====[*/				case 'sticker': 				if (isLimit(sender)) return reply(ind.limitend(pusname))				await limitAdd(sender)					if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek						const media = await baby.downloadAndSaveMediaMessage(encmedia)						ran = getRandom('.webp')						await ffmpeg(`./${media}`)							.input(media)							.on('start', function (cmd) {								console.log(`Started : ${cmd}`)							})							.on('error', function (err) {								console.log(`Error : ${err}`)								fs.unlinkSync(media)								reply(ind.stikga)							})							.on('end', function () {								console.log('Finish')								exec(`webpmux -set exif ${addMetadata(namo, ator)} ${ran} -o ${ran}`, async (error) => {									//if (error) {											// reply(ind.stikga())											// fs.unlinkSync(media)												// fs.unlinkSync(ran)											// }									baby.sendMessage(from, fs.readFileSync(ran), sticker, {quoted: mek})									fs.unlinkSync(media)										fs.unlinkSync(ran)									})							})							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])							.toFormat('webp')							.save(ran)					} else if ((isMedia && mek.message.videoMessage.seconds < 11 || isQuotedVideo && mek.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 11) && args.length == 0) {						const encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek						const media = await baby.downloadAndSaveMediaMessage(encmedia)						ran = getRandom('.webp')						reply(ind.wait())						await ffmpeg(`./${media}`)							.inputFormat(media.split('.')[1])							.on('start', function (cmd) {								console.log(`Started : ${cmd}`)							})							.on('error', function (err) {								console.log(`Error : ${err}`)								fs.unlinkSync(media)								tipe = media.endsWith('.mp4') ? 'video' : 'gif'								reply(`❌ Gagal, pada saat mengkonversi ${tipe} ke stiker`)							})							.on('end', function () {								console.log('Finish')								exec(`webpmux -set exif ${addMetadata(namo, ator)} ${ran} -o ${ran}`, async (error) => {									//if (error) {											// reply(ind.stikga())											// fs.unlinkSync(media)												// fs.unlinkSync(ran)											// }									baby.sendMessage(from, fs.readFileSync(ran), sticker, {quoted: mek})									fs.unlinkSync(media)									fs.unlinkSync(ran)								})							})							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])							.toFormat('webp')							.save(ran)					} else {						reply(`Kirim gambar dengan caption ${prefix}sticker atau tag gambar yang sudah dikirim`)					}					breakcase 'stickerwa':                    if (args.length == 0) return reply(`Example: ${prefix + command} Koceng Imot`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/stickerwa?apikey=Api-team&query=${query}`)                    get_result = get_result.result[0].stickers                    for (var x of get_result) {                        ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/convert/towebp?apikey=Api-team&img=${x}`)                        baby.sendMessage(from, ini_buffer, sticker)                    }                    break				case 'jodoh':                    if (args.length == 0) return reply(`Example: ${prefix + command} Tahu & Bacem`)                    ini_nama = args.join(" ").split("&")                    nama1 = ini_nama[0].trim()                    nama2 = ini_nama[1].trim()                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/jodoh/${nama1}/${nama2}?apikey=Api-team`)                    get_result = get_result.result                    ini_txt = `Positif : ${get_result.positif}\n`                    ini_txt += `Negative : ${get_result.negatif}\n`                    ini_txt += `Deskripsi : ${get_result.deskripsi}`                    reply(txt)                    break                case 'weton':                    if (args.length == 0) return reply(`Example: ${prefix + command} 12 12 2020`)                    tanggal = args[0]                    bulan = args[1]                    tahun = args[2]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/weton/${tanggal}/${bulan}/${tahun}?apikey=Api-team`)                    get_result = get_result.result                    ini_txt = `Weton : ${get_result.weton}\n`                    ini_txt += `Pekerjaan : ${get_result.pekerjaan}\n`                    ini_txt += `Rejeki : ${get_result.rejeki}\n`                    ini_txt += `Jodoh : ${get_result.jodoh}`                    reply(ini_txt)                    break                case 'jadian':                    if (args.length == 0) return reply(`Example: ${prefix + command} 12 12 2020`)                    tanggal = args[0]                    bulan = args[1]                    tahun = args[2]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/jadian/${tanggal}/${bulan}/${tahun}?apikey=Api-team`)                    get_result = get_result.result                    ini_txt = `Karakteristik : ${get_result.karakteristik}\n`                    ini_txt += `Deskripsi : ${get_result.deskripsi}`                    reply(ini_txt)                    break                case 'tebakumur':                    if (args.length == 0) return reply(`Example: ${prefix + command} LoL Human`)                    ini_name = args.join(" ")                    if (args.length == 0) return reply(`Example: ${prefix + command} LoL Human`)                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/tebakumur?apikey=Api-team&name=${ini_name}`)                    get_result = get_result.result                    ini_txt = `Nama : ${get_result.name}\n`                    ini_txt += `Umur : ${get_result.age}`                    reply(ini_txt)                    breakcase 'githubstalk': //RIU GAY BORR					get_result = await fetchJson(`http://lolhuman.herokuapp.com/api/github/${body.slice(13)}?apikey=Api-team`, {method: 'get'})					get_result = get_result.result					txt = `Full : ${get_result.name}\n`					txt += `Followers : ${get_result.followers}\n`					txt += `Following : ${get_result.following}\n`					txt += `Publick : ${get_result.public_repos}\n`					txt += `Public Gits : ${get_result.public_gists}\n`					txt += `User : ${get_result.user}\n`					txt += `Compi : ${get_result.company}\n`					txt += `Lokasi : ${get_result.location}\n`					txt += `Email : ${get_result.email}\n`					txt += `Bio : ${get_result.bio}\n`					buffer = await getBuffer(get_result.avatar)					baby.sendMessage(from, buffer, image, {quoted: mek, caption: txt})					break			case 'igstalk': //RIU GAY BORR					get_result = await fetchJson(`http://lolhuman.herokuapp.com/api/stalkig/${body.slice(9)}?apikey=Api-team`, {method: 'get'})					get_result = get_result.result					txt = `Link : https://www.instagram.com/${get_result.username}\n`					txt += `Full : ${get_result.fullname}\n`					txt += `Post : ${get_result.posts}\n`					txt += `Followers : ${get_result.followers}\n`					txt += `Following : ${get_result.following}\n`					txt += `Bio : ${get_result.bio}\n`					buffer = await getBuffer(get_result.photo_profile)					baby.sendMessage(from, buffer, image, {quoted: mek, caption: txt})					break				case 'imagesearch': //RIU GAY BORR                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} loli kawaii`)                    query = args.join(" ")                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/gimage?apikey=Api-team&query=${query}`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break					case 'dadu':			//UPDATE MRG{108P}			if (isLimit(sender)) return reply(ind.limitend(pusname))			ranp = getRandom('.png')			rano = getRandom('.webp')	   random = `${Math.floor(Math.random() * 6)}`        hasil = 'https://www.random.org/dice/dice' + random + '.png'			exec(`wget ${hasil} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {			fs.unlinkSync(ranp)			if (err) return reply(ind.wait())			buffer = fs.readFileSync(rano)			baby.sendMessage(from, buffer, sticker, {quoted: mek})			fs.unlinkSync(rano)			})			break			case 'nulis1':				case 'tulis1':      //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(7)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/nulis?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break  		case 'nulis2':				case 'tulis2':       //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				ct = body.slice(8)				reply(mess.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/nulis?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'katakatadilan':			//UPDATE MRG{108P}					gatauda = body.slice(7)					anu = await fetchJson(`https://xptnewapi.000webhostapp.com/newapixptn/katakatadilan.php?apikey=xptn3` , {method: 'get'})					reply(ind.wait())					break					case 'katadoi':			//UPDATE MRG{108P}					gatauda = body.slice(7)					anu = await fetchJson(`https://xptnewapi.000webhostapp.com/newapixptn/katadoi.php?apikey=xptn3` , {method: 'get'})					reply(ind.wait())					break					case 'hemkel':			//UPDATE MRG{108P}				gatauda = body.slice(7)					anu = await fetchJson(`https://xptnewapi.000webhostapp.com/newapixptn/katakatahacker.php?apikey=xptn3`, {method: 'get'})					reply(ind.wait())					break					case 'pantun':			//UPDATE MRG{108P}					gatauda = body.slice(7)					anu = await fetchJson(`https://xptnewapi.000webhostapp.com/newapixptn/Pantun.php?apikey=xptn3`, {method: 'get'})					reply(ind.wait())					break					case 'quoterandom':			//UPDATE MRG{108P}					gatauda = body.slice(7)					anu = await fetchJson(`https://xptnewapi.000webhostapp.com/newapixptn/katastory.php?apikey=xptn3`, {method: 'get'})					reply(ind.wait())					break						case 'quotes':				if (isBanned) return reply(ind.baned())			//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				quotes = body.slice(1)				const quo =['Lebih baik mengerti sedikit daripada salah mengerti.','Hampir semua pria memang mampu bertahan menghadapi kesulitan. Namun, jika Anda ingin menguji karakter sejati pria, beri dia kekuasaan.','Bila tekad seseorang kuat dan teguh, Tuhan akan bergabung dalam usahanya.','Penderitaan adalah pelajaran.','Ilmu pengetahuan tanpa agama adalah pincang.','Hidup itu seperti sebuah sepeda, agar tetap seimbang kita harus tetap bergerak.','Perbedaan masa lalu, sekarang, dan masa depan tak lebih dari ilusi yang keras kepala.','Sebuah meja, sebuah kursi, semangkuk buah, dan sebuah biola; apa lagi yang dibutuhkan agar seseorang bisa merasa bahagia?','Belas kasihanlah terhadap sesama, bersikap keraslah terhadap diri sendiri.','Cara paling baik untuk menggerakkan diri Anda ialah memberi tugas kepada diri sendiri.','Kita tidak boleh kehilangan semangat. Semangat adalah stimulan terkuat untuk mencintai, berkreasi dan berkeinginan untuk hidup lebih lama.','Manusia akan bahagia selama ia memilih untuk bahagia.','Saya tidak berharap menjadi segalanya bagi setiap orang. Saya hanya ingin menjadi sesuatu untuk seseorang.','Apabila sempurna akal seseorang, maka sedikit perkataannya.','Bahagialah orang yang dapat menjadi tuan untuk dirinya, menjadi kusir untuk nafsunya dan menjadi kapten untuk bahtera hidupnya.','Sahabat yang jujur lebih besar harganya daripada harta benda yang diwarisi dari nenek moyang.','Yang paling melelahkan dalam hidup adalah menjadi orang yang tidak tulus.','Terbuka untuk Anda, begitulah Tuhan memberi kita jalan untuk berusaha. Jangan pernah berfikir jalan sudah tertutup.','Penundaan adalah kuburan dimana peluang dikuburkan.','Cinta bukan saling menatap mata, namun melihat ke arah yang sama bersama-sama.','Kita adalah apa yang kita kerjakan berulang kali. Dengan demikian, kecemerlangan bukan tindakan, tetapi kebiasaan.','Jangan pernah mencoba menjadikan putra atau putri Anda menjadi seperti Anda. Diri Anda hanya cukup satu saja.','Jika Anda bisa membuat orang lain tertawa, maka Anda akan mendapatkan semua cinta yang Anda inginkan.','Masalah akan datang cepat atau lambat. Jika masalah datang, sambut dengan sebaik mungkin. Semakin ramah Anda menyapanya, semakin cepat ia pergi.','Kita tak bisa melakukan apapun untuk mengubah masa lalu. Tapi apapun yang kita lakukan bisa mengubah masa depan.','Kesabaran adalah teman dari kebijaksanaan.','Orang-orang kreatif termotivasi oleh keinginan untuk maju, bukan oleh keinginan untuk mengalahkan orang lain.','Dimanapun engkau berada selalulah menjadi yang terbaik dan berikan yang terbaik dari yang bisa kita berikan.','Kebencian seperti halnya cinta, berkobar karena hal-hal kecil.','Anda tidak perlu harus berhasil pada kali pertama.','Satu jam yang intensif, jauh lebih baik dan menguntungkan daripada bertahun-tahun bermimpi dan merenung-renung.','Hal terbaik yang bisa Anda lakukan untuk orang lain bukanlah membagikan kekayaan Anda, tetapi membantu dia untuk memiliki kekayaannya sendiri.','Tidak ada jaminan keberhasilan, tetapi tidak berusaha adalah jaminan kegagalan.','Aku tidak tahu kunci sukses itu apa, tapi kunci menuju kegagalan adalah mencoba membuat semua orang senang.']				const tes = quo[Math.floor(Math.random() * quo.length)]				baby.sendMessage(from, ''+tes+'\n\n_Kata Ilham._', text, { quoted: mek })				await limitAdd(sender)				break					case 'profile':    				baby.updatePresence(from, Presence.composing)				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))    				try {					profil = await baby.getProfilePicture(`${sender.split('@')[0]}@s.whatsapp.net`)					} catch {					profil = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'					}					 profile = `╭─「 *PROFILE ANDA* 」\n│• *Name:* ${pushname}\n│• *User Terdaftar:* ✓\n│• *Link:* wa.me/${sender.split("@")[0]}\n╰─────────────────────`					buff = await getBuffer(profil)					baby.sendMessage(from, buff, image, {quoted: mek, caption: profile})					break				case 'pornhub':                case 'glitch':                case 'avenger':                case 'space':                case 'ninjalogo':                case 'marvelstudio':                case 'lionlogo':                case 'wolflogo':                case 'steel3d':                case 'wallgravity':                    if (args.length == 0) return reply(`Example: ${prefix + command} LoL Human`)                    txt1 = args[0]                    txt2 = args[1]                    ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/textprome2/${command}?apikey=Api-team&text1=${txt1}&text2=${txt2}`)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek })                    break					case 'halloweentext':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())       if (!isPublic) return reply(mess.only.publikG)								if (args.length < 1) return reply(ind.wrongf())				ween = body.slice(15)				if (ween.length > 10) return reply('Teksnya kepanjangan, maksimal 9 karakter')				reply(ind.wait())				buffer = await getBuffer(`https://api.xteam.xyz/textpro/helloweenfire?text=${ween}&APIKEY=KINGLEO07`)		    baby.sendMessage(from, buffer, image, {quoted: mek})		    await limitAdd(sender)			    break                case 'gemboktext':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					var gh = body.slice(12)					var gem = gh.split("&")[0];					var bok = gh.split("&")[1];					if (args.length < 1) return reply(`「❗」Contoh : ${prefix}gemboktext REM&MrG108P`)					reply(ind.wait())					buffer = await getBuffer(`https://api.vhtear.com/padlock?text1=${gem}&text2=${bok}&apikey=BeliApikeyngab`)					baby.sendMessage(from, buffer, image, {quoted: mek})					await limitAdd(sender)					break                case 'glitchtext':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())					var gh = body.slice(12)					var gli = gh.split("&")[0];					var tch = gh.split("&")[1];					if (args.length < 1) return reply(`「❗」Contoh : ${prefix}glitchtext REM&MrG108P`)					reply(ind.wait())					buffer = await getBuffer(`https://api.xteam.xyz/textpro/glitch?text=${gli}&text2=${tch}&APIKEY=KINGLEO07`)					baby.sendMessage(from, buffer, image, {quoted: mek})					await limitAdd(sender)					break				case 'simi':        if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/simisimi?text=${body.slice(9)}&apikey=BeliApikey`)				reply(anu.result.success)				break 				case 'tts':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return baby.sendMessage(from, 'Kode bahasanya mana kak? contoh : ${prefix}Nakano Miku', text, {quoted: mek})					const gtts = require('./lib/gtts')(args[0])					if (args.length < 2) return baby.sendMessage(from, `Teksnya mana kak | contoh : ${prefix}tts id ah yamate kudasai`, text, {quoted: mek})					dtt = body.slice(8)					ranm = getRandom('.mp3')					rano = getRandom('.ogg')					dtt.length > 300					? reply('Teks nya terlalu panjang kak')					: gtts.save(ranm, dtt, function() {						exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {							fs.unlinkSync(ranm)							buff = fs.readFileSync(rano)							if (err) return reply(ind.stikga())							baby.sendMessage(from, buff, audio, {quoted: mek, ptt:true})							fs.unlinkSync(rano)						})					})					await limitAdd(sender)					break			// Creator By Lolhuman Team    case 'ttp':                case 'ttp2':                case 'ttp3':                case 'ttp4':                case 'attp':                    if (args.length == 0) return reply(`Example: ${prefix + command} LoL Human`)                    ini_txt = args.join(" ")                    ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/${command}?apikey=Api-team&text=${ini_txt}`)                    baby.sendMessage(from, ini_buffer, sticker, { quoted: mek })                    break                    case 'attp':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} MrG108P`)                    teks = args.join(" ")                    buffer = await getBuffer(`http://lolhuman.herokuapp.com/api/attp?apikey=Api-team&text=${teks}`)                    baby.sendMessage(from, buffer, sticker, { quoted: mek })                    break                    case 'qrcode':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} loli kawaii`)                    query = args.join(" ")                    ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/qrcode?apikey=Api-team&text=${query}`)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek })                    break                    case 'nulis':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} LoL Human`)                    teks = args.join(" ")                    buffer = await getBuffer(`http://lolhuman.herokuapp.com/api/nulis?apikey=Api-team&text=${teks}`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break                                        case 'ytkomen':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} LoL Human api.lolhuman.xyz`)		username = args[0]		comment = args[2]                    buffer = await getBuffer(`http://lolhuman.herokuapp.com/api/ytcomment?apikey=Api-team&username=${username}&comment=${comment}&img=https://i.ibb.co/JdfQ73m/photo-2021-02-05-10-13-39.jpg`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break                    case 'phkomen':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} LoL Human api.lolhuman.xyz`)		username = args[0]		comment = args[2]                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/phcomment?apikey=Api-team&img=https://i.ibb.co/JdfQ73m/photo-2021-02-05-10-13-39.jpg&text=${comment}&username=${username}`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break                    case 'amongus':		//UPDATE MRG{108P}                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} MrG108P`)                    buffer = await getBuffer(`http://lolhuman.herokuapp.com/api/amongus?apikey=Api-team&text=${body.slice(9)}`)                    baby.sendMessage(from, buffer, sticker, { quoted: mek })                    break                    case 'tolol'://ARYA TOLOL NYA MINTA AMPUN				if (args.length < 1) return reply('Teks nya mana ? titit ?')				gatauda = body.slice(6)				buffer = await getBuffer(`http://lolhuman.herokuapp.com/api/toloserti?apikey=Api-team&name=${gatauda}`, {method: 'get'})				baby.sendMessage(from, buffer, image, {quoted: mek})				break				case 'toimg':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (!isQuotedSticker) return reply('Reply atau Tag sticker yang mau dijadiin gambar kak >_<')					reply(ind.wait())					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await baby.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.png')					exec(`ffmpeg -i ${media} ${ran}`, (err) => {						fs.unlinkSync(media)						if (err) return reply(ind.stikga())						buffer = fs.readFileSync(ran)						baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak [(^.^)]'})						fs.unlinkSync(ran)					})					await limitAdd(sender)					break                case 'speed':                case 'ping':                const timestamp = speed();                const latensi = speed() - timestamp                 baby.sendMessage(from, `Speed: ${latensi.toFixed(4)} _ms_`, text, { quoted: mek})                    break					                              case 'bikinquote':                if (isBanned) return reply(ind.baned())                //UPDATE MRG{108P}                if (isLimit(sender)) return reply(ind.limitend(pusname))                var gh = body.slice(12)					var quote = gh.split("&")[0];					var wm = gh.split("&")[1];					const pref = `yang mau dijadiin quote apaan, titit?\n\ncontoh : ${prefix}bikinquote REM&MrG108P`					if (args.length < 1) return reply(pref)					reply(ind.wait())					anu = await fetchJson(`https://terhambar.com/aw/qts/?kata=${quote}&author=${wm}&tipe=random`, {method: 'get'})					buffer = await getBuffer(anu.result)					baby.sendMessage(from, buffer, image, {caption: 'Nih kak >_<', quoted: mek})					await limitAdd(sender)					break                   case 'stalkig':                   if (isBanned) return reply(ind.baned())                   //UPDATE MRG{108P}                   if (isLimit(sender)) return reply(ind.limitend(pusname))                     teks = body.slice(9)                     anu = await fetchJson(`https://api.vhtear.com/igprofile?query=${teks}&apikey=BeliApikeyngab`, {method: 'get'})                     reply('Sabar ya gan....')                     buffer = await getBuffer(anu.result.picture)                     hasil = `YAHAHA TELAH DI STALK BOS KU UNTUK USERNAME ${teks} \n\n *Username?* : _${anu.result.username}_ \n *Nama??* : _${anu.result.full_name}_ \n *Jumlah Follower??﹦?* : _${anu.result.follower}_ \n *Jumlah Following?* : _${anu.result.follow}_ \n *Jumlah Post?* : _${anu.result.post_count}_ \n *Biografi?? :* _${anu.result.biography}`                    baby.sendMessage(from, buffer, image, {quoted: mek, caption: hasil})                    await limitAdd(sender)			       break				case 'daftar'://ARYA TOLOL CUKK         case 'daftar':	          	if (isBanned) return reply(ind.baned())                if (isRegistered) return  reply(ind.rediregis())                if (!q.includes('|')) return  reply(ind.wrongf())                const namaUser = q.substring(0, q.indexOf('|') - 0)                const umurUser = q.substring(q.lastIndexOf('|') + 1)                const serialUser = createSerial(20)                if (namaUser.length >= 30) return reply(`Namanya kepanjangan kak :)`)                if (umurUser.length >= 3, umurUser.length <= 1) return reply(`Umur min 10 tahun max 40 tahun`)                veri = sender                if (isGroup) {                    addRegisteredUser(sender, namaUser, umurUser, time, serialUser)                    await reply(ind.registered(namaUser, umurUser, serialUser, time, sender))                    addATM(sender)                    addLevelingId(sender)                    console.log(color('[REGISTER]'), color(time, 'yellow'), 'Name:', color(namaUser, 'cyan'), 'Age:', color(umurUser, 'cyan'), 'Serial:', color(serialUser, 'cyan'), 'in', color(sender || groupName))                } else {                    addRegisteredUser(sender, namaUser, umurUser, time, serialUser)                    await reply(ind.registered(namaUser, umurUser, serialUser, time, sender))                    addATM(sender)                    addLevelingId(sender)                    console.log(color('[REGISTER]'), color(time, 'yellow'), 'Name:', color(namaUser, 'cyan'), 'Age:', color(umurUser, 'cyan'), 'Serial:', color(serialUser, 'cyan'))                }					breakcase 'slide':					//UPDATE MRG{108P}					if (isLimit(sender)) return reply(ind.limitend(pusname))					if (args.length < 1) return reply('*Textnya mana Tod?*')					teks = `${body.slice(7)}`					atytyd = await getBuffer(`https://api.vhtear.com/slidingtext?text=${teks}&apikey=BeliApikeyngab`, {method: 'get'})					reply(ind.wait)					baby.sendMessage(from, atytyd, video, {quoted: mek})					await limitAdd(sender) 					break  case 'nickff':                  //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')					baby.updatePresence(from, Presence.composing) 					data = await fetchJson(`https://api.zeks.xyz/api/nickepep?apikey=apivinz`, {method: 'get'})					teks = '=================\n'					for (let i of data.result) {						teks += `*Nick* : ${i}\n=================\n`					}					reply(teks.trim())					await limitAdd(sender)					break		case 'silktext':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))								if (args.length < 1) return reply(ind.wrongf())				silk = body.slice(10)				if (silk.length > 7) return reply('Teksnya kepanjangan, maksimal 6 karakter')				reply(ind.wait())				buffer = await getBuffer(`https://api.vhtear.com/silktext?text=${silk}&apikey=BeliApikeyngab`)		    baby.sendMessage(from, buffer, image, {quoted: mek})		    await limitAdd(sender)			    break// PREMIUM				case 'premiumlist':					baby.updatePresence(from, Presence.composing)                     //UPDATE MRG{108P}					teks = `╭─「 *JUMLAH USER PREMIUM* 」\n`					no = 0					for (let prem of premium) {						no += 1						teks += `│「${no.toString()}」 @${prem.split('@')[0]}\n`					}					teks += `│ Jumlah User Premium : ${premium.length}\n╰──────「 *${botName}* 」`					baby.sendMessage(from, teks.trim(), extendedText, {quoted: mek, contextInfo: {"mentionedJid": premium}})					break				case 'bokep':				baby.updatePresence(from, Presence.composing)                   if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())				 data = fs.readFileSync('./src/18.js');                 jsonData = JSON.parse(data);                 randIndex = Math.floor(Math.random() * jsonData.length);                 randKey = jsonData[randIndex];                 randBokep = await getBuffer(randKey.image)                 reply('JANGAN COMLY MULU BRO')                 randTeks = randKey.teks                 baby.sendMessage(from, randBokep, image, {quoted: mek, caption: randTeks})				break				case 'mutual':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())                if (isGroup) return  reply( 'TIDAK BISA DI GRUP KAK')                anug = getRegisteredRandomId(_registered).replace('@s.whatsapp.net','')                await reply('Mencari Pasangan >_<')                await reply(`wa.me/${anug}`)                await reply( `Pasangan Ditemukan: 🐊\n*${prefix}next* — Temukan Pasangan Baru`)            break            case 'next':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())                if (isGroup) return  reply( 'TIDAK BISA DI GRUP KAK')                anug = getRegisteredRandomId(_registered).replace('@s.whatsapp.net','')                await reply('Mencari Pasangan >_<')                await reply(`wa.me/${anug}`)                await reply( `Pasangan Ditemukan: 🐊\n*${prefix}next* — Temukan Pasangan Baru`)                break                case 'blowjob':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())					ranp = getRandom('.gif')					rano = getRandom('.webp')					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/nsfwblowjob?apikey=${TobzKey}`, {method: 'get'})					if (anu.error) return reply(anu.error)					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {						fs.unlinkSync(ranp)						if (err) return reply(ind.stikga())						buffer = fs.readFileSync(rano)						baby.sendMessage(from, buffer, sticker, {quoted: mek})						fs.unlinkSync(rano)					})					break                case 'nangis':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())					ranp = getRandom('.gif')					rano = getRandom('.webp')					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/cry?apikey=${TobzKey}`, {method: 'get'})					reply('Sabar ya gan....')					if (anu.error) return reply(anu.error)					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {						fs.unlinkSync(ranp)						if (err) return reply(ind.stikga())						buffer = fs.readFileSync(rano)						baby.sendMessage(from, buffer, sticker, {quoted: mek})						fs.unlinkSync(rano)					})					break					case 'cium':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())					ranp = getRandom('.gif')					rano = getRandom('.webp')					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/kiss?apikey=${TobzKey}`, {method: 'get'})					reply('Sabar ya gan....')					if (anu.error) return reply(anu.error)					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {						fs.unlinkSync(ranp)						if (err) return reply(ind.stikga())						buffer = fs.readFileSync(rano)						baby.sendMessage(from, buffer, sticker, {quoted: mek})						fs.unlinkSync(rano)					})					break					case 'peluk':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())					ranp = getRandom('.gif')					rano = getRandom('.webp')					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/hug?apikey=${TobzKey}`, {method: 'get'})					reply('Sabar ya gan....')					if (anu.error) return reply(anu.error)					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {						fs.unlinkSync(ranp)						if (err) return reply(ind.stikga())						buffer = fs.readFileSync(rano)						baby.sendMessage(from, buffer, sticker, {quoted: mek})						fs.unlinkSync(rano)					})					break				case 'yutubdl':					if (args.length < 1) return reply('Urlnya mana um?')                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())					if(!isUrl(args[0]) && !args[0].includes('youtu')) return reply('URL NYA TIDAK VALID KAK')						anu = await fetchJson(`https://api.vhtear.com/ytdl?link=${args[0]}&apikey=BeliApikeyngab`, {method: 'get'})					if (anu.error) return reply(anu.error)					teks = `*➸ JUDUL* : ${anu.result.title}\n\n*[WAIT] Proses Dumlu Yakan*`					thumb = await getBuffer(anu.result.imgUrl)					baby.sendMessage(from, thumb, image, {quoted: mek, caption: teks})					buffer = await getBuffer(anu.result.UrlVideo)					baby.sendMessage(from, buffer, video, {mimetype: 'video/mp4', quoted: mek})					break				case 'tiktod':					if (args.length < 1) return reply('Urlnya mana um?')                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())					if(!isUrl(args[0]) && !args[0].includes('youtu')) return reply('URL NYA TIDAK VALID KAK')					anu = await fetchJson(`https://api.vhtear.com/tiktokdl?link=${args[0]}&apikey=BeliApikeyngab`,)					reply('[WAIT] Proses Dumlu Yakan')					buffer = await getBuffer(anu.result.video)					baby.sendMessage(from, buffer, video, {mimetype: 'video/mp4', quoted: mek})					break					case 'hidetag5':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())					if (!isGroup) return reply(ind.groupo())					var value = body.slice(10)					var group = await baby.groupMetadata(from)					var member = group['participants']					var mem = []					member.map( async adm => {					mem.push(adm.id.replace('c.us', 's.whatsapp.net'))					})					var options = {					text: value,					contextInfo: { mentionedJid: mem },					quoted: mek					}					baby.sendMessage(from, options, text)	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})					break					case 'hidetag10':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())					if (!isGroup) return reply(ind.groupo())					var value = body.slice(11)					var group = await baby.groupMetadata(from)					var member = group['participants']					var mem = []					member.map( async adm => {					mem.push(adm.id.replace('c.us', 's.whatsapp.net'))					})					var options = {					text: value,					contextInfo: { mentionedJid: mem },					quoted: mek					}					baby.sendMessage(from, options, text)	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                .then(() => {baby.sendMessage(from, options, text)})	                	                					break								case 'delete':					case 'del':					case 'd':					if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					baby.deleteMessage(from, { id: mek.message.extendedTextMessage.contextInfo.stanzaId, remoteJid: from, fromMe: true })					break                	case 'randomhentai':					 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}					if (isLimit(sender)) return reply(ind.limitend(pusname))										if (!isNsfw) return reply(ind.nsfwoff())				if (isBanned) return reply('Maaf kamu sudah terbenned!')                                        gatauda = body.slice(12)					reply(ind.wait())                                        anu = await fetchJson(`https://api.shizukaa.xyz/api/randomimage?apikey=itsmeiky633`, {method: 'get'})                                        buffer = await getBuffer(anu.result)                                        baby.sendMessage(from, buffer, image, {quoted: mek})					await limitAdd(sender)                                        break																												               							// PREMIUM		    								/*]=====> GABUTZ MENU <=====[*/				case 'caklontong':                case 'caklontong':					anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/kuis/caklontong?apikey=BeliApikey`, {method: 'get'})					setTimeout( () => {				 baby.sendMessage(from, '*➸ Jawaban :* '+anu.result.jawaban+'\n'+anu.result.deskripsi, text, {quoted: mek })					}, 30000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_10 Detik lagi…_', text) // ur cods					}, 20000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_20 Detik lagi_…', text) // ur cods					}, 10000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_30 Detik lagi_…', text) // ur cods					}, 1000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, anu.result.soal, text, {quoted: mek })					}, 0) // 1000 = 1s,					break 					case 'tebakgambar':			         //UPDATE MRG{108P}			                 //UPDATE MRG{108P}					if (isLimit(sender)) return reply(ind.limitend(pusname))					anu = await fetchJson(`https://videfikri.com/api/tebakgambar`, {method: 'get'})					bufferkkk = await getBuffer(anu.result.soal_gbr)					setTimeout( () => {					baby.sendMessage(from, '*➸ Jawaban :* '+anu.result.jawaban, text, {quoted: mek}) // ur cods					}, 30000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_10 Detik lagi…_', text) // ur cods					}, 20000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_20 Detik lagi_…', text) // ur cods					}, 10000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_30 Detik lagi_…', text) // ur cods					}, 2500) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, bufferkkk, image, { caption: '_Jelaskan Apa Maksud Gambar Ini_', quoted: mek }) // ur cods					}, 0) // 1000 = 1s,					await limitAdd(sender) 					break								case 'family100':		if (isBanned) return reply(ind.baned())                //UPDATE MRG{108P}		if (isLimit(sender)) return reply(ind.limitend(pusname))		if (!isGroup) return reply(ind.groupo())					anu = await fetchJson(`https://api.vhtear.com/family100&apikey=BeliApikeyngab`, {method: 'get'})					family = `*${anu.result.soal}*`					setTimeout( () => {					baby.sendMessage(from, '*➸ Jawaban :* '+anu.result.jawaban, text, {quoted: mek}) // ur cods					}, 30000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_10 Detik lagi... cepet kak!_', text) // ur cods					}, 20000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_20 Detik lagi... cepetan woe!_', text) // ur cods					}, 10000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_30 Detik lagi... cepet!_', text) // ur cods					}, 2500) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, family, text, {quoted: mek }) // ur cods					}, 0) // 1000 = 1s,					await limitAdd(sender) 					break				 				case 'tebakin':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					anu = await fetchJson(`https://api.vhtear.com/tebakgambar&apikey=BeliApikeyngab`, {method: 'get'})					ngebuff = await getBuffer(anu.result.soalImg)					tebak = `➸ Jawaban : *${anu.result.jawaban}*`					setTimeout( () => {					baby.sendMessage(from, tebak, text, {quoted: mek})					}, 30000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_10 Detik lagi..._', text) // ur cods					}, 20000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_20 Detik lagi..._', text) // ur cods					}, 10000) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, '_30 Detik lagi..._', text) // ur cods					}, 2500) // 1000 = 1s,					setTimeout( () => {					baby.sendMessage(from, ngebuff, image, { caption: '_Tebak bro!!! gak bisa jawab donasi ya:v_', quoted: mek }) // ur cods					}, 0) // 1000 = 1s,					await limitAdd(sender) 					break				case 'bisakah':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					bisakah = body.slice(1)					const bisa =['Tentu Saja Bisa! Kamu Adalah Orang Paling Homky','Gak Bisa Ajg Aowkwowk','Hmm Gua Gak Tau Yaa, tanya ama bapakau','Ulangi Tod Gua Ga Paham']					const keh = bisa[Math.floor(Math.random() * bisa.length)]					baby.sendMessage(from, 'Pertanyaan : *'+bisakah+'*\n\nJawaban : '+ keh, text, { quoted: mek })					await limitAdd(sender)					break				case 'kapankah':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					kapankah = body.slice(1)					const kapan =['Besok','Lusa','Tadi','4 Hari Lagi','5 Hari Lagi','6 Hari Lagi','1 Minggu Lagi','2 Minggu Lagi','3 Minggu Lagi','1 Bulan Lagi','2 Bulan Lagi','3 Bulan Lagi','4 Bulan Lagi','5 Bulan Lagi','6 Bulan Lagi','1 Tahun Lagi','2 Tahun Lagi','3 Tahun Lagi','4 Tahun Lagi','5 Tahun Lagi','6 Tahun Lagi','1 Abad lagi','3 Hari Lagi']					const koh = kapan[Math.floor(Math.random() * kapan.length)]					baby.sendMessage(from, 'Pertanyaan : *'+kapankah+'*\n\nJawaban : '+ koh, text, { quoted: mek })					await limitAdd(sender)					break           case 'apakah':           if (isBanned) return reply(ind.baned())           //UPDATE MRG{108P}           if (isLimit(sender)) return reply(ind.limitend(pusname))					apakah = body.slice(1)					const apa =['Iya','Tidak','Bisa Jadi','Ulangi bro gak paham']					const kah = apa[Math.floor(Math.random() * apa.length)]					baby.sendMessage(from, 'Pertanyaan : *'+apakah+'*\n\nJawaban : '+ kah, text, { quoted: mek })					await limitAdd(sender)					break				case 'rate':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					rate = body.slice(1)					const ra =['4','9','17','28','34','48','59','62','74','83','97','100','29','94','75','82','41','39']					const te = ra[Math.floor(Math.random() * ra.length)]					baby.sendMessage(from, 'Pertanyaan : *'+rate+'*\n\nJawaban : '+ te+'%', text, { quoted: mek })					await limitAdd(sender)					break           case 'hobby':           if (isBanned) return reply(ind.baned())           //UPDATE MRG{108P}           if (isLimit(sender)) return reply(ind.limitend(pusname))					hobby = body.slice(1)					const hob =['Desah Di Game','Ngocokin Doi','Stalking sosmed nya mantan','Kau kan gak punya hobby awokawok','Memasak','Membantu Atok','Mabar','Nobar','Sosmedtan','Membantu Orang lain','Nonton Anime','Nonton Drakor','Naik Motor','Nyanyi','Menari','Bertumbuk','Menggambar','Foto fotoan Ga jelas','Maen Game','Berbicara Sendiri']					const by = hob[Math.floor(Math.random() * hob.length)]					baby.sendMessage(from, 'Pertanyaan : *'+hobby+'*\n\nJawaban : '+ by, text, { quoted: mek })					await limitAdd(sender)					breakcase 'asmaulhusna': 					baby.updatePresence(from, Presence.composing) 				reply(`[❕] Loading`)				asu = await fetchJson(`https://onlydevcity.herokuapp.com/api/muslim/asmaulhusna?apikey=BeliApikey`, {method: 'get'})				teks = '=================\n'				for (let i of asu.result.data) {					teks += `*Nomor:* : ${i.index}\n*Latin* : ${i.latin}\n*Arab* : ${i.arabic}\n*Translate Indo* : ${i.translation_id}\n*Translate English* : ${i.translation_en}\n=================\n`				}				reply(teks)				breakcase 'doaharian': 					baby.updatePresence(from, Presence.composing) 				reply(`[❕] Loading`)				asu = await fetchJson(`https://onlydevcity.herokuapp.com/api/muslim/doaharian?apikey=BeliApikey`, {method: 'get'})				teks = '=================\n'				for (let i of asu.result.data) {					teks += `*Nama Doa:* : ${i.title}\n*Arab* : ${i.arabic}\n*Latin* : ${i.latin}\n*Translation* : ${i.translation}\n=================\n`				}				reply(teks)				break		case 'niatsholat': // Case By Arga				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/muslim/niatshalat?apikey=onlyonedeveloper`, {method: 'get'})				teks = '=================\n'				for (let i of anu.result) {				teks += `Sholat : ${i.name}\n*Arab* : ${i.arabic}\n*Latin* : ${i.latin}\n*Terjemah* : ${i.terjemahan}\n=================\n`				}				reply(teks.trim())				break		case 'bacaansholat': // Case By Arga				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/muslim/bacaanshalat?apikey=BeliApikey`, {method: 'get'})				teks = '=================\n'				for (let i of anu.result) {				teks += `Bacaan : ${i.name}\n*Arab* : ${i.arabic}\n*Latin* : ${i.latin}\n*Terjemah* : ${i.terjemahan}\n=================\n`				}				reply(teks.trim())				break				case 'kisahnabi2': 				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/kisahnabi?nabi=${body.slice(11)}&apikey=BeliApikey`, {method: 'get'})				buffer7 = await getBuffer(anu.result.image)				teks = `*HASIL*\n\n*➸ Nama Nabi :* ${anu.result.nabi}\n*➸ Lahir :* ${anu.result.lahir}\n*➸ Umur :* ${anu.result.umur}\n*➸ Tempat :* ${anu.result.tempat}\n*➸ Kisah :* ${anu.result.kisah}`				baby.sendMessage(from, teks, text, { quoted: mek, caption: 'Subscribe MrG{108P}' })				breakcase 'quotemuslim': 				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/randomquote/muslim?apikey=BeliApikey`, {method: 'get'})				hasil = `*➸ Quote :* ${anu.result.text_id}`				baby.sendMessage(from, hasil, text, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break		case 'tahlil': 				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/muslim/tahlil?apikey=onlyonedeveloper`, {method: 'get'})				teks = '=================\n'				for (let i of anu.result.data) {				teks += `Title : ${i.title}\n*Arab* : ${i.arabic}\n*Terjemah* : ${i.translation}\n=================\n`				}				reply(teks.trim())				break		case 'ayatkursi': 				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/muslim/ayatkursi?apikey=BeliApikey`, {method: 'get'})				teks = `➸ *Arab* : ${anu.result.data.arabic}\n*➸ Latin :* ${anu.result.data.latin}\n*➸ Arti :* ${anu.result.data.translation}\n*➸ Tafsir :* ${anu.result.data.tafsir}`				baby.sendMessage(from, teks, text, { quoted: mek, caption: 'Subscribe MrG{108P}' })				breakcase 'randomquran':                case 'quranaudio':				if (isBanned) return reply(mess.only.benned)   				 if (!isUser) return reply(mess.only.userB)				anu = await fetchJson(`https://api.zeks.xyz/api/randomquran`, {method: 'get'})					faktaaa = `*Nama* : *${anu.result.nama}*\n*Arti* : *${anu.result.arti}*\n*Nomor* : *${anu.result.nomor}*\n*Tipe* : *${anu.result.type}*\n*Ayat* : *${anu.result.ayat}*\n*Isi* : *${anu.result.keterangan}*`					quu = await getBuffer(anu.result.audio)					baby.sendMessage(from, faktaaa, text, {quoted: mek})					baby.sendMessage(from, quu, audio, {mimetype: 'audio/mp4', filename: `${anu.result.nama}.mp3`, quoted: mek})					await limitAdd(sender) 					breakcase 'listsurah':                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/quran?apikey=Api-team`)                    get_result = get_result.result                    ini_txt = 'List Surah:\n'                    for (var x in get_result) {                        ini_txt += `${x}. ${get_result[x]}\n`                    }                    reply(ini_txt)                    break                case 'alquran':                    if (args.length < 1) return reply(`Example: ${prefix + command} 18 or ${prefix + command} 18/10 or ${prefix + command} 18/1-10`)                    urls = `http://api.lolhuman.xyz/api/quran/${args[0]}?apikey=Api-team`                    quran = await fetchJson(urls)                    result = quran.result                    ayat = result.ayat                    ini_txt = `QS. ${result.surah} : 1-${ayat.length}\n\n`                    for (var x of ayat) {                        arab = x.arab                        nomor = x.ayat                        latin = x.latin                        indo = x.indonesia                        ini_txt += `${arab}\n${nomor}. ${latin}\n${indo}\n\n`                    }                    ini_txt = ini_txt.replace(/<u>/g, "").replace(/<\/u>/g, "")                    ini_txt = ini_txt.replace(/<strong>/g, "").replace(/<\/strong>/g, "")                    ini_txt = ini_txt.replace(/<u>/g, "").replace(/<\/u>/g, "")                    reply(ini_txt)                    break                case 'alquranaudio':                    if (args.length == 0) return reply(`Example: ${prefix + command} 18 or ${prefix + command} 18/10`)                    surah = args[0]                    ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/quran/audio/${surah}?apikey=Api-team`)                    baby.sendMessage(from, ini_buffer, audio, { quoted: mek, mimetype: Mimetype.mp4Audio })                    break                case 'asmaulhusna':                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/asmaulhusna?apikey=Api-team`)                    get_result = get_result.result                    ini_txt = `No : ${get_result.index}\n`                    ini_txt += `Latin: ${get_result.latin}\n`                    ini_txt += `Arab : ${get_result.ar}\n`                    ini_txt += `Indonesia : ${get_result.id}\n`                    ini_txt += `English : ${get_result.en}`                    reply(ini_txt)                    break                case 'kisahnabi':                    if (args.length == 0) return reply(`Example: ${prefix + command} Muhammad`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/kisahnabi/${query}?apikey=Api-team`)                    get_result = get_result.result                    ini_txt = `Name : ${get_result.name}\n`                    ini_txt += `Lahir : ${get_result.thn_kelahiran}\n`                    ini_txt += `Umur : ${get_result.age}\n`                    ini_txt += `Tempat : ${get_result.place}\n`                    ini_txt += `Story : \n${get_result.story}`                    reply(ini_txt)                    break                case 'jadwalsholat':                    if (args.length == 0) return reply(`Example: ${prefix + command} Yogyakarta`)                    daerah = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/sholat/${daerah}?apikey=Api-team`)                    get_result = get_result.result                    ini_txt = `Wilayah : ${get_result.wilayah}\n`                    ini_txt += `Tanggal : ${get_result.tanggal}\n`                    ini_txt += `Sahur : ${get_result.sahur}\n`                    ini_txt += `Imsak : ${get_result.imsak}\n`                    ini_txt += `Subuh : ${get_result.subuh}\n`                    ini_txt += `Terbit : ${get_result.terbit}\n`                    ini_txt += `Dhuha : ${get_result.dhuha}\n`                    ini_txt += `Dzuhur : ${get_result.dzuhur}\n`                    ini_txt += `Ashar : ${get_result.ashar}\n`                    ini_txt += `Maghrib : ${get_result.imsak}\n`                    ini_txt += `Isya : ${get_result.isya}`                    reply(ini_txt)                    breakcase 'googleimage':				   baby.updatePresence(from, Presence.composing)  				//UPDATE MRG{108P}                                        if (isLimit(sender)) return reply(ind.limitend(pusname))				   if (args.length < 1) return reply('Apa yang mau dicari kak?')					goo = body.slice(7)					anu = await fetchJson(`https://api.vhtear.com/googleimg?query=${goo}&apikey=BeliApikeyngab`, {method: 'get'})					reply(`Harap Sabar Jangan Spam,Jika Ketahuan Spam Banned Balasannya`)				    var pol = JSON.parse(JSON.stringify(anu.result.result_search));                    var tes2 =  pol[Math.floor(Math.random() * pol.length)];					pint = await getBuffer(tes2)					baby.sendMessage(from, pint, image, {caption: '*Pencarian : '+goo+'*', quoted: mek })					await limitAdd(sender)					breakcase 'neontext':         if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())        if (args.length < 1) return reply(`Contoh : ${prefix}neontext Bot Rem`)          neon = body.slice(10)         reply('Sabar ya gan....')         anu = await getBuffer(`https://api.xteam.xyz/textpro/neon?text=${neon}&APIKEY=KINGLEO07`)         baby.sendMessage(from, anu, image, {quoted: mek})            break					case 'konachan':                    if (args.length == 0) return reply(`Example: ${prefix + command} azur_lane`)                    query = args.join(" ")                    ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/konachan?apikey=Api-team&query=${query}`)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek })                    break                case 'wallpapersearch':                    if (args.length == 0) return reply(`Example: ${prefix + command} loli kawaii`)                    query = args.join(" ")                    ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/wallpaper?apikey=Api-team&query=${query}`)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek })                    break                case 'wallpapersearch2':                    if (args.length == 0) return reply(`Example: ${prefix + command} loli kawaii`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/wallpaper2?apikey=Api-team&query=${query}`)                    ini_buffer = await getBuffer(get_result.result)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek })                    break           case 'seberapagay':           if (isBanned) return reply(ind.baned())           //UPDATE MRG{108P}           if (isLimit(sender)) return reply(ind.limitend(pusname))					gay = body.slice(13)		   anu = await fetchJson(`https://arugaz.herokuapp.com/api/howgay`, {method: 'get'})		   hasil = `Nih Liat Data Gay Si ${gay}\n\n\nPersentase Gay : ${anu.persen}%\nAlert!!! : ${anu.desc}`		   reply(hasil)		   await limitAdd(sender)					break	                case 'truth':                if (isBanned) return reply(ind.baned())                //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					const trut =['Pernah suka sama siapa aja? berapa lama?','Kalau boleh atau kalau mau, di gc/luar gc siapa yang akan kamu jadikan sahabat?(boleh beda/sma jenis)','apa ketakutan terbesar kamu?','pernah suka sama orang dan merasa orang itu suka sama kamu juga?','Siapa nama mantan pacar teman mu yang pernah kamu sukai diam diam?','pernah gak nyuri uang nyokap atau bokap? Alesanya?','hal yang bikin seneng pas lu lagi sedih apa','pernah cinta bertepuk sebelah tangan? kalo pernah sama siapa? rasanya gimana brou?','pernah jadi selingkuhan orang?','hal yang paling ditakutin','siapa orang yang paling berpengaruh kepada kehidupanmu','hal membanggakan apa yang kamu dapatkan di tahun ini','siapa orang yang bisa membuatmu sange','siapa orang yang pernah buatmu sange','(bgi yg muslim) pernah ga solat seharian?','Siapa yang paling mendekati tipe pasangan idealmu di sini','suka mabar(main bareng)sama siapa?','pernah nolak orang? alasannya kenapa?','Sebutkan kejadian yang bikin kamu sakit hati yang masih di inget','pencapaian yang udah didapet apa aja ditahun ini?','kebiasaan terburuk lo pas di sekolah apa?']					const ttrth = trut[Math.floor(Math.random() * trut.length)]					truteh = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)					baby.sendMessage(from, truteh, image, { caption: '*Truth*\n\n'+ ttrth, quoted: mek })					break                case 'dare':                if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))                					const dare =['Kirim pesan ke mantan kamu dan bilang "aku masih suka sama kamu','telfon crush/pacar sekarang dan ss ke pemain','pap ke salah satu anggota grup','Bilang "KAMU CANTIK BANGET NGGAK BOHONG" ke cowo','ss recent call whatsapp','drop emot 🤥 setiap ngetik di gc/pc selama 1 hari','kirim voice note bilang can i call u baby?','drop kutipan lagu/quote, terus tag member yang cocok buat kutipan itu','pake foto sule sampe 3 hari','ketik pake bahasa daerah 24 jam','ganti nama menjadi "gue anak lucinta luna" selama 5 jam','chat ke kontak wa urutan sesuai %batre kamu, terus bilang ke dia "i lucky to hv you','prank chat mantan dan bilang " i love u, pgn balikan','record voice baca surah al-kautsar','bilang "i hv crush on you, mau jadi pacarku gak?" ke lawan jenis yang terakhir bgt kamu chat (serah di wa/tele), tunggu dia bales, kalo udah ss drop ke sini','sebutkan tipe pacar mu!','snap/post foto pacar/crush','teriak gajelas lalu kirim pake vn kesini','pap mukamu lalu kirim ke salah satu temanmu','kirim fotomu dengan caption, aku anak pungut','teriak pake kata kasar sambil vn trus kirim kesini','teriak " anjimm gabutt anjimmm " di depan rumah mu','ganti nama jadi " BOWO " selama 24 jam','Pura pura kerasukan, contoh : kerasukan maung, kerasukan belalang, kerasukan kulkas, dll']					const der = dare[Math.floor(Math.random() * dare.length)]					tod = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)					baby.sendMessage(from, tod, image, { quoted: mek, caption: '*Dare*\n\n'+ der })					break                  case 'timer':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))                  				if (args[1]=="detik") {var timer = args[0]+"000"				} else if (args[1]=="menit") {var timer = args[0]+"0000"				} else if (args[1]=="jam") {var timer = args[0]+"00000"				} else {return reply("*pilih:*\ndetik\nmenit\njam")}				setTimeout( () => {				reply("Waktu habis")				}, timer)				break						   /*]=====> MENU GRUP <=====[*/		 				case 'welcome':                  if (isBanned) return reply(ind.baned())									if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (args.length < 1) return reply('Ekhemm >_<')					if (Number(args[0]) === 1) {						if (isWelkom) return reply('*FITUR WELCOME SUDAH AKTIF KAK*')						welkom.push(from)						         						fs.writeFileSync('./database/group/welkom.json', JSON.stringify(welkom))						reply('*「SUKSES」 MENGAKTIFKAN FITUR WELCOME DI GROUP*')					} else if (Number(args[0]) === 0) {						welkom.splice(from, 1)						fs.writeFileSync('./database/group/welkom.json', JSON.stringify(welkom))						reply('*「SUKSES」 MEMATIKAN FITUR WELCOME DI GROUP*')					} else {						reply(ind.satukos())					}					breakcase 'blackpink':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())pink = body.slice(11)reply('Sabar ya gan....')anu = await fetchJson(`https://api.shizukaa.xyz/api/blackpink?apikey=itsmeiky633`, {method: 'get'})					buffer = await getBuffer(anu.result)					baby.sendMessage(from, buffer, image, {quoted: mek })					await limitAdd(sender) 					break				                 case 'event':                  if (isBanned) return reply(ind.baned())                 					if (!isGroup) return reply(ind.groupo())					if (!isOwner) return reply(ind.ownerb())					if (args.length < 1) return reply('Ekhemm >_<')					if (Number(args[0]) === 1) {						if (isEventon) return reply('*FITUR EVENT SUDAH AKTIF BOS*')						event.push(from)						fs.writeFileSync('./database/group/event.json', JSON.stringify(event))						reply('*「SUKSES」 MENGAKTIFKAN EVENT DI GROUP*')					} else if (Number(args[0]) === 0) {						event.splice(from, 1)						fs.writeFileSync('./database/group/event.json', JSON.stringify(event))						reply('*「SUKSES」 MEMATIKAN EVENT DI GROUP*')					} else {						reply(ind.satukos())					}					break                case 'leveling':                if (!isGroup) return reply(ind.groupo())                if (!isGroupAdmins) return reply(ind.admin())                if (args.length < 1) return reply('Boo :ЁЭШГ')                if (args[0] === 'enable') {                    if (isLevelingOn) return reply('*fitur level sudah aktif sebelum nya*')                    _leveling.push(from)                    fs.writeFileSync('./database/group/leveling.json', JSON.stringify(_leveling))                     reply(ind.lvlon())                } else if (args[0] === 'disable') {                    _leveling.splice(from, 1)                    fs.writeFileSync('./database/group/leveling.json', JSON.stringify(_leveling))                     reply(ind.lvloff())                } else {                    reply(ind.satukos())                }					break				case 'simih':                  case 'simih':					if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (args.length < 1) return reply('Boo :𝘃')					if (Number(args[0]) === 1) {						if (isSimi) return reply('𝘀𝘂𝗱𝗮𝗵 𝗮𝗸𝘁𝗶𝗳 !!!')						samih.push(from)						fs.writeFileSync('./database/bot/simi.json', JSON.stringify(samih))						reply('❬ 𝗦𝗨𝗞𝗦𝗘𝗦 ❭ 𝗠𝗲𝗻𝗴𝗮??𝘁𝗶𝗳𝗸𝗮𝗻 𝗳𝗶𝘁𝘂𝗿 𝘀𝗶𝗺𝗶 𝗱𝗶 𝗴𝗿𝗼𝘂𝗽 𝗶𝗻𝗶️')					} else if (Number(args[0]) === 0) {						samih.splice(from, 1)						fs.writeFileSync('./database/bot/simi.json', JSON.stringify(samih))						reply('❬ 𝗦𝗨𝗞𝗦𝗘𝗦 ❭ 𝗠𝗲𝗻𝗼𝗻𝗮𝗸𝘁𝗶𝗳𝗸𝗮𝗻 𝗳𝗶𝘁𝘂𝗿 𝘀𝗶𝗺𝗶 𝗱𝗶 𝗴𝗿𝗼𝘂𝗽 𝗶𝗻𝗶️️')					} else {						reply(ind.satukos())					}					break				case 'nsfw':                  if (isBanned) return reply(ind.baned())									if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (args.length < 1) return reply('Ekhem >_<')					if (Number(args[0]) === 1) {						if (isNsfw) return reply(' *sudah aktif*  !!')						nsfw.push(from)						fs.writeFileSync('./database/group/nsfw.json', JSON.stringify(nsfw))						reply('*「SUKSES」 MENGAKTIFKAN FITUR NSFW DI GROUP*')					} else if (Number(args[0]) === 0) {						nsfw.splice(from, 1)						fs.writeFileSync('./database/group/nsfw.json', JSON.stringify(nsfw))						reply('*「SUKSES」 MEMATIKAN FITUR NSWF DI GROUP*')					} else {						reply(ind.satukos())					}					breakcase 'antidelete':				const dataRevoke = JSON.parse(fs.readFileSync('./src/gc-revoked.json'))				const dataCtRevoke = JSON.parse(fs.readFileSync('./src/ct-revoked.json'))				const dataBanCtRevoke = JSON.parse(fs.readFileSync('./src/ct-revoked-banlist.json'))				const isRevoke = dataRevoke.includes(from)				const isCtRevoke = dataCtRevoke.data				const isBanCtRevoke = dataBanCtRevoke.includes(sender) ? true : false				const argz = body.split(' ')				if (argz.length === 1) return vanz.sendMessage(from, `Penggunaan fitur antidelete :\n\n*${prefix}antidelete [aktif/mati]* (Untuk grup)\n*${prefix}antidelete [ctaktif/ctmati]* (untuk semua kontak)\n*${prefix}antidelete banct 628558xxxxxxx* (banlist kontak)`, MessageType.text)				if (argz[1] == 'aktif') {					if (isGroup) {						if (isRevoke) return vanz.sendMessage(from, `Antidelete telah diaktifkan di grup ini sebelumnya!`, MessageType.text)						dataRevoke.push(from)						fs.writeFileSync('./src/gc-revoked.json', JSON.stringify(dataRevoke, null, 2))						baby.sendMessage(from, `*Succes Enable Antidelete Grup!*`, MessageType.text)					} else if (!isGroup) {						baby.sendMessage(from, `Untuk kontak penggunaan *${prefix}antidelete ctaktif*`, MessageType.text)					}				} else if (argz[1] == 'ctaktif') {					if (!isGroup) {						if (isCtRevoke) return vanz.sendMessage(from, `Antidelete telah diaktifkan di semua kontak sebelumnya!`, MessageType.text)						dataCtRevoke.data = true						fs.writeFileSync('./src/ct-revoked.json', JSON.stringify(dataCtRevoke, null, 2))						baby.sendMessage(from, `Antidelete diaktifkan disemua kontak!`, MessageType.text)					} else if (isGroup) {						baby.sendMessage(from, `Untuk grup penggunaan *${prefix}antidelete aktif*`, MessageType.text)					}				} else if (argz[1] == 'banct') {					if (isBanCtRevoke) return vanz.sendMessage(from, `kontak ini telah ada di database banlist!`, MessageType.text)					if (argz.length === 2 || argz[2].startsWith('0')) return vanz.sendMessage(from, `Masukan nomer diawali dengan 62! contoh 62859289xxxxx`, MessageType.text)					dataBanCtRevoke.push(argz[2] + '@s.whatsapp.net')					fs.writeFileSync('./src/ct-revoked-banlist.json', JSON.stringify(dataBanCtRevoke, null, 2))					baby.sendMessage(from, `Kontak ${argz[2]} telah dimasukan ke banlist antidelete secara permanen!`, MessageType.text)				} else if (argz[1] == 'mati') {					if (isGroup) {						const index = dataRevoke.indexOf(from)						dataRevoke.splice(index, 1)						fs.writeFileSync('./src/gc-revoked.json', JSON.stringify(dataRevoke, null, 2))						baby.sendMessage(from, `*Succes disable Antidelete Grup!*`, MessageType.text)					} else if (!isGroup) {						baby.sendMessage(from, `Untuk kontak penggunaan *${prefix}antidelete ctmati*`, MessageType.text)					}				} else if (argz[1] == 'ctmati') {					if (!isGroup) {						dataCtRevoke.data = false						fs.writeFileSync('./src/ct-revoked.json', JSON.stringify(dataCtRevoke, null, 2))						baby.sendMessage(from, `Antidelete dimatikan disemua kontak!`, MessageType.text)					} else if (isGroup) {						baby.sendMessage(from, `Untuk grup penggunaan *${prefix}antidelete mati*`, MessageType.text)					}				}				break                                case 'antilinkgrup':                  if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (!isBotGroupAdmins) return reply(ind.badmin())										if (args.length < 1) return reply('Boo :𝘃')					if (Number(args[0]) === 1) {						if (isEventon) return reply('*SUDAH AKTIF* !!!')						antilink.push(from)						fs.writeFileSync('./database/group/antilink.json', JSON.stringify(antilink))						reply('*❬ 𝗦𝗨𝗞𝗦𝗘𝗦 ❭ ACTIVATED ANTILINK*')					} else if (Number(args[0]) === 0) {						antilink.splice(from, 1)						fs.writeFileSync('./database/group/antilink.json', JSON.stringify(antilink))						reply('*❬ 𝗦𝗨𝗞𝗦𝗘𝗦 ❭ DEACTIVATED ANTILINK*')					} else {						reply(ind.satukos())					}					break											case 'admin':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))									if (!isGroup) return reply(ind.groupo())					teks = `*DAFTAR ATASAN GROUP* _${groupMetadata.subject}_\n*TOTAL* : ${groupAdmins.length}\n\n`					no = 0					for (let admon of groupAdmins) {						no += 1						teks += `[${no.toString()}] @${admon.split('@')[0]}\n`					}					mentions(teks, groupAdmins, true)					break					case 'grup':					case 'group':                  if (isBanned) return reply(ind.baned())										if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (!isBotGroupAdmins) return reply(ind.badmin())					if (args[0] === 'buka') {					    reply(`*BERHASIL MEMBUKA GROUP*`)						baby.groupSettingChange(from, GroupSettingChange.messageSend, false)					} else if (args[0] === 'tutup') {						reply(`*BERHASIL MENUTUP GROUP*`)						baby.groupSettingChange(from, GroupSettingChange.messageSend, true)					}					break				case 'add':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))									if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (!isBotGroupAdmins) return reply(ind.badmin())					if (args.length < 1) return reply('Yang mau di add siapa?')					if (args[0].startsWith('08')) return reply('Gunakan kode bahasa kak')					try {						num = `${args[0].replace(/ /g, '')}@s.whatsapp.net`						baby.groupAdd(from, [num])					} catch (e) {						console.log('Error :', e)						reply('Anjim yang mau di add di private, dahlah :)')					}					break			     	case 'kick':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))			     						if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (!isBotGroupAdmins) return reply(ind.badmin())					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('𝗧𝗮𝗴 𝘁𝗮𝗿𝗴𝗲𝘁 ??𝗮𝗻𝗴 𝗶𝗻𝗴𝗶𝗻 𝗱𝗶 𝘁𝗲𝗻𝗱𝗮𝗻𝗴!')					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid					if (mentioned.length > 1) {						teks = ''						for (let _ of mentioned) {							teks += `Bismillah atas izin admin grup kamu akan saya tendang 🏃 :\n`							teks += `@_.split('@')[0]`						}						mentions(teks, mentioned, true)						baby.groupRemove(from, mentioned)					} else {						mentions(`Bismillah atas izin admin grup kamu akan saya tendang @${mentioned[0].split('@')[0]} 🏃`, mentioned, true)						baby.groupRemove(from, mentioned)					}					break                case 'hidetag':                  if (isBanned) return reply(ind.baned())                                //UPDATE MRG{108P}                if (isLimit(sender)) return reply(ind.limitend(pusname))					if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					var value = body.slice(9)					var group = await baby.groupMetadata(from)					var member = group['participants']					var mem = []					member.map( async adm => {					mem.push(adm.id.replace('c.us', 's.whatsapp.net'))					})					var options = {					text: value,					contextInfo: { mentionedJid: mem },					quoted: mek					}					baby.sendMessage(from, options, text)					await limitAdd(sender)					break					                case 'level':                  if (isBanned) return reply(ind.baned())                                //UPDATE MRG{108P}                if (!isLevelingOn) return reply(ind.lvlnoon())                if (!isGroup) return reply(ind.groupo())                const userLevel = getLevelingLevel(sender)                const userXp = getLevelingXp(sender)                if (userLevel === undefined && userXp === undefined) return reply(ind.lvlnul())                const requiredXp = 5000 * (Math.pow(2, userLevel) - 1)                resul = `┏━━━━━━♡ *LEVEL* ♡━━━━━━━┓\n┃╭───────────────────\n┃│➸ NAMA : ${pushname}\n┃│➸ NOMOR : wa.me/${sender.split("@")[0]}\n┃│➸ XP : ${userXp}/${requiredXp}\n┃│➸ LEVEL : ${userLevel}\n┃╰───────────────────\n┗━━━━━━━━━━━━━━━━━━━━┛`               baby.sendMessage(from, resul, text, { quoted: mek})                .catch(async (err) => {                        console.error(err)                        await reply(`Error!\n${err}`)                    })					break                 case 'linkgrup':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))                				    if (!isGroup) return reply(ind.groupo())				    if (isLimit(sender)) return reply(ind.limitend(pusname))				    if (!isBotGroupAdmins) return reply(ind.badmin())				    linkgc = await baby.groupInviteCode (from)				    yeh = `https://chat.whatsapp.com/${linkgc}\n\nlink Group *${groupName}*`				    baby.sendMessage(from, yeh, text, {quoted: mek})			        await limitAdd(sender)					break				case 'tagall':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))							if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					members_id = []					teks = (args.length > 1) ? body.slice(8).trim() : ''					teks += '\n\n'					for (let mem of groupMembers) {						teks += `➸ @${mem.jid.split('@')[0]}\n`						members_id.push(mem.jid)					}					mentions(teks, members_id, true)					break           case 'setname':                //UPDATE MRG{108P}                           if (!isGroup) return reply(ind.groupo())			    if (!isGroupAdmins) return reply(ind.admin())				if (!isBotGroupAdmins) return reply(ind.badmin())                baby.groupUpdateSubject(from, `${body.slice(9)}`)                baby.sendMessage(from, '⟪ SUKSES ⟫ Mengubah Nama Grup', text, {quoted: mek})					break                case 'setdesc':                //UPDATE MRG{108P}                                if (!isGroup) return reply(ind.groupo())			    if (!isGroupAdmins) return reply(ind.admin())				if (!isBotGroupAdmins) return reply(ind.badmin())                baby.groupUpdateDescription(from, `${body.slice(9)}`)                baby.sendMessage(from, '⟪ SUKSES ⟫ Mengubah Desk Grup', text, {quoted: mek})					break           case 'demote':                //UPDATE MRG{108P}           					if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (!isBotGroupAdmins) return reply(ind.badmin())					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('𝗧𝗮𝗴 𝘁𝗮𝗿𝗴𝗲𝘁 𝘆𝗮𝗻𝗴 𝗶𝗻𝗴𝗶𝗻 𝗱𝗶 𝘁𝗲𝗻𝗱𝗮𝗻𝗴!')					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid					if (mentioned.length > 1) {						teks = ''						for (let _ of mentioned) {							teks += `*jabatan kamu di copot*🏃 :\n`							teks += `@_.split('@')[0]`						}						mentions(teks, mentioned, true)						baby.groupDemoteAdmin(from, mentioned)					} else {						mentions(`Yahh @${mentioned[0].split('@')[0]} Jabatan kamu sebagai leluhur di grup telah di copot🏃`, mentioned, true)						baby.groupDemoteAdmin(from, mentioned)					}					break				case 'promote':                //UPDATE MRG{108P}									if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (!isBotGroupAdmins) return reply(ind.badmin())					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('𝗧𝗮𝗴 ??𝗮??𝗴𝗲𝘁 𝘆𝗮𝗻𝗴 𝗶𝗻𝗴𝗶𝗻 𝗱𝗶 𝘁𝗲𝗻𝗱𝗮𝗻𝗴!')					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid					if (mentioned.length > 1) {						teks = ''						for (let _ of mentioned) {							teks += `Yeee🥳 Kamu naik jabatan >_< :\n`							teks += `@_.split('@')[0]`						}						mentions(teks, mentioned, true)						baby.groupMakeAdmin(from, mentioned)					} else {						mentions(`Selamat🥳 @${mentioned[0].split('@')[0]} *anda naik menjadi admin group* >_<`, mentioned, true)						baby.groupMakeAdmin(from, mentioned)					}					break				case 'hedsot':                //UPDATE MRG{108P}									if (!isGroup) return reply(ind.groupo())					if (!isGroupAdmins) return reply(ind.admin())					if (!isBotGroupAdmins) return reply(ind.badmin())					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Tag target yang ingin di tendang!')					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid					if (mentioned.length > 1) {						teks = 'Bismillah Hedsot >_< :\n'						for (let _ of mentioned) {							teks += `@${_.split('@')[0]}\n`						}						mentions(teks, mentioned, true)						baby.groupRemove(from, mentioned)						mentions(teks, mentioned, true)						baby.groupAdd(from, [num])					} else {						mentions(`Berhasil Meng hedsot pala nya  : @${mentioned[0].split('@')[0]}`, mentioned, true)						baby.groupRemove(from, mentioned)						}					break                 case 'fitnah':						if (args.length < 1) return reply(`Usage :\n${prefix}fitnah [@tag/pesan/balasanbot]]\n\nEx : \n${prefix}fitnah @tagmember/hai/hai juga`)				var gh = body.slice(8)				mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid					var replace = gh.split("/")[0];					var target = gh.split("/")[1];					var bot = gh.split("/")[2];					baby.sendMessage(from, `${bot}`, text, {quoted: { mek: { fromMe: false, participant: `${mentioned}`, ...(from ? { remoteJid: from } : {}) }, message: { conversation: `${target}` }}})					break                      case 'leave':                      if (isBanned) return reply(ind.baned())                            //UPDATE MRG{108P}                                 if (!isGroup) return reply(ind.groupo())                      if (!isGroupAdmins) return reply(ind.admin())                      setTimeout( () => {                      baby.groupLeave (from)                       }, 2000)                      setTimeout( () => {                      baby.updatePresence(from, Presence.composing)                       //UPDATE MRG{108P}                      if (isBanned) return reply(ind.baned())                         baby.sendMessage(from, 'Aku pamit kak:)', text)                      }, 0)                      break			                  case 'text3d':                //UPDATE MRG{108P}                if (isLimit(sender)) return reply(ind.limitend(pusname))              	    if (args.length < 1) return reply('teksnya mana Tod?')                    teks = `${body.slice(8)}`                    if (teks.length > 10) return baby.sendMessage(from, 'Teksnya kepanjangan Bambank', text, {quoted: mek})                    buff = await getBuffer(`https://docs-jojo.herokuapp.com/api/text3d?text=${teks}`, {method: 'get'})                    baby.sendMessage(from, buff, image, {quoted: mek, caption: `${teks}`})			     	await limitAdd(sender)					break						/*]=====> DOWNLOAD MENU <=====[*/                     case 'play':                    //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))								reply(ind.wait())                anu = await fetchJson(`https://api.vhtear.com/ytmp3?query=${body.slice(6)}&apikey=BeliApikeyngab`)               if (anu.error) return reply(anu.error)                 infomp3 = `*Lagu Ditemukan*\n Judul : ${anu.result.title}\n Durasi : ${anu.result.duration}\n Size : ${anu.result.size}\n\n*[WAIT] Proses Dumlu Yakan*`                buffer = await getBuffer(anu.result.image)                lagu = await getBuffer(anu.result.mp3)                baby.sendMessage(from, buffer, image, {quoted: mek, caption: infomp3})                baby.sendMessage(from, lagu, audio, {mimetype: 'audio/mp4', quoted: mek})                breakcase 'fbdl':                    ini_url = args[0]                    ini_url = await fetchJson(`http://api.lolhuman.xyz/api/facebook?apikey=Api-team&url=${ini_url}`)                    ini_url = ini_url.result[0].link                    buffer = await getBuffer(ini_url)                    baby.sendMessage(from, buffer, video, { quoted: mek })                    break                case 'ytmp3':                    if (args.length == 0) return reply(`Example: ${prefix + command} https://www.youtube.com/watch?v=qZIQAk-BUEc`)                    ini_link = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/ytaudio?apikey=Api-team&url=${ini_link}`)                    get_result = get_result.result                    ini_txt = `Title : ${get_result.title}\n`                    ini_txt += `Uploader : ${get_result.uploader}\n`                    ini_txt += `Duration : ${get_result.duration}\n`                    ini_txt += `View : ${get_result.view}\n`                    ini_txt += `Like : ${get_result.like}\n`                    ini_txt += `Dislike : ${get_result.dislike}\n`                    ini_txt += `Description :\n ${get_result.description}`                    ini_buffer = await getBuffer(get_result.thumbnail)                   baby.sendMessage(from, ini_buffer, image, { quoted: mek, caption: ini_txt })                    get_audio = await getBuffer(get_result.link[3].link)                    baby.sendMessage(from, get_audio, audio, { mimetype: 'audio/mp4', filename: `${get_result.title}.mp3`, quoted: mek })                    break				case 'ytmp32':                    if (args.length == 0) return reply(`Example: ${prefix + command} https://www.youtube.com/watch?v=qZIQAk-BUEc`)                    ini_link = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/ytaudio2?apikey=Api-team&url=${ini_link}`)                    get_result = get_result.result                    ini_txt = `${get_result.title} - ${get_result.size}`                    ini_buffer = await getBuffer(get_result.thumbnail)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek, caption: ini_txt })                    get_audio = await getBuffer(get_result.link)                    baby.sendMessage(from, get_audio, audio, { mimetype: 'audio/mp4', filename: `${get_result.title}.mp3`, quoted: mek })                    break                   case 'ytmp4':                case 'ytmp4':                  if (!isPrem) return reply(ind.premium())                    ini_link = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/ytvideo?apikey=Api-team&url=${ini_link}`)                    get_result = get_result.result                    txt = `Title : ${get_result.title}\n`                    txt += `Uploader : ${get_result.uploader}\n`                    txt += `Duration : ${get_result.duration}\n`                    txt += `View : ${get_result.view}\n`                    txt += `Like : ${get_result.like}\n`                    txt += `Dislike : ${get_result.dislike}\n`                    txt += `Description :\n ${get_result.description}`                    buffer = await getBuffer(get_result.thumbnail)                    baby.sendMessage(from, buffer, image, { quoted: mek, caption: txt })                    get_audio = await getBuffer(get_result.link[0].link)                    baby.sendMessage(from, get_audio, video, { mimetype: 'video/mp4', filename: `${get_result.title}.mp4`, quoted: mek })                    break case 'tomp3':                //UPDATE MRG{108P}		if (isLimit(sender)) return reply(ind.limitend(pushname))                	baby.updatePresence(from, Presence.composing) 					if (!isQuotedVideo) return reply('_*Reply Video nya Gan!*_')					reply(ind.wait)					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await baby.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.mp4')					exec(`ffmpeg -i ${media} ${ran}`, (err) => {						fs.unlinkSync(media)						if (err) return reply('Gagal, pada saat mengkonversi video ke mp3')						bufferlkj = fs.readFileSync(ran)						baby.sendMessage(from, bufferlkj, audio, {mimetype: 'audio/mp4', quoted: mek})						fs.unlinkSync(ran)					})					await limitAdd(sender) 					break case 'ytplay':                    if (args.length == 0) return reply(`Example: ${prefix + command} Melukis Senja`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/ytplay?apikey=Api-team&query=${query}`)                    get_result = get_result.result                    get_info = get_result.info                    ini_txt = `Title : ${get_info.title}\n`                    ini_txt += `Uploader : ${get_info.uploader}\n`                    ini_txt += `Duration : ${get_info.duration}\n`                    ini_txt += `View : ${get_info.view}\n`                    ini_txt += `Like : ${get_info.like}\n`                    ini_txt += `Dislike : ${get_info.dislike}\n`                    ini_txt += `Description :\n ${get_info.description}\n`                    ini_buffer = await getBuffer(get_info.thumbnail)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek, caption: ini_txt })                    get_audio = await getBuffer(get_result.audio[3].link)                    baby.sendMessage(from, get_audio, audio, { mimetype: 'audio/mp4', filename: `${get_info.title}.mp3`, quoted: mek })                    get_video = await getBuffer(get_result.video[0].link)                    baby.sendMessage(from, get_video, video, { mimetype: 'video/mp4', filename: `${get_info.title}.mp4`, quoted: mek })                    break                case 'ytplay2':                    if (args.length == 0) return reply(`Example: ${prefix + command} Melukis Senja`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/ytplay2?apikey=Api-team&query=${query}`)                    get_result = get_result.result                    ini_buffer = await getBuffer(get_result.thumbnail)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek, caption: get_result.title })                    get_audio = await getBuffer(get_result.audio)                    baby.sendMessage(from, get_audio, audio, { mimetype: Mimetype.mp4Audio, filename: `${get_result.title}.mp3`, quoted: mek })                    get_video = await getBuffer(get_result.video)                    baby.sendMessage(from, get_video, video, { mimetype: Mimetype.mp4, filename: `${get_result.title}.mp4`, quoted: mek })                    break					case 'play2':     if (isBanned) return reply(nad.baned())	 //UPDATE MRG{108P}	 	 reply(ind.wait()) anu = await fetchJson(`https://api.vhtear.com/ytmp3?query=${body.slice(6)}&apikey=BeliApikeyngab`)               if (anu.error) return reply(anu.error)                 infomp3 = `*уАМтЭЧуАНLagu Ditemukan*\nтЮ╕ Judul : ${anu.result.title}\nтЮ╕ Durasi : ${anu.result.duration}\nтЮ╕ Size : ${anu.result.size}\n\n*[WAIT] Proses Dumlu Yakan*`                buffer = await getBuffer(anu.result.image)                lagu = await getBuffer(anu.result.mp3)                baby.sendMessage(from, buffer, image, {quoted: mek, caption: infomp3})                baby.sendMessage(from, lagu, audio, {mimetype: 'audio/mp4', quoted: mek})                breakbreakcase 'igvideo': // Update By MrG{108P}* ItsmeikyXSec404 & RzkyO				                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply('Urlnya mana tong?')				if (!isUrl(args[0]) && !args[0].includes('www.instagram.com')) return reply(mess.error.lv)					 ige = body.slice(9)                     anu = await fetchJson(`http://lolhuman.herokuapp.com/api/instagram?apikey=Api-team&url=${args[0]}`, {method: 'get'})					if (anu.error) return reply(anu.error)					buffer = await getBuffer(anu.result)                    baby.sendMessage(from, buffer, video, )				    break                /*]=====> LIMIT MENU <=====[*/				case 'limit':				                  if (isBanned) return reply(ind.baned())				   //UPDATE MRG{108P}				   checkLimit(sender)					break				case 'transfer':                  if (isBanned) return reply(ind.baned())								//UPDATE MRG{108P}				if (!q.includes('|')) return  reply(ind.wrongf())                const tujuan = q.substring(0, q.indexOf('|') - 1)                const jumblah = q.substring(q.lastIndexOf('|') + 1)                if (checkATMuser(sender) < jumblah) return reply(`uang mu tidak mencukupi untuk melakukan transfer`)                const tujuantf = `${tujuan.replace("@", '')}@s.whatsapp.net`                fee = 0.005 *  jumblah                hasiltf = jumblah - fee                addKoinUser(tujuantf, hasiltf)                confirmATM(sender, jumblah)                addKoinUser('6285559240360@s.whatsapp.net', fee)                reply(`*⟪ SUKSES ⟫*\n\npengiriman uang berhasil\n➸ dari : +${sender.split("@")[0]}\n➸ ke : +${tujuan}\n➸ jumlah transfer : ${jumblah}\n➸ pajak : ${fee}`)                break				case 'atm':                  if (isBanned) return reply(ind.baned())								//UPDATE MRG{108P}				const kantong = checkATMuser(sender)				reply(ind.uangkau(pushname, sender, kantong))				break				case 'buylimit':                  if (isBanned) return reply(ind.baned())								//UPDATE MRG{108P}				payout = body.slice(10)				const koinPerlimit = 1000				const total = koinPerlimit * payout				if ( checkATMuser(sender) <= total) return reply(`maaf kak uang nya gak cukup, kumpulin uang nya dumlu >_< jangan open bo kak:v`)				if ( checkATMuser(sender) >= total ) {					confirmATM(sender, total)					bayarLimit(sender, payout)					await reply(`*⟪ PEMBAYARAN BERHASIL ⟫*\n\n➸ pengirim : ElainaBot\n➸ penerima : ${pushname}\n➸ nominal pembelian : ${payout} \n➸ harga limit : ${koinPerlimit}/limit\n➸ sisa uang : ${checkATMuser(sender)}\n\nproses berhasil dengan SN\n${createSerial(15)}`)				} 				break/*]=====> RANDOM MENU <=====[*/                case 'pokemon':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))                   if (!isGroup) return reply(ind.groupo())                   if (!isNsfw) return reply(ind.nsfwoff())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=pokemon`, {method: 'get'})					reply(ind.wait())					var n = JSON.parse(JSON.stringify(anu));					var nimek =  n[Math.floor(Math.random() * n.length)];					pok = await getBuffer(nimek)					baby.sendMessage(from, pok, image, { quoted: mek })					await limitAdd(sender)					break                case 'anjing':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))                   if (!isGroup) return reply(ind.groupo())                   if (!isNsfw) return reply(ind.nsfwoff())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anjing`, {method: 'get'})					reply(ind.wait())					var n = JSON.parse(JSON.stringify(anu));					var nimek =  n[Math.floor(Math.random() * n.length)];					pok = await getBuffer(nimek)					baby.sendMessage(from, pok, image, { quoted: mek })					await limitAdd(sender)					break					case 'neko':                //UPDATE MRG{108P}                if (isLimit(sender)) return reply(ind.limitend(pusname))						res = await fetchJson(`https://tobz-api.herokuapp.com/api/nekonime?apikey=${TobzKey}`, {method: 'get'})						buffer = await getBuffer(res.result)						baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih nekonime mu >_<'})					await limitAdd(sender)					break                case 'nekonime':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					gatauda = body.slice(10)					reply(ind.wait())					anu = await fetchJson(`https://api.vhtear.com/randomnekonime&apikey=BeliApikeyngab`, {method: 'get'})					buffer = await getBuffer(anu.result.result)					baby.sendMessage(from, buffer, image, {quoted: mek})					await limitAdd(sender)					break                case 'kpop':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))                                        reply(ind.wait())                                        anu = await fetchJson(`https://tobz-api.herokuapp.com/api/randomkpop?apikey=${TobzKey}`, {method: 'get'})                                        if (anu.error) return reply(anu.error)                                        buffer = await getBuffer(anu.result)                                        randomkpop = `*PLASTIQUE*`                                        baby.sendMessage(from, buffer, image, {quoted: mek, caption: randomkpop})                                        await limitAdd(sender)                                        break                case 'husbu':                  //UPDATE MRG{108P}					if (isLimit(sender)) return reply(ind.limitend(pusname))					anu = await fetchJson(`https://api.shizukaa.xyz/api/husbu?apikey=itsmeiky633`, {method: 'get'})					buffer = await getBuffer(anu.result)					baby.sendMessage(from, buffer, image, {quoted: mek })					await limitAdd(sender) 					break                case 'loli':                  //UPDATE MRG{108P}					if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.shizukaa.xyz/api/randomloli?apikey=itsmeiky633`, {method: 'get'})					buffer = await getBuffer(anu.result)					baby.sendMessage(from, buffer, image, {quoted: mek })					await limitAdd(sender) 					break					case 'nhentai':                    henid = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/nhentai/${henid}?apikey=PEPEQ-MIKASA`)                    get_result = get_result.result                    txt = `Title Romaji : ${get_result.title_romaji}\n`                    txt += `Title Native : ${get_result.title_native}\n`                    txt += `Read Online : ${get_result.read}\n`                    get_info = get_result.info                    txt += `Parodies : ${get_info.parodies}\n`                    txt += `Character : ${get_info.characters.join(", ")}\n`                    txt += `Tags : ${get_info.tags.join(", ")}\n`                    txt += `Artist : ${get_info.artists}\n`                    txt += `Group : ${get_info.groups}\n`                    txt += `Languager : ${get_info.languages.join(", ")}\n`                    txt += `Categories : ${get_info.categories}\n`                    txt += `Pages : ${get_info.pages}\n`                    txt += `Uploaded : ${get_info.uploaded}\n`                    reply(txt)                    break                case 'nhentaipdf':                    henid = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/nhentaipdf/${henid}?apikey=PEPEQ-MIKASA`)                    get_result = get_result.result                    buffer = await getBuffer(get_result)                    baby.sendMessage(from, buffer, document, { quoted: mek, mimetype: Mimetype.pdf, filename: `${henid}.pdf` })                    break					case 'wibu':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))						data = await fetchJson(`https://api.vhtear.com/randomwibu&apikey=BeliApikeyngab`)						buffer = await getBuffer(data.result.foto)						baby.sendMessage(from, buffer, image, {quoted: mek, caption: '>_<'})					await limitAdd(sender)					break				case 'meme'://UPDATE MRG{108P}				   if (isLimit(sender)) return reply(ind.limitend(pusname))                  reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=MEME INDONESIA`, {method: 'get'})					naru = JSON.parse(JSON.stringify(anu));					to =  naru[Math.floor(Math.random() * naru.length)];					nye = await getBuffer(to)					baby.sendMessage(from, nye, image, { caption:'Ga ketawa autid', quoted: mek })					await limitAdd(sender)					break	case 'memeindo':				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				gatauda = body.slice(8)				reply(ind.wait())				anu = await fetchJson(`https://api.zeks.xyz/api/memeindo?apikey=apivinz`, {method: 'get'})				buffer = await getBuffer(anu.result)				baby.sendMessage(from, buffer, image, {quoted: mek})				await limitAdd(sender)				break		                case 'darkjokes':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))   				 data = fs.readFileSync('./src/darkjokes.js');                 jsonData = JSON.parse(data);                 randIndex = Math.floor(Math.random() * jsonData.length);                 randKey = jsonData[randIndex];                hasil = await getBuffer(randKey.result)                sendImage(hasil, mek, '*GELAP BOS :V*')				break					/*]=====> ANIME MENU <=====[*/case 'anime'://UPDATE MRG{108P}                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/random2/wallpaper?apikey=Api-team`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break				case 'animekiss':                if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					anp = getRandom('.gif')					rano = getRandom('.webp')					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/kiss?apikey=${TobzApi}`, {method: 'get'})					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {						fs.unlinkSync(ranp)						if (err) return reply(mess.error.stick)						buffer = fs.readFileSync(rano)						baby.sendMessage(from, buffer, sticker, {quoted: mek})						fs.unlinkSync(rano)					})					await limitAdd(sender) 					break 				case 'naruto':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Naruto`, {method: 'get'})					naru = JSON.parse(JSON.stringify(anu));					to =  naru[Math.floor(Math.random() * naru.length)];					nye = await getBuffer(to)					baby.sendMessage(from, nye, image, { caption: 'naruto!!', quoted: mek })					await limitAdd(sender)					break 				case 'minato':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Minato`, {method: 'get'})					min = JSON.parse(JSON.stringify(anu));					ato =  min[Math.floor(Math.random() * min.length)];					nye = await getBuffer(ato)					baby.sendMessage(from, nye, image, { caption: 'minato!!', quoted: mek })					await limitAdd(sender)					break 				case 'boruto':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Boruto`, {method: 'get'})					bor = JSON.parse(JSON.stringify(anu));					uto =  bor[Math.floor(Math.random() * bor.length)];					nye = await getBuffer(uto)					baby.sendMessage(from, nye, image, { caption: 'boruto!!', quoted: mek })					await limitAdd(sender)					break 				case 'hinata':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Hinata`, {method: 'get'})					hina = JSON.parse(JSON.stringify(anu));					ta =  hina[Math.floor(Math.random() * hina.length)];					nye = await getBuffer(ta)					baby.sendMessage(from, nye, image, { caption: '*HINATA HYOUGA*', quoted: mek })					await limitAdd(sender)					break  				case 'sasuke':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=sasuke`, {method: 'get'})					sasu = JSON.parse(JSON.stringify(anu));					ke =  sasu[Math.floor(Math.random() * sasu.length)];					nye = await getBuffer(ke)					baby.sendMessage(from, nye, image, { caption: 'sasuke!!', quoted: mek })					await limitAdd(sender) 					break 				case 'sakura':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=sakura`, {method: 'get'})					sak = JSON.parse(JSON.stringify(anu));					kura =  sak[Math.floor(Math.random() * sak.length)];					nye = await getBuffer(kura)					baby.sendMessage(from, nye, image, { caption: 'sakura!!', quoted: mek })					await limitAdd(sender) 					break 				case 'kaneki':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Kaneki-ken`, {method: 'get'})					sasu = JSON.parse(JSON.stringify(anu));					ke =  sasu[Math.floor(Math.random() * sasu.length)];					nye = await getBuffer(ke)					baby.sendMessage(from, nye, image, { caption: 'Pyschopet kata Ilham', quoted: mek })					await limitAdd(sender) 					break 				case 'toukachan':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+touka`, {method: 'get'})					tou = JSON.parse(JSON.stringify(anu));					ka =  tou[Math.floor(Math.random() * tou.length)];					nye = await getBuffer(ka)					baby.sendMessage(from, nye, image, { caption: 'toukachan!!', quoted: mek })					await limitAdd(sender) 					break 				case 'randomhentai':					 // Fix Bug By ItsmeikyXSec404				                 //UPDATE MRG{108P}					if (isLimit(sender)) return reply(ind.limitend(pusname))					if (!isPremium) return reply('Maaf kamu bukan user premium!')					if (!isNsfw) return reply(ind.nsfwoff())				if (isBanned) return reply('Maaf kamu sudah terbenned!')                                        gatauda = body.slice(12)					reply(ind.wait())                                        anu = await fetchJson(`https://api.shizukaa.xyz/api/randomimage?apikey=itsmeiky633`, {method: 'get'})                                        buffer = await getBuffer(anu.result)                                        baby.sendMessage(from, buffer, image, {quoted: mek})					await limitAdd(sender)                                        break								case 'rize':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+rize`, {method: 'get'})					ri = JSON.parse(JSON.stringify(anu));					ze =  ri[Math.floor(Math.random() * ri.length)];					nye = await getBuffer(ze)					baby.sendMessage(from, nye, image, { caption: 'rize chan!!', quoted: mek })					await limitAdd(sender) 						break 				case 'akira':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+akira`, {method: 'get'})					ak = JSON.parse(JSON.stringify(anu));					ara =  ak[Math.floor(Math.random() * ak.length)];					nye = await getBuffer(ara)					baby.sendMessage(from, nye, image, { caption: 'akira chan!!', quoted: mek })					await limitAdd(sender) 					break 				case 'itori':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+itori`, {method: 'get'})					it = JSON.parse(JSON.stringify(anu));					ori =  it[Math.floor(Math.random() * it.length)];					nye = await getBuffer(ori)					baby.sendMessage(from, nye, image, { caption: 'itori chan!!', quoted: mek })					await limitAdd(sender) 					break 					case 'kurumi':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=kurumitokisakikawai&apikey=BeliApikeyngab`, {method: 'get'})					var kur = JSON.parse(JSON.stringify(anu.result));					var imi =  kur[Math.floor(Math.random() * kur.length)];					nye = await getBuffer(imi)					baby.sendMessage(from, nye, image, { caption: 'kurumi chan!!', quoted: mek })					break				case 'kurumi1':			if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())						anu = await fetchJson(`https://api.vhtear.com/pinterest?query=kurumitokisakikawai&apikey=BeliApikeyngab`, {method: 'get'})					var kur = JSON.parse(JSON.stringify(anu.result));					var imi =  kur[Math.floor(Math.random() * kur.length)];					nye = await getBuffer(imi)					baby.sendMessage(from, nye, image, { caption: 'kurumi chan!!', quoted: mek })					break				case 'miku':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+miku`, {method: 'get'})					mi = JSON.parse(JSON.stringify(anu));					ku =  mi[Math.floor(Math.random() * mi.length)];					nye = await getBuffer(ku)					baby.sendMessage(from, nye, image, { caption: 'miku chan!!', quoted: mek })					await limitAdd(sender) 					break					case 'nhentai':                    henid = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/nhentai/${henid}?apikey=sashi-hara887`)                    get_result = get_result.result                    txt = `Title Romaji : ${get_result.title_romaji}\n`                    txt += `Title Native : ${get_result.title_native}\n`                    txt += `Read Online : ${get_result.read}\n`                    get_info = get_result.info                    txt += `Parodies : ${get_info.parodies}\n`                    txt += `Character : ${get_info.characters.join(", ")}\n`                    txt += `Tags : ${get_info.tags.join(", ")}\n`                    txt += `Artist : ${get_info.artists}\n`                    txt += `Group : ${get_info.groups}\n`                    txt += `Languager : ${get_info.languages.join(", ")}\n`                    txt += `Categories : ${get_info.categories}\n`                    txt += `Pages : ${get_info.pages}\n`                    txt += `Uploaded : ${get_info.uploaded}\n`                    reply(txt)                    breakcase 'elaina':				//UPDATE                 //UPDATE MRG{108P}					if (isLimit(sender)) return reply(ind.limitend(pusname))					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=elainamajonotabitabi&apikey=BeliApikeyngab`, {method: 'get'})					var ela = JSON.parse(JSON.stringify(anu.result));					var ina =  ela[Math.floor(Math.random() * ela.length)];					nye = await getBuffer(ina)					baby.sendMessage(from, nye, image, { caption: 'elaina!!', quoted: mek })					await limitAdd(sender)					breakcase 'megumin':				//UPDATE                 //UPDATE MRG{108P}					if (isLimit(sender)) return reply(ind.limitend(pusname))					buffer = await getBuffer(`https://lolhuman.herokuapp.com/api/random/megumin?apikey=Api-team`, {method: 'get'})					baby.sendMessage(from, buffer, image, {quoted: mek })					await limitAdd(sender) 					break					case 'shinobu':				//UPDATE                 //UPDATE MRG{108P}					if (isLimit(sender)) return reply(ind.limitend(pusname))					anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/sfw/shinobu?apikey=BeliApikey`, {method: 'get'}) buffer = await getBuffer(anu.result.url)					baby.sendMessage(from, buffer, image, {quoted: mek })					await limitAdd(sender) 					break					case 'chika':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Fujiwarababy`, {method: 'get'})					sasu = JSON.parse(JSON.stringify(anu));					ke =  sasu[Math.floor(Math.random() * sasu.length)];					nye = await getBuffer(ke)					baby.sendMessage(from, nye, image, { caption: 'baby waifu partner', quoted: mek })					await limitAdd(sender) 					break					case 'dxd':				    try {					if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))						res = await fetchJson(`https://mnazria.herokuapp.com/api/anime?query=dxd`, {method: 'get'})						buffer = await getBuffer(res.result)						 baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'gw iri bangsat'})					} catch (e) {						console.log(`Error :`, color(e,'red'))						sa = await getBuffer(`https://i.ibb.co/JcSjmNY/IMG-20210107-WA0052.jpg`)						 baby.sendMessage(from, sa, image, {quoted: mek, caption: 'Error Kak!!'})						reply('❌ *ERROR* ❌')					}					break					case 'rem':			if (isBanned) return reply(ind.baned())			//UPDATE MRG{108P}			if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())						anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=rem`, {method: 'get'})					sasu = JSON.parse(JSON.stringify(anu));					ke =  sasu[Math.floor(Math.random() * sasu.length)];					nye = await getBuffer(ke)					baby.sendMessage(from, nye, image, { caption: 'rem waifu owner', quoted: mek })					await limitAdd(sender) 					break   case 'yotsuba'://ARYA TOLOL CUKK			if (isBanned) return reply(ind.baned())			//UPDATE MRG{108P}			if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())						anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=yotsuba`, {method: 'get'})					sasu = JSON.parse(JSON.stringify(anu));					ke =  sasu[Math.floor(Math.random() * sasu.length)];					nye = await getBuffer(ke)					baby.sendMessage(from, nye, image, { caption: 'Kawaii kan', quoted: mek })					await limitAdd(sender) 					breakcase 'rikka'://ARYA TOLOL CUKK			if (isBanned) return reply(ind.baned())			//UPDATE MRG{108P}			if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())						anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=rikka`, {method: 'get'})					sasu = JSON.parse(JSON.stringify(anu));					ke =  sasu[Math.floor(Math.random() * sasu.length)];					nye = await getBuffer(ke)					baby.sendMessage(from, nye, image, { caption: 'Kawaii kan', quoted: mek })					await limitAdd(sender) 					breakcase 'randomanime':			if (isBanned) return reply(ind.baned())			//UPDATE MRG{108P}			if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())						anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime`, {method: 'get'})					sasu = JSON.parse(JSON.stringify(anu));					ke =  sasu[Math.floor(Math.random() * sasu.length)];					nye = await getBuffer(ke)					baby.sendMessage(from, nye, image, { caption: 'Nihh', quoted: mek })					await limitAdd(sender) 					break					if (isBanned) return reply(ind.baned())			//UPDATE MRG{108P}			if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())						anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=yotsuba`, {method: 'get'})					sasu = JSON.parse(JSON.stringify(anu));					ke =  sasu[Math.floor(Math.random() * sasu.length)];					nye = await getBuffer(ke)					baby.sendMessage(from, nye, image, { caption: 'Kawaii kan', quoted: mek })					await limitAdd(sender) 					break					case 'ram'://UPDATE MRG{108P}                                if (isLimit(sender)) return reply(limits.limitend(pushname2))					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=ramrezero&apikey=BeliApikeyngab`, {method: 'get'})					var mi = JSON.parse(JSON.stringify(anu.result));					var ku =  mi[Math.floor(Math.random() * mi.length)];					nye = await getBuffer(ku)					baby.sendMessage(from, nye, image, { caption: 'ram chan!!', quoted: mek })					await limitAdd(sender)					break					case 'waifukawai':				    try {					//UPDATE MRG{108P}					reply(ind.wait())						axios.get(`https://nekos.life/api/v2/img/kemonomimi`).then((res)=>{						imageToBase64(res.data.url).then((response) => {var buf = Buffer.from(response, 'base64');					baby.sendMessage(from, buf, image, {quoted: mek,caption: "KAWAII!!"})					})})					} catch (e) {						console.log(`Error :`, color(e,'red'))						reply('тЭМ *ERROR* тЭМ')					}					break			case 'kemonomimi':				    try {					//UPDATE MRG{108P}					reply(ind.wait())						axios.get(`https://nekos.life/api/v2/img/kemonomimi`).then((res)=>{						imageToBase64(res.data.url).then((response) => {var buf = Buffer.from(response, 'base64');					baby.sendMessage(from, buf, image, {quoted: mek,caption: "ONII CHAN BAKA!!"})					})})					} catch (e) {						console.log(`Error :`, color(e,'red'))						reply('тЭМ *ERROR* тЭМ')					}					break		case 'kuni':				    try {					//UPDATE MRG{108P}					if (!isPrem) return reply(ind.premium())					reply(ind.wait())						axios.get(`https://nekos.life/api/v2/img/kuni`).then((res)=>{						imageToBase64(res.data.url).then((response) => {var buf = Buffer.from(response, 'base64');					baby.sendMessage(from, buf, image, {quoted: mek,caption: "*INGAT ADA TUHAN*!!"})					})})					} catch (e) {						console.log(`Error :`, color(e,'red'))						reply('тЭМ *ERROR* тЭМ')					}					breakcase 'pictlolicon':					//UPDATE MRG{108P}					if (!isGroup) return reply(ind.group)					reply(ind.wait())					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=lolikawai&apikey=BeliApikeyngab`, {method: 'get'})					var mi = JSON.parse(JSON.stringify(anu.result));					var ku =  mi[Math.floor(Math.random() * mi.length)];					nye = await getBuffer(ku)					baby.sendMessage(from, nye, image, { caption: 'HALLO ONII CHAN!!', quoted: mek })					break					case 'pictwaifu':					//UPDATE MRG{108P}					if (!isGroup) return reply(ind.group)					reply(ind.wait())					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=waifukawai&apikey=BeliApikeyngab`, {method: 'get'})					var mi = JSON.parse(JSON.stringify(anu.result));					var ku =  mi[Math.floor(Math.random() * mi.length)];					nye = await getBuffer(ku)					baby.sendMessage(from, nye, image, { caption: 'OHAYO DARLING!!', quoted: mek })					break					case 'nsfwavatar':		                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/random2/${command}?apikey=Api-team`)		                    baby.sendMessage(from, buffer, image, { quoted: mek })		                    break					case 'testwaifu':					//UPDATE MRG{108P}					if (!isGroup) return reply(ind.group)					reply(ind.wait())					anu = await fetchJson(`https://xptnewapi.000webhostapp.com/newapixptn/Waifu.php?apikey=xptn1`, {method: 'get'})					var mi = JSON.parse(JSON.stringify(anu.result.result));					var ku =  mi[Math.floor(Math.random() * mi.length)];					nye = await getBuffer(ku)					baby.sendMessage(from, nye, image, { caption: 'OHAYO DARLING!!', quoted: mek })					break					case 'pictneko':					//UPDATE MRG{108P}					if (!isGroup) return reply(ind.group)					reply(ind.wait())					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=nekoanimekawai&apikey=BeliApikeyngab`, {method: 'get'})					var mi = JSON.parse(JSON.stringify(anu.result));					var ku =  mi[Math.floor(Math.random() * mi.length)];					nye = await getBuffer(ku)					baby.sendMessage(from, nye, image, { caption: 'OHAYO ONII CHAN!!', quoted: mek })					breakcase 'senku':					//UPDATE MRG{108P}                                if (isLimit(sender)) return reply(limits.limitend(pushname2))					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=senku&apikey=BeliApikeyngab`, {method: 'get'})					var sen = JSON.parse(JSON.stringify(anu.result));					var ku =  sen[Math.floor(Math.random() * sen.length)];					nye = await getBuffer(ku)					baby.sendMessage(from, nye, image, { caption: 'senku!!', quoted: mek })					await limitAdd(sender)					break			case 'kurumi2':				//UPDATE MRG{108P}					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=kurumitokisakikawai&apikey=BeliApikeyngab`, {method: 'get'})					var kur = JSON.parse(JSON.stringify(anu.result));					var imi =  kur[Math.floor(Math.random() * kur.length)];					nye = await getBuffer(imi)					baby.sendMessage(from, nye, image, { caption: 'kurumi chan!!', quoted: mek })					break				case 'nakanomiku':				//UPDATE MRG{108P}					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=Nakanomiku&apikey=BeliApikeyngab`, {method: 'get'})					var mi = JSON.parse(JSON.stringify(anu.result));					var ku =  mi[Math.floor(Math.random() * mi.length)];					nye = await getBuffer(ku)					baby.sendMessage(from, nye, image, { caption: 'miku chan!!', quoted: mek })					break		case 'nsfwloli3':				    try {					//UPDATE MRG{108P}				reply(ind.wait())							res = await fetchJson(`https://api.lolis.life/random?nsfw=true`, {method: 'get'})						buffer = await getBuffer(res.url)						baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Jangan jadiin bahan buat comli om'})					} catch (e) {						console.log(`Error :`, color(e,'red'))						reply('тЭМ *ERROR* тЭМ')					}					break		case 'neko2':				    try {					//UPDATE MRG{108P}				reply(ind.wait())							axios.get(`https://nekos.life/api/v2/img/meow`).then((res)=>{						imageToBase64(res.data.url).then((response) => {var buf = Buffer.from(response, 'base64');					baby.sendMessage(from, buf, image, {quoted: mek,caption: "NYANG!!"})					})})					} catch (e) {						console.log(`Error :`, color(e,'red'))						reply('тЭМ *ERROR* тЭМ')					}					break                 case 'holo':				    try {					//UPDATE MRG{108P}					reply(ind.wait())						axios.get(`https://nekos.life/api/v2/img/holo`).then((res)=>{						imageToBase64(res.data.url).then((response) => {var buf = Buffer.from(response, 'base64');					baby.sendMessage(from, buf, image, {quoted: mek,caption: "NIH OM!!"})					})})					} catch (e) {						console.log(`Error :`, color(e,'red'))						reply('тЭМ *ERROR* тЭМ')					}					breakcase 'wallpaperanime':		//UPDATE MRG{108P}                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/random2/wallpaper?apikey=Api-team`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break					case 'wallpapernime':				    try {					//UPDATE MRG{108P}					reply(ind.wait())						axios.get(`https://nekos.life/api/v2/img/wallpaper`).then((res)=>{						imageToBase64(res.data.url).then((response) => {var buf = Buffer.from(response, 'base64');					baby.sendMessage(from, buf, image, {quoted: mek,caption: "Nih om"})					})})					} catch (e) {						console.log(`Error :`, color(e,'red'))						reply('тЭМ *ERROR* тЭМ')					}					breakcase 'joox':               query = args.join(" ")		//UPDATE MRG{108P}			if (args.length < 1) return reply(`Contoh: ${prefix}joox Kokoronashi`)                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/jooxplay?apikey=Api-team&query=${query}`)                    get_result = get_result.result		    get_info = get_result.info		    txt = '*_[ FITUR UP BY MrG{108P} ]_*\n\n'                    txt += `Judul : *${get_info.song}*\n`                    txt += `Album : *${get_info.album}*\n`                    txt += `Durasi : *${get_info.duration}*\n`                    txt += `Penyanyi : *${get_info.singer}*\n`                    txt += `Tanggal : *${get_info.date}*\n`                    txt += `Lirik :\n *${get_result.lirik}*\n`                    thumbnail = await getBuffer(get_result.image)                    baby.sendMessage(from, thumbnail, image, { quoted: mek, caption: txt })                    get_audio = await getBuffer(get_result.audio[0].link)                    baby.sendMessage(from, get_audio, audio, { mimetype: 'audio/mp4', filename: `${get_info.song}.mp3`, quoted: mek })                    break                    case 'attp':if (isBanned) return reply(ind.baned())			//UPDATE MRG{108P}				if (args.length < 1) return reply(`_Teksnya Mana Boss_\n*Contoh ${prefix}attp Wajahku Ganteng*`)				attp2 = await getBuffer(`https://api.xteam.xyz/attp?file&text=${body.slice(6)}`)				baby.sendMessage(from, attp2, sticker, {quoted: mek})				break			case 'wallpaperty':					//UPDATE MRG{108P}					reply(ind.wait())					paper = body.slice(7)					u = await fetchJson(`http://lolhuman.herokuapp.com/api/wallpaper/querty=${paper}?apikey=apiKey`, {method: 'get'})					var per = JSON.parse(JSON.stringify(u.result));					var trest =  pin[Math.floor(Math.random() * per.length)];					pinehg = await getBuffer(trest)					baby.sendMessage(from, pinehg, image, { caption: '*Wallpaper*\n\n*Hasil Pencarian : '+paper+'*', quoted: mek })					break					case 'kusonime':                    query = args.join(" ")                    reply(ind.wait())                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/kusonimesearch?apikey=PEPEQ-MIKASA&query=${query}`)                    get_result = get_result.result                    txt = `Title : ${get_result.title}\n`                    txt += `Japanese : ${get_result.japanese}\n`                    txt += `Genre : ${get_result.genre}\n`                    txt += `Seasons : ${get_result.seasons}\n`                    txt += `Producers : ${get_result.producers}\n`                    txt += `Type : ${get_result.type}\n`                    txt += `Status : ${get_result.status}\n`                    txt += `Total Episode : ${get_result.total_episode}\n`                    txt += `Score : ${get_result.score}\n`                    txt += `Duration : ${get_result.duration}\n`                    txt += `Released On : ${get_result.released_on}\n`                    txt += `Desc : ${get_result.desc}\n`                    link_dl = get_result.link_dl                    for (var x in link_dl) {                        txt += `\n${x}\n`                        for (var y in link_dl[x]) {                            txt += `${y} - ${link_dl[x][y]}\n`                        }                    }                    buffer = await getBuffer(get_result.thumbnail)                    baby.sendMessage(from, buffer, image, { quoted: mek, caption: txt })                    break					case 'waifu':				if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					reply(ind.wait())	  					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=waifukawai&apikey=BeliApikeyngab`, {method: 'get'})					var mi = JSON.parse(JSON.stringify(anu.result));					var ku =  mi[Math.floor(Math.random() * mi.length)];					nye = await getBuffer(ku)					baby.sendMessage(from, nye, image, { caption: 'OHAYO DARLING!!', quoted: mek })					break/*]=====> OTHER MENU <=====[*/				            	case 'mining':                      //UPDATE MRG{108P}                      if (isLimit(sender)) return reply(ind.limitend(pushname))                      if (!isEventon) return reply(`maaf ${pushname} event mining tidak di aktifkan sama owner  MrG{108P}*`)                      if (isOwner) {                      const one = 999999999                      addLevelingXp(sender, one)                      addLevelingLevel(sender, 99)                      reply(`karena Elana bot -x Baik Bot memberikan ${one}Xp >_<`)                      }else{                      const mining = Math.ceil(Math.random() * 10000)                      addLevelingXp(sender, mining)                      await reply(`*selamat* ${pushname} kamu mendapatkan *${mining}Xp*`)                      }                    await limitAdd(sender)					break                case 'moddroid':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())			data = await fetchJson(`https://tobz-api.herokuapp.com/api/moddroid?q=${body.slice(10)}&apikey=BotWeA`)				hepi = data.result[0] 				teks = `*Nama*: ${data.result[0].title}\n*Publisher*: ${hepi.publisher}\n*Mod info:* ${hepi.mod_info}\n*size*: ${hepi.size}\n*Latest version*: ${hepi.latest_version}\n*Genre*: ${hepi.genre}\n*Link:* ${hepi.link}\n*Download*: ${hepi.download}`				buffer = await getBuffer(hepi.image)				itsmeiky.sendMessage(from, buffer, image, {quoted: iky, caption: `${teks}`})				await limitAdd(sender)				break			case 'happymod':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (!isPrem) return reply(ind.premium())			data = await fetchJson(`https://tobz-api.herokuapp.com/api/happymod?q=${body.slice(10)}&apikey=BotWeA`)				hupo = data.result[0] 				teks = `*Nama*: ${data.result[0].title}\n*version*: ${hupo.version}\n*size:* ${hupo.size}\n*root*: ${hupo.root}\n*purchase*: ${hupo.price}\n*link*: ${hupo.link}\n*download*: ${hupo.download}`				buffer = await getBuffer(hupo.image)				itsmeiky.sendMessage(from, buffer, image, {quoted: iky, caption: `${teks}`})				await limitAdd(sender)				break					case 'pinterest':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))					query = args.join(" ")                    ini_url = await fetchJson(`http://api.lolhuman.xyz/api/pinterest?apikey=Api-team&query=${query}`)                    ini_url = ini_url.result                    buffer = await getBuffer(ini_url)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    breakcase 'pinterestdl':                    ini_url = args[0]                    ini_url = await fetchJson(`http://lolhuman.herokuapp.com/api/pinterestdl?apikey=Api-team&url=${ini_url}`)                    ini_url = ini_url.result["736x"]                    buffer = await getBuffer(ini_url)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break                case 'beritahoax':                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))                    baby.updatePresence(from, Presence.composing) 					data = await fetchJson(`https://docs-jojo.herokuapp.com/api/infohoax`, {method: 'get'})					teks = '♡───────────♡\n'					for (let i of data.result) {						teks += `*➸ Gambar* : ${i.image}\n*➸ Title* : ${i.title}\n*➸ link* : ${i.link}\n*➸ tag* : ${i.tag}\n♡───────────♡\n`					}					reply(teks.trim())					await limitAdd(sender)					break					case 'brainly':	                  if (isBanned) return reply(ind.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))                    brien = body.slice(9)					brainly(`${brien}`).then(res => {					teks = '♡───────────♡\n'					for (let Y of res.data) {						teks += `\n*「 BRAINLY 」*\n\n*➸ Pertanyaan:* ${Y.pertanyaan}\n\n*➸ Jawaban:* ${Y.jawaban[0].text}\n♡───────────♡\n`					}					baby.sendMessage(from, teks, text, {quoted: mek, detectLinks: false})                        console.log(res)                    })					await limitAdd(sender)					break				case 'info':					me = baby.user					uptime = process.uptime()					teks = `*➸ Nama bot* : ${me.name}\n*➸ OWNER* : 𝗥𝗮𝗺𝗹𝗮𝗻 𝗜𝗗\n*➸ AUTHOR* : ${ownerName}\n*➸ Nomor Bot* : @${me.jid.split('@')[0]}\n*➸ Prefix* : ${prefix}\n*➸ Total Block Contact* : ${blocked.length}\n*➸ The bot is active on* : ${kyun(uptime)}`					buffer = await getBuffer(me.imgUrl)					baby.sendMessage(from, buffer, image, {caption: teks, contextInfo:{mentionedJid: [me.jid]}})					break            case 'admin':            case 'owner':            case 'creator':                  baby.sendMessage(from, {displayname: "Jeff", vcard: vcard}, MessageType.contact, { quoted: mek})                  baby.sendMessage(from, 'Ini owner saya Jangan lupa subscribe MrG{108P}*...',MessageType.text, { quoted: mek} )tod = await getBuffer(`https://i.ibb.co/Vm5FHxc/IMG-20210312-WA1759.jpg`) baby.sendMessage(from, tod, image, { quoted: mek, caption: '*Ini waifu owner saya,jangan luh ambil,kalau luh ambil,yok gass gelud!!*'})                     break                     case 'galaxtext':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/ephoto1/galaxywallpaper?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'pupycut':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(8)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/ephoto1/puppycute?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'galaxstyle':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(11)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/ephoto1/galaxystyle?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'hologram':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(9)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/ephoto1/hologram3d?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'textbyname':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(11)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/ephoto1/textbyname?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'herrypoter':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(11)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/photooxy1/harrypotter?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'greanneon':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/ephoto1/greenneon?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'metallogo':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/ephoto1/metallogo?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'grenneon':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				aruga = body.slice(10)				reply(ind.wait())				aruga = await getBuffer(`http://lolhuman.herokuapp.com/api/textprome/greenneon?apikey=Api-team&text=${aruga}`)				baby.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})				await limitAdd(sender)				break 				case 'glitch':// Update	MrG{108P}*			    //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())                tahtar3 = `${body.slice(8)}`                tahtar = tahtar3.split("/")[0];			    tahtar2 = tahtar3.split("/")[1];                     const preff = `Usage: \n${prefix}glitch teks/teks\n\nEx :\n${prefix}glitch ini contoh/anjay`                   reply(ind.wait())  					if (args.length < 1) return reply(preff)                     buff = await getBuffer(`https://videfikri.com/api/textmaker/tiktokeffect/?text1=${tahtar}&text2=${tahtar2}`, {method: 'get'})                     baby.sendMessage(from, buff, image, {quoted: mek, caption: `Nih Anjim`})                  await limitAdd(sender)                   break                  case 'textlight':                // Update	MrG{108P}*                  if (isBanned) return reply(nad.baned())				if (!isRegistered) return reply(nad.noregiscade ())				if (isLimit(sender)) return reply(nad.limitend(pusname))								if (args.length < 1) return reply(nad.wrongf())				ligh = body.slice(11)				if (ligh.length > 10) return reply('Teksnya kepanjangan, maksimal 9 karakter')				reply(ind.wait())				lawak = await getBuffer(`https://api.zeks.xyz/api/tlight?text=${ligh}&apikey=apivinz`)		    baby.sendMessage(from, lawak, image, {quoted: mek})		    await limitAdd(sender)		    break                case 'glitchtext':               // Update	MrG{108P}*                  if (isBanned) return reply(nad.baned())				//UPDATE MRG{108P}				if (isLimit(sender)) return reply(nad.limitend(pusname))					var gh = body.slice(12)					var gli = gh.split("&")[0];					var tch = gh.split("&")[1];					if (args.length < 1) return reply(`「❗」Contoh : ${prefix}glitchtext Rem & Bot`)					reply(ind.wait())					buffer = await getBuffer(`https://api.zeks.xyz/api/gtext?text1=${gli}&text2=${tch}&apikey=apivinz`)					baby.sendMessage(from, buffer, image, {quoted: mek})					await limitAdd(sender)					break					case 'logoepep':// Update	MrG{108P}*				gatauda = body.slice(9)                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply('Teksnya mana um')				reply(ind.wait())				buffer = await getBuffer(`https://api.vhtear.com/logoff?hero=Maxim&text=${gatauda}&apikey=BeliApikeyngab`, {method: 'get'})				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih hasilnya kak...'})				await limitAdd(sender)				break		case 'logoepep2':// Update	MrG{108P}*				gatauda = body.slice(10)                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply('Teksnya mana um')				reply(ind.wait())				buffer = await getBuffer(`https://api.vhtear.com/logoff?hero=Alok&text=${gatauda}&apikey=BeliApikeyngab`, {method: 'get'})				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih hasilnya kak...'})				await limitAdd(sender)				break		case 'logoepep3':// Update	MrG{108P}*				gatauda = body.slice(10)                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply('Teksnya mana um')				reply(ind.wait())				buffer = await getBuffer(`https://api.vhtear.com/logoff?hero=Alvaro&text=${gatauda}&apikey=BeliApikeyngab`, {method: 'get'})				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih hasilnya kak...'})				await limitAdd(sender)				break		case 'logoepep4':// Update	MrG{108P}*				gatauda = body.slice(10)                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply('Teksnya mana um')				reply(ind.wait())				buffer = await getBuffer(`https://api.vhtear.com/logoff?hero=Caroline&text=${gatauda}&apikey=BeliApikeyngab`, {method: 'get'})				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih hasilnya kak...'})				await limitAdd(sender)				break		case 'logoepep5':// Update	MrG{108P}*				gatauda = body.slice(10)                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply('Teksnya mana um')				reply(ind.wait())				buffer = await getBuffer(`https://api.vhtear.com/logoff?hero=Kla&text=${gatauda}&apikey=BeliApikeyngab`, {method: 'get'})				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih hasilnya kak...'})				await limitAdd(sender)				break		case 'gamelogo':// Update	MrG{108P}*				gatauda = body.slice(9)                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply('Teksnya mana um')				reply(ind.wait())				buffer = await getBuffer(`https://api.vhtear.com/gamelogo?text=${gatauda}&apikey=BeliApikeyngab`, {method: 'get'})				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih hasilnya kak...'})				await limitAdd(sender)				breakcase 'shadow':// Update	MrG{108P}*                case 'cup':                case 'cup1':                case 'romance':                case 'smoke':                case 'burnpaper':                case 'lovemessage':                case 'undergrass':                case 'love':                case 'coffe':                case 'woodheart':                case 'flowerheart':                case 'woodenboard':                case 'summer3d':                case 'wolfmetal':                case 'nature3d':                case 'underwater':                case 'golderrose':                case 'summernature':                case 'letterleaves':                case 'glowingneon':                case 'fallleaves':                case 'flamming':                case 'harrypotter':                case 'carvedwood':                    if (args.length == 0) return reply(`Usage: ${prefix + command} text\nExample: ${prefix + command} LoL Human`)                    txt = args.join(" ")            reply(ind.wait())                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/photooxy1/${command}?apikey=Api-team&text=${txt}`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break                case 'wetglass':                case 'multicolor3d':                case 'watercolor':                case 'luxurygold':                case 'galaxywallpaper':                case 'lighttext':                case 'beautifulflower':                case 'puppycute':                case 'royaltext':                case 'heartshaped':                case 'birthdaycake':                case 'galaxystyle':                case 'hologram3d':                case 'greenneon':                case 'glossychrome':                case 'greenbush':                case 'metallogo':                case 'noeltext':                case 'glittergold':                case 'textcake':                case 'starsnight':                case 'wooden3d':                case 'textbyname':                case 'writegalacy':                case 'galaxybat':                case 'snow3d':                case 'birthdayday':                case 'goldplaybutton':                case 'silverplaybutton':                case 'freefire':                    if (args.length == 0) return reply(`Usage: ${prefix + command} text\nExample: ${prefix + command} LoL Human`)                    txt = args.join(" ")               reply(ind.wait())                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/ephoto1/${command}?apikey=Api-team&text=${txt}`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break            case 'googles':gh = body.slice(9)gl1 = gh.split("|")[0];gl2 = gh.split("|")[1];gl3 = gh.split("|")[2];reply(ind.wait())anu = await fetchJson(`https://ferdiz-api.herokuapp.com/api/maker/googlesearch?text=${gl1}&text2=${gl2}&text3=${gl3}`, {method: 'get'})buff = await getBuffer(anu.result)baby.sendMessage(from, buff, image, {quoted: mek})await limitAdd(sender)breakcase 'toxic':		//UPDATE         //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply('Teks nya mana kak?')				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://api.lolhuman.xyz/api/textprome/toxic?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {quoted: mek})				await limitAdd(sender)				break	case 'chiisaihentai':                case 'trap':                case 'blowjob':                case 'yaoi':                case 'ecchi':                case 'hentai':                case 'ahegao':                case 'hololewd':                case 'sideoppai':                case 'animefeets':                case 'animebooty':                case 'animethighss':                case 'hentaiparadise':                case 'animearmpits':                case 'hentaifemdom':                case 'lewdanimegirls':                case 'biganimetiddies':                case 'animebellybutton':                case 'hentai4everyone':                  if (isBanned) return reply(nad.baned())                  if (!isNsfw) return reply(ind.nsfwoff())                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/random/nsfw/${command}?apikey=Api-team`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    breakcase 'nekopoi':			//UPDATE MRG{108P}			if (isLimit(sender)) return reply(ind.limitend(pusname))			if (!isNsfw) return reply(ind.nsfwoff())			if (!isGroup) return reply(ind.groupo())               	    if (args.length < 1) return reply('teksnya mana gan?')                    teks = body.slice(9)                    anu = await fetchJson(`https://api.vhtear.com/nekosearch?query=${teks}&apikey=BeliApikeyngab`, {method: 'get'})			reply(ind.wait())                    teks = `===============\n`                    for (let neko of anu.result) {                    teks += `Title: ${neko.title}\nDeskripsi: ${neko.detail}\n===============\n`                    }                    reply(teks.trim())			     	await limitAdd(sender) 			     	break                case 'bj':                case 'ero':                case 'cum':                case 'feet':                case 'yuri':                case 'trap':                case 'lewd':                case 'feed':                case 'eron':                case 'solo':                case 'gasm':                case 'poke':                case 'anal':                case 'holo':                case 'tits':                case 'kuni':                case 'kiss':                case 'erok':                case 'smug':                case 'baka':                case 'solog':                case 'feetg':                case 'lewdk':                case 'waifu':                case 'pussy':                case 'femdom':                case 'cuddle':                case 'hentai':                case 'eroyuri':                case 'cum_jpg':                case 'blowjob':                case 'erofeet':                case 'holoero':                case 'classic':                case 'erokemo':                case 'fox_girl':                case 'futanari':                case 'lewdkemo':                case 'wallpaper':                case 'pussy_jpg':                case 'kemonomimi':                case 'nsfw_avatar':                  if (isBanned) return reply(nad.baned())                  if (!isNsfw) return reply(ind.nsfwoff())                     buffer = await getBuffer(`http://api.lolhuman.xyz/api/random2/${command}?apikey=Api-team`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break                case 'ngif':                case 'nsfw_neko_gif':                case 'random_hentai_gif':              if (!isNsfw) return reply(ind.nsfwoff())                    ranp = getRandom('.gif')                    rano = getRandom('.webp')                    buffer = `http://api.lolhuman.xyz/api/random2/${command}?apikey=Api-team`                    exec(`wget ${buffer} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {                        fs.unlinkSync(ranp)                        buff = fs.readFileSync(rano)                        baby.sendMessage(from, buff, sticker, { quoted: mek })                        fs.unlinkSync(rano)                    })                    break                    // Textprome //                case 'blackpink':                case 'neon':                case 'greenneon':                case 'advanceglow':                case 'futureneon':                case 'sandwriting':                case 'sandsummer':                case 'sandengraved':                case 'metaldark':                case 'neonlight':                case 'holographic':                case 'text1917':                case 'minion':                case 'deluxesilver':                case 'newyearcard':                case 'bloodfrosted':                case 'halloween':                case 'jokerlogo':                case 'fireworksparkle':                case 'natureleaves':                case 'bokeh':                case 'toxic':                case 'strawberry':                case 'box3d':                case 'roadwarning':                case 'breakwall':                case 'icecold':                case 'luxury':                case 'cloud':                case 'summersand':                case 'horrorblood':                case 'thunder':                case 'christmas':                    if (args.length == 0) return reply(`Usage: ${prefix + command} text\nExample: ${prefix + command} `)                    txt = args.join(" ")                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/textprome/${command}?apikey=Api-team&text=${txt}`)                   baby.sendMessage(from, buffer, image, { quoted: mek })                    break             case 'lk21':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} Transformer`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/lk21?apikey=Api-team&query=${query}`)                    get_result = get_result.result                    txt = `Title : ${get_result.title}\n`                    txt += `Link : ${get_result.link}\n`                    txt += `Genre : ${get_result.genre}\n`                    txt += `Views : ${get_result.views}\n`                    txt += `Duration : ${get_result.duration}\n`                    txt += `Tahun : ${get_result.tahun}\n`                    txt += `Rating : ${get_result.rating}\n`                    txt += `Desc : ${get_result.desc}\n`                    txt += `Actors : ${get_result.actors.join(", ")}\n`                    txt += `Location : ${get_result.location}\n`                    txt += `Date Release : ${get_result.date_release}\n`                    txt += `Language : ${get_result.language}\n`                    txt += `Link Download : ${get_result.link_dl}`                    thumbnail = await getBuffer(get_result.thumbnail)                    baby.sendMessage(from, thumbnail, image, { quoted: mek, caption: txt })                    breakcase 'imagetext':				case 'itext':				case 'itxt':					//UPDATE MRG{108P}                  if (args.length < 1) return reply(`Masukan Teks\nContoh : ${prefix}Emelia Bot`)                imageToBase64(`https://api.vhtear.com/textxgif?text=${args[0]}&apikey=BeliApikeyngab`).then((response) => {var buf = Buffer.from(response, 'base64');                baby.sendMessage(from, buf, image, {quoted: mek, caption: "DONE BOS✓"})})                breakcase 'bneon':       case 'matrix':       case 'breakwall':       case 'dropwater':       case 'leavest':       case 'logobp':        //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))			         if (args.length == 0) return reply(`Usage: ${prefix + command} text\nExample: ${prefix + command} yogi`)           txt = args.join(" ")          reply('[❕] Loading')          buffer = await getBuffer(`https://api.zeks.xyz/api/${command}?text=${txt}&apikey=apivinz`)           baby.sendMessage(from, buffer, image, {caption: 'Nih kak.. ', quoted: mek})         breakcase '8bit': // UPDATE MRG{108P}				if (args.length < 1) return reply(`textnya mana om?`)		ct = body.slice(5)				ll1 = ct.split("|")[0];        ll2 = ct.split("|")[1];				reply(`[❕] Loading`)				anu = await fetchJson(`https://clientcity.herokuapp.com/api/textpro/onedev13?text=${ll1}&text2=${ll2}&theme=8bit&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)    baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'ihh buriq'})		breakcase 'anakharamserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}anakharamserti ArnandoGanz*`)				reply(ind.wait())				ct = body.slice(15)				anu = await getBuffer(`https://onlydevcity.xyz/AnakHaramSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'hekelserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}hekel ArnandoGanz*`)				reply(ind.wait())				ct = body.slice(11)				anu = await getBuffer(`https://onlydevcity.xyz/HekerSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'babuserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}babu ArnandoGanz*`)				reply(ind.wait())				ct = body.slice(10)				anu = await getBuffer(`https://onlydevcity.xyz/BabuSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'ffserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}ffserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(8)				anu = await getBuffer(`https://onlydevcity.xyz/EpepSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'bucinserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}ffserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(11)				anu = await getBuffer(`https://onlydevcity.xyz/BucinSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'bocilepepserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}ffserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(15)				anu = await getBuffer(`https://onlydevcity.xyz/CilEpepSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'gayserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}ffserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(9)				anu = await getBuffer(`https://onlydevcity.xyz/GaySerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'pacarserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}ffserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(11)				anu = await getBuffer(`https://onlydevcity.xyz/PacarSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'sadboyserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}ffserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(12)				anu = await getBuffer(`https://onlydevcity.xyz/SadBoySerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'surgaserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}ffserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(11)				anu = await getBuffer(`https://onlydevcity.xyz/SurgaSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'pinterserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}ffserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(12)				anu = await getBuffer(`https://onlydevcity.xyz/PintarSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'badgirlserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}badgirlserti ${pushname}`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/BadGirlSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'badboyserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}badboyserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(12)				anu = await getBuffer(`https://onlydevcity.xyz/BadBoySerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'goodgirlserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}goodgirlserti ${pushname}`)				reply(ind.wait())				ct = body.slice(14)				anu = await getBuffer(`https://onlydevcity.xyz/GoodGirlSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'goodboyserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}goodboyserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/GoodBoySerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'editorberkelasserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}editodberkelasserti ${pushname}`)				reply(ind.wait())				ct = body.slice(20)				anu = await getBuffer(`https://onlydevcity.xyz/EditorBerkelasSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'goodlookingserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}goodlookingserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(17)				anu = await getBuffer(`https://onlydevcity.xyz/GoodLookingSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'fucekboyserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}fucekboyserti ArnandoGanz`)				reply(ind.wait())				ct = body.slice(14)				anu = await getBuffer(`https://onlydevcity.xyz/FucekBoySerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'jametserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}fucekboyserti ${pushname}`)				reply(ind.wait())				ct = body.slice(11)				anu = await getBuffer(`https://onlydevcity.xyz/JametSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'youtuberserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}youtuberserti MrG{108P}`)				reply(ind.wait())				ct = body.slice(14)				anu = await getBuffer(`https://onlydevcity.xyz/YoutuberSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'fftourserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}fftourserti MrG{108P}`)				reply(ind.wait())				ct = body.slice(12)				anu = await getBuffer(`https://onlydevcity.xyz/FFSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'fftourserti2': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}fftourserti2 MrG{108P}`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/FFSerti2/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'fftourserti3': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}fftourserti3 MrG{108P}`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/FFSerti3/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'fftourserti4': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}fftourserti4 MrG{108P}`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/FFSerti4/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'fftourserti5': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}fftourserti5 MrG{108P}`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/FFSerti5/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'mltourserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}mltourserti MrG{108P}`)				reply(ind.wait())				ct = body.slice(12)				anu = await getBuffer(`https://onlydevcity.xyz/MLTourSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'mltourserti2': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}mltourserti2 MrG{108P}`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/MLTourSerti2/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'mltourserti3': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}mltourserti3 MrG{108P}`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/MLTourSerti3/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'mltourserti4': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}mltourserti4 MrG{108P}`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/MLTourSerti4/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'mltourserti5': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}mltourserti5 MrG{108P}`)				reply(ind.wait())				ct = body.slice(13)				anu = await getBuffer(`https://onlydevcity.xyz/MLTourSerti5/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'pubgtourserti': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}pubgtourserti MrG{108P}`)				reply(ind.wait())				ct = body.slice(14)				anu = await getBuffer(`https://onlydevcity.xyz/PubgTourSerti/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'pubgtourserti2': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}pubgtourserti2 MrG{108P}`)				reply(ind.wait())				ct = body.slice(15)				anu = await getBuffer(`https://onlydevcity.xyz/PubgTourSerti2/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'pubgtourserti3': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}pubgtourserti3 MrG{108P}`)				reply(ind.wait())				ct = body.slice(15)				anu = await getBuffer(`https://onlydevcity.xyz/PubgTourSerti3/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'pubgtourserti4': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}pubgtourserti4 MrG{108P}`)				reply(ind.wait())				ct = body.slice(15)				anu = await getBuffer(`https://onlydevcity.xyz/PubgTourSerti4/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				break				case 'pubgtourserti5': 								// ⚠️ Case by MrG{108P}&YogiPw				//UPDATE MRG{108P}				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}pubgtourserti5 MrG{108P}`)				reply(`[❕] Loading`)				ct = body.slice(15)				anu = await getBuffer(`https://onlydevcity.xyz/PubgTourSerti5/img.php?nama=${ct}`)				baby.sendMessage(from, anu, image, { quoted: mek, caption: 'Subscribe MrG{108P}' })				breakcase 'cemetery': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(9)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev5?text=${ct}&theme=cemetery&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break				case 'fakeaddress': //UPDATE FITUR				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/fakedata?country=en&apikey=BeliApikey`,{method :'get'})				teks = `➸ *Nama* : ${anu.result.name}\n*➸ Birthday :* ${anu.result.birthday}\n*➸ Address :* ${anu.result.address}\n*➸ City :* ${anu.result.city}\n*➸ Region :* ${anu.result.region}\n*➸ Country :* ${anu.result.country}\n*➸ Zip Code :* ${anu.result.zip}\n*➸ Phone Number :* ${anu.result.phone_number}\n*➸ Username :* ${anu.result.username}\n*➸ Password :* ${anu.result.password}\n*➸ Email :* ${anu.result.email}`				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'battlefield': //UPDATE FITUR				if (args.length < 1) return reply(`textnya mana om?`)									ct = body.slice(12)				ll1 = ct.split("|")[0];				ll2 = ct.split("|")[1];				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/game?text=${ll1}&text2=${ll2}&theme=battlefield&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'googlesearch': //UPDATE FITUR					if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(14)				ll1 = ct.split("|")[0];                ll2 = ct.split("|")[1];				ll3 = ct.split("|")[2];				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker?text=${ll1}&text2=${ll2}&text3=${ll3}&theme=google-suggestion&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'glitch': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(7)				ll1 = ct.split("|")[0];                ll2 = ct.split("|")[1];				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker?text=${ll1}&text2=${ll2}&theme=glitch&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'pubglogo': //UPDATE FITUR				if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(9)				ll1 = ct.split("|")[0];                ll2 = ct.split("|")[1];				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/game?text=${ll1}&text2=${ll2}&theme=pubg&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'butterfly': //UPDATE FITUR				if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro11?text=${ct}&theme=butterfly&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'hbd': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(4)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro10?text=${ct}&theme=birthday&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'shine': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(6)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro10?text=${ct}&theme=shinetext&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'thenight': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(9)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro9?text=${ct}&theme=thenight&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'rainbow': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(8)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro9?text=${ct}&theme=rainbow3d&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'love': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(5)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev4?text=${ct}&theme=lovemessage&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		   case 'burnpaper': //UPDATE FITUR					if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev4?text=${ct}&theme=burnpaper&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'textonecup': //UPDATE FITUR					if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(11)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev3?text=${ct}&theme=textonecup&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'textsky': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					url = body.slice(8)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev3?text=${url}&theme=textsky&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'nature': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(7)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev2?text=${ct}&theme=nature&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'rosegold': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(7)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev2?text=${ct}&theme=rosegold&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'nature3d': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(9)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev1?text=${ct}&theme=nature3d&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'ocean': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(6)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev1?text=${ct}&theme=underwater-ocean&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'woodheart': //UPDATE FITUR					if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev?text=${ct}&theme=woodheart&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'summertext': //UPDATE FITUR					if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(11)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev?text=${ct}&theme=summertext&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'underglass': //UPDATE FITUR					if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(11)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev5?text=${ct}&theme=underglass&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'cemetery': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(9)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev5?text=${ct}&theme=cemetery&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'royallock': //UPDATE FITUR					if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev6?text=${ct}&theme=royallock&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'coffecup': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(9)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/senja?text=${ct}&theme=coffee-cup&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'coffecup2': //UPDATE FITUR					if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/senja?text=${ct}&theme=coffee-cup2&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'neon': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(5)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/metallic?text=${ct}&theme=neon&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'glow': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(5)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/senja?text=${ct}&theme=glow&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'summer': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(7)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/alam?text=${ct}&theme=summer&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'flower': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(6)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/alam?text=${ct}&theme=flower&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break			case 'grandient': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro6?text=${ct}&theme=grandient&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break			case 'embroidery': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(11)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro7?text=${ct}&theme=embroidery&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break			case 'funnycup': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(9)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/pro4?text=${ct}&theme=funnycup&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break			case 'orchids': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(11)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/pro5?text=${ct}&theme=orchids-flower&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break			case 'smoke2': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(7)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/pro5?text=${ct}&theme=smoke2&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'loveone': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(8)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/pro3?text=${ct}&theme=loveone&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'watermelon': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(11)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/odc1?text=${ct}&theme=watermelon&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'grafity': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(8)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/odc2?text=${ct}&theme=grafity&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break			case 'whitecube': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/odc1?text=${ct}&theme=whitecube&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break				case 'glowingtext': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(12)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/odc2?text=${ct}&theme=glowingtext&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break			case 'blackstyle': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(11)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/odc3?text=${ct}&theme=blackstyle&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})					break		case 'crispchromed': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(12)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/odc3?text=${ct}&theme=crisp-chromed&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})				break		case 'smoke': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(6)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/pro3?text=${ct}&theme=smoke&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})					break		case 'onesilk': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(8)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/pro3?text=${ct}&theme=onesilk&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})					break			case 'glowing': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(8)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro1?text=${ct}&theme=glowing&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})					break				case 'heart': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(6)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/pro?text=${ct}&theme=heart&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})					break				case 'wolf': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(5)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textmaker/pro?text=${ct}&theme=wolf-metal&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})					break				case 'candy': //UPDATE FITUR								if (args.length < 1) return reply(`textnya mana om?`)				ct = body.slice(6)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro7?text=${ct}&theme=candy&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih kak'})					breakcase 'hartatahta':		 // Update 	MrG{108P}*			      //UPDATE MRG{108P}	if (isLimit(sender)) return reply(ind.limitend(pusname))	if (isBanned) return reply('Maaf kamu sudah terbenned!')	if (args.length < 1) return reply(ind.wrongf())		bh = body.slice(12)		reply(ind.wait())		bh = await getBuffer(`https://api.vhtear.com/hartatahta?text=${bh}&apikey=BeliApikeyngab`)		baby.sendMessage(from, bh, image, {caption: 'Alay bet luh bangke..', quoted: mek})				await limitAdd(sender)				break            case 'hartatata2':				 		 // Update 	MrG{108P}*		        //UPDATE MRG{108P}	if (isLimit(sender)) return reply(ind.limitend(pusname))	if (isBanned) return reply('Maaf kamu sudah terbenned!')	if (args.length < 1) return reply(ind.wrongf())		bh = body.slice(12)		reply(ind.wait())		bh = await getBuffer(`https://api.vhtear.com/hartatahta?text=${bh}&apikey=BeliApikeyngab`)		baby.sendMessage(from, bh, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break     		case 'hartatata3': // Update MrG{108P*		   //UPDATE MRG{108P}	if (isLimit(sender)) return reply(ind.limitend(pusname))	if (isBanned) return reply('Maaf kamu sudah terbenned!')	if (args.length < 1) return reply(ind.wrongf())		bh = body.slice(12)		reply(ind.wait())		bh = await getBuffer(`https://api.vhtear.com/hartatahta?text=${bh}&apikey=BeliApikeyngab`)		baby.sendMessage(from, bh, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break     case 'coffetext':         if (isBanned) return reply(nad.baned())				//UPDATE MRG{108P}					if (isLimit(sender)) return reply(nad.limitend(pusname))					if (args.length < 1) return reply(`「❗」Contoh : ${prefix}blackpink Ramlan`)					coff = body.slice(11)					mhe = await fetchJson(`https://api.shizukaa.xyz/api/coffie?apikey=itsmeiky633&text=${coff}`)					reply(ind.wait())					atu = await getBuffer(mhe.result.url)					baby.sendMessage(from, atu, image, {quoted: mek})					await limitAdd(sender)					break case 'gtav'://UPDATE MRG{108P}var imgbb = require('imgbb-uploader')if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {  ted = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: mek  reply(ind.wait())  owgi = await baby.downloadAndSaveMediaMessage(ted)  tels = body.slice(7)  anu = await imgbb("08579d070df9a07cb1c2ee565aece767", owgi)  hedhe = await getBuffer(`https://videfikri.com/api/textmaker/gtavposter/?urlgbr=${anu.display_url}`) baby.sendMessage(from, hedhe, image, {quoted:mek})} else {  reply('reply imagenya kak!')}break			case 'gay'://UPDATE MRG{108P}var imgbb = require('imgbb-uploader')if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {  ger = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: mek  reply(ind.wait())  owgi = await baby.downloadAndSaveMediaMessage(ger)  anu = await imgbb("08579d070df9a07cb1c2ee565aece767", owgi)  teks = `${anu.display_url}`  ranp = getRandom('.gif')  rano = getRandom('.webp')  anu1 = `https://some-random-api.ml/canvas/gay?avatar=${teks}`  exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {fs.unlinkSync(ranp)if (err) return reply(mess.error.stick)nobg = fs.readFileSync(rano)baby.sendMessage(from, nobg, sticker, {  quoted: mek})fs.unlinkSync(rano)  })} else {  reply('Gunakan foto!')}break	case 'nightbeach'://UPDATE MRG{108P}var imgbb = require('imgbb-uploader')if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {  ted = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: mek  reply(ind.wait())  owgi = await baby.downloadAndSaveMediaMessage(ted)  tels = body.slice(7)  anu = await imgbb("08579d070df9a07cb1c2ee565aece767", owgi)  hehpe = await getBuffer(`https://videfikri.com/api/textmaker/nightbeach/?urlgbr=${anu.display_url}`) baby.sendMessage(from, hehpe, image, {quoted:mek})} else {  reply('reply imagenya kak!')}break	case 'laptop'://UPDATE MRG{108P}var imgbb = require('imgbb-uploader')if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {  ted = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: mek  reply(ind.wait())  owgi = await baby.downloadAndSaveMediaMessage(ted)  tels = body.slice(7)  anu = await imgbb("08579d070df9a07cb1c2ee565aece767", owgi)  dhehe = await getBuffer(`https://videfikri.com/api/textmaker/customwp/?urlgbr=${anu.display_url}`) baby.sendMessage(from, dhehe, image, {quoted:mek})} else {  reply('reply imagenya kak!')}break	case 'linephoto'://UPDATE MRG{108P}var imgbb = require('imgbb-uploader')if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {  ted = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: mek  reply(ind.wait())  owgi = await baby.downloadAndSaveMediaMessage(ted)  tels = body.slice(7)  anu = await imgbb("08579d070df9a07cb1c2ee565aece767", owgi)  hehet = await getBuffer(`https://videfikri.com/api/textmaker/3dlinephoto/?urlgbr=${anu.display_url}`) baby.sendMessage(from, hehet, image, {quoted:mek})} else {  reply('reply imagenya kak!')}break	case 'raindrop'://UPDATE MRG{108P}var imgbb = require('imgbb-uploader')if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {  ted = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: mek  reply(ind.wait())  owgi = await baby.downloadAndSaveMediaMessage(ted)  tels = body.slice(7)  anu = await imgbb("08579d070df9a07cb1c2ee565aece767", owgi)  hehre = await getBuffer(`https://videfikri.com/api/textmaker/raindrop/?urlgbr=${anu.display_url}`) baby.sendMessage(from, hehre, image, {quoted:mek})} else {  reply('reply imagenya kak!')}breakcase 'sketch'://UPDATE MRG{108P}var imgbb = require('imgbb-uploader')if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {  ted = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: mek  reply(ind.wait())  owgi = await baby.downloadAndSaveMediaMessage(ted)  tels = body.slice(7)  anu = await imgbb("08579d070df9a07cb1c2ee565aece767", owgi)  hehae = await getBuffer(`https://videfikri.com/api/textmaker/pencil/?urlgbr=${anu.display_url}`) baby.sendMessage(from, hehae, image, {quoted:mek})} else {  reply('reply imagenya kak!')}breakcase 'crossgun'://UPDATE MRG{108P}var imgbb = require('imgbb-uploader')if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {  ted = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo: mek  reply(ind.wait())  owgi = await baby.downloadAndSaveMediaMessage(ted)  tels = body.slice(7)  anu = await imgbb("08579d070df9a07cb1c2ee565aece767", owgi)  haehe = await getBuffer(`https://videfikri.com/api/textmaker/crossgun/?urlgbr=${anu.display_url}`) baby.sendMessage(from, haehe, image, {quoted:mek})} else {  reply('reply imagenya kak!')}breakcase 'triggered':                    ini_url = args[0]                    ranp = getRandom('.gif')                    rano = getRandom('.webp')                    ini_buffer = `http://api.lolhuman.xyz/api/editor/triggered?apikey=Api-team&img=${ini_url}`                    exec(`wget "${ini_buffer}" -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {                        fs.unlinkSync(ranp)                        buff = fs.readFileSync(rano)                        baby.sendMessage(from, buff, sticker, { quoted: mek })                        fs.unlinkSync(rano)                    })                    breakcase 'attp':          //UPDATE MRG{108P}					if (args.length < 1) return reply(ind.wait())					teks = body.slice(5)					ranp = getRandom('.gif')					rano = getRandom('.webp')					anu = await fetchJson(`https://api.vhtear.com/textxgif?text=${teks}&apikey=BeliApikeyngab`, {method: 'get'})					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {					fs.unlinkSync(ranp)					buffer = fs.readFileSync(rano)					baby.sendMessage(from, buffer, sticker, {quoted: mek})					fs.unlinkSync(rano)					})					breakcase 'tts':				if (isBanned) return reply(mess.only.benned)    				if (!isUser) return reply(mess.only.userB)				if (isLimit(sender)) return reply(limits.limitend(pushname2))					if (args.length < 1) return baby.sendMessage(from, 'Kode bahasanya mana gan?\n Kalo Gatau Kode Bahasanya Apa Aja Ketik Saja *${prefix}bahasa*', text, {quoted: mek})					const tts = require('./lib/gtts')(args[0])					if (args.length < 2) return baby.sendMessage(from, 'Textnya mana gan?', text, {quoted: mek})					dtt = body.slice(9)					ranm = getRandom('.mp3')					rano = getRandom('.ogg')					dtt.length > 600					? reply('Textnya kebanyakan gan')					: gtts.save(ranm, dtt, function() {						exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {							fs.unlinkSync(ranm)							buff = fs.readFileSync(rano)							if (err) return reply('Gagal gan:(')							reply(ind.wait())							baby.sendMessage(from, buff, audio, {quoted: mek, ptt:true})							fs.unlinkSync(rano)						})					})					await limitAdd(sender) 					break				case 'hartatata2': //UPDATE FITUR         //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				bh = body.slice(12)				reply(ind.wait())				bh = await getBuffer(`https://api.zeks.xyz/api/hartatahta?text=${bh}&apikey=benbenz`)				baby.sendMessage(from, bh, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break				case 'bplogo':		        //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				vinz = body.slice(8)				reply(ind.wait())				anu = await fetchJson(`https://api.zeks.xyz/api/logobp?text=${vinz}&apikey=apivinz`)				buffer = await getBuffer(anu.result)				baby.sendMessage(from, buffer, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'cblackpink': //UPDATE MRG{108P}	        //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				bh = body.slice(11)				reply(ind.wait())				bh = await getBuffer(`http://lolhuman.herokuapp.com/api/textprome/blackpink?apikey=Api-team&text=${bh}`)				baby.sendMessage(from, bh, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break				case 'goldplay'://UPDATE         //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply(ind.wrongf())				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://lolhuman.herokuapp.com/api/ephoto1/goldplaybutton?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break				case 'trap'://UPDATE        //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				buffer = await getBuffer(`https://lolhuman.herokuapp.com/api/random/nsfw/trap?apikey=Api-team`, {method: 'get'})					baby.sendMessage(from, buffer, image, {quoted: mek })					await limitAdd(sender) 					break					case 'xnxxsearch':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} Japanese`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/xnxxsearch?apikey=Api-team&query=${query}`)                    get_result = get_result.result                    txt = ""                    for (var x in get_result) {                        txt += `Title : ${get_result[x].title}\n`                        txt += `Views : ${get_result[x].views}\n`                        txt += `Duration : ${get_result[x].duration}\n`                        txt += `Uploader : ${get_result[x].uploader}\n`                        txt += `Link : ${get_result[x].link}\n`                        txt += `Thumbnail : ${get_result[x].thumbnail}\n\n`                    }                    reply(txt)                    break                    case 'ytsearch':					//UPDATE MRG{108P}				if (isLimit(sender)) return reply(limitend(pushname2))					query = args.join(" ")					anu = await fetchJson(`http://api.lolhuman.xyz/api/ytsearch?apikey=Api-team&query=${query}`, {method: 'get'})					teks = '=================\n'					for (let i of anu.result) {						teks += `*Title* : ${i.title}\n*Id* : https://youtu.be/${i.videoId}\n*Published* : ${i.published}\n*Views* : ${h2k(i.views)}\n=================\n`					}					reply(teks.trim())					break									case 'jokerlogo':		//UPDATE                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply('Teks nya mana kak?')				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://api.lolhuman.xyz/api/textprome/jokerlogo?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {quoted: mek})				await limitAdd(sender)				break											case 'bloodfrosted':		//UPDATE                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply('Teks nya mana kak?')				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://api.lolhuman.xyz/api/textprome/bloodfrosted?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {quoted: mek})				await limitAdd(sender)				break				case 'halloween':		//UPDATE                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply('Teks nya mana kak?')				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://api.lolhuman.xyz/api/textprome/halloween?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {quoted: mek})				await limitAdd(sender)				break				case 'firework':		//UPDATE                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply('Teks nya mana kak?')				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://api.lolhuman.xyz/api/textprome/fireworksparkle?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {quoted: mek})				await limitAdd(sender)				break				case 'hororblood':		//UPDATE                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (args.length < 1) return reply('Teks nya mana kak?')				ct = body.slice(10)				reply(ind.wait())				ct = await getBuffer(`http://api.lolhuman.xyz/api/textprome/horrorblood?apikey=Api-team&text=${ct}`)				baby.sendMessage(from, ct, image, {quoted: mek})				await limitAdd(sender)				break		case 'thunder':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply(ind.wrongf())				bhaine = body.slice(9)				reply(ind.wait())				anu = await fetchJson(`https://api.zeks.xyz/api/thundertext?text=${bhaine}&apikey=apivinz`)				buffer = await getBuffer(anu.result)				baby.sendMessage(from, buffer, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'imgmaker':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply('Url png/jpg mana kak')				ainez = body.slice(10)				reply(ind.wait())				anu = await fetchJson(`http://lolhuman.herokuapp.com/api/quotemaker?apikey=Api-team&text=${ainez}`, {method: 'get'})				buffer = await getBuffer(anu.result)				baby.sendMessage(from, buffer, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break		case 'calendermaker':				 //UPDATE MRG{108P}			                 //UPDATE MRG{108P}				if (isLimit(sender)) return reply(ind.limitend(pusname))				if (isBanned) return reply('Maaf kamu sudah terbenned!')				if (args.length < 1) return reply('Url png/jpg mana kak')				ainez2 = body.slice(15)				reply(ind.wait())				anu = await fetchJson(`https://api.zeks.xyz/api/calendar?img=${ainez2}&apikey=apivinz`, {method: 'get'})				buffer = await getBuffer(anu.result)				baby.sendMessage(from, buffer, image, {caption: 'Nih kak udah jadi..', quoted: mek})				await limitAdd(sender)				break]=====> OWNER MENU <=====[*/                case 'listnotoxic':                    let lbw = `Ini adalah list BAD WORD\nTotal : ${bad.length}\n`                    for (let i of bad) {                        lbw += `➸ ${i.replace(bad)}\n`                    }                    await reply(lbw)                    breakcase 'addnotoxic':                    if (!isOwner) return reply(ind.ownerb())                    if (!isGroupAdmins) return reply(ind.admin())                    if (args.length < 1) return reply( `Kirim perintah ${prefix}addnotoxic [kata kasar]. contoh ${prefix}addnotoxic bego`)                    const add = body.slice(12)                  .push(bw)                    fs.writeFileSync('./database/group/bad.json', JSON.stringify(bad))                    reply('Success Menambahkan Bad Word!')                    break                case 'dellnotoxic':                    if (!isOwner) return reply(ind.ownerb())                    if (!isGroupAdmins) return reply(ind.admin())                    if (args.length < 1) return reply( `Kirim perintah ${prefix}addnotoxic [kata kasar]. contoh ${prefix}addnotoxic bego`)                    let dbw = body.slice(12)                    bad.splice(dbw)                    fs.writeFileSync('./database/group/bad.json', JSON.stringify(bad))                    reply('Success Menghapus No Toxic')                    breakcase 'notoxic':                    if (!isGroup) return reply(ind.groupo())                if (!isGroupAdmins) return reply(ind.admin())                if (args.length < 1) return reply('Boo :??')                if (args[0] === 'enable') {                 return reply('*fitur NoToxic sudah aktif sebelum nya*')                 	   badword.push(from)                 	   fs.writeFileSync('./database/group/badword.json', JSON.stringify(badword))                  	   reply(`badword is enable`)              	  } else if (args[0] === 'disable') {                  	  badword.splice(from, 1)                 	   fs.writeFileSync('./database/group/badword.json', JSON.stringify(badword))                 	    reply(`badword is disable`)             	   } else {                 	   reply(ind.satukos())                	}                    break                case 'addprem':					if (!isOwner) return reply(ind.ownerb())					addp = body.slice(10)					premium.push(`${addp}@s.whatsapp.net`)					fs.writeFileSync('./database/user/premium.json', JSON.stringify(premium))					reply(`Berhasil Menambahkan wa.me/${addp} Ke Daftar Premium`)					break				case 'dellprem':					if (!isOwner) return reply(ind.ownerb())					delp = body.slice(11)					premium.splice(`${delp}@s.whatsapp.net`, 1)					fs.writeFileSync('./database/user/premium.json', JSON.stringify(premium))					reply(`Berhasil Menghapus wa.me/${delp} Dari Daftar Premium`)					break									case 'bc':					baby.updatePresence(from, Presence.composing) 				     if (!isOwner) return reply(ind.ownerb())					if (args.length < 1) return reply('.......')					anu = await baby.chats.all()					if (isMedia && !mek.message.videoMessage || isQuotedImage) {						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek						buff = await baby.downloadMediaMessage(encmedia)						for (let _ of anu) {							baby.sendMessage(_.jid, buff, image, {caption: `*「 REM BOT 」*\n\n${body.slice(4)}`})						}						reply('')					} else {						for (let _ of anu) {							sendMess(_.jid, `*「 REM BOT 」*\n\n${body.slice(4)}`)						}						reply('*「 SUKSES BOSKU 」*')					}					break				case 'bcgc':				     if (!isOwner) return reply(ind.ownerb())					if (args.length < 1) return reply('Teksnya mana bosku >_<')					anu = await groupMembers					nom = mek.participant					if (isMedia && !mek.message.videoMessage || isQuotedImage) {						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek						buff = await baby.downloadMediaMessage(encmedia)						for (let _ of anu) {							baby.sendMessage(_.jid, buff, image, {caption: `*「 BC GROUP 」*\n\n➸ Dari Grup : ${groupName}\n➸ Pengirim : wa.me/${(sender.split('@')[0])}\n➸ Pesan : ${body.slice(6)}`})						}						reply('*「 SUKSES BOSKU 」*')					} else {						for (let _ of anu) {							sendMess(_.jid, `*「 BC GROUP 」*\n\n➸ Dari Grup : ${groupName}\n➸ Pengirim : wa.me/${(sender.split('@')[0])}\n➸ Pesan : ${body.slice(6)}`)						}						reply('*「 SUKSES BOSKU 」*')					}					break					case 'setreply':					if (!isOwner) return reply(ind.ownerb())                    baby.updatePresence(from, Presence.composing) 					if (args.length < 1) return					cr = body.slice(10)					reply(`reply berhasil di ubah menjadi : ${cr}`)					await limitAdd(sender)					break				case 'setprefix':					if (args.length < 1) return					if (!isOwner) return reply(ind.ownerb())					prefix = args[0]					reply(`*「 SUKSES 」* Prefix jadi ➸ : ${prefix}`)					break				case 'clearall':					if (!isOwner) return reply(ind.ownerb())					anu = await baby.chats.all()					baby.setMaxListeners(25)					for (let _ of anu) {						baby.deleteChat(_.jid)					}					reply(ind.clears())					break			       case 'block':				 baby.updatePresence(from, Presence.composing) 				 baby.chatRead (from)					if (!isGroup) return reply(ind.groupo())					if (!isOwner) return reply(ind.ownerb())					baby.blockUser (`${body.slice(7)}@c.us`, "add")					baby.sendMessage(from, `perintah Diterima, memblokir ${body.slice(7)}@c.us`, text)					break                    case 'unblock':					if (!isGroup) return reply(ind.groupo())					if (!isOwner) return reply(ind.ownerb())				    baby.blockUser (`${body.slice(9)}@c.us`, "remove")					baby.sendMessage(from, `Perintah Diterima, membuka ${body.slice(9)}@c.us`, text)					break   									case 'setppbot':					if (!isOwner) return reply(ind.ownerb())				    baby.updatePresence(from, Presence.composing) 					if (!isQuotedImage) return reply(`Kirim gambar dengan caption ${prefix}setbotpp atau tag gambar yang sudah dikirim`)					enmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await baby.downloadAndSaveMediaMessage(enmedia)					await baby.updateProfilePicture(botNumber, media)					reply('Makasih profil barunya bosku😗')					break				case 'clone':					if (!isGroup) return reply(ind.groupo())					if (!isOwner) return reply(ind.ownerg())					if (args.length < 1) return reply(' *TAG YANG MAU DI CLONE!!!* ')					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Tag cvk')					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid[0]					let { jid, id, notify } = groupMembers.find(x => x.jid === mentioned)					try {						pp = await baby.getProfilePicture(id)						buffer = await getBuffer(pp)						baby.updateProfilePicture(botNumber, buffer)						mentions(`Foto profile Berhasil di perbarui menggunakan foto profile @${id.split('@')[0]}`, [jid], true)					} catch (e) {						reply(ind.stikga())					}					await limitAdd(sender)					break                case 'ban':					if (!isOwner) return reply(ind.ownerb())					bnnd = body.slice(6)					ban.push(`${bnnd}@s.whatsapp.net`)					fs.writeFileSync('./database/user/banned.json', JSON.stringify(ban))					reply(`Nomor wa.me/${bnnd} telah dibanned !`)					break				case 'unban':					if (!isOwner) return reply(ind.ownerb())					bnnd = body.slice(8)					ban.splice(`${bnnd}@s.whatsapp.net`, 1)					fs.writeFileSync('./database/user/banned.json', JSON.stringify(ban))					reply(`Nomor wa.me/${bnnd} telah di unban!`)					breakbreak case 'sound1':satu = fs.readFileSync('./assets/sound1.mp3');baby.sendMessage(from, satu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound2':dua = fs.readFileSync('./assets/sound2.mp3');baby.sendMessage(from, dua, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound3':tiga = fs.readFileSync('./assets/sound3.mp3');baby.sendMessage(from, tiga, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound6':enam = fs.readFileSync('./assets/sound6.mp3');baby.sendMessage(from, enam, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound7':if (!isPrem) return reply(ind.premium())tujuh = fs.readFileSync('./assets/sound7.mp3');baby.sendMessage(from, tujuh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound8':delapan = fs.readFileSync('./assets/sound8.mp3');baby.sendMessage(from, delapan, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound9':sembilan = fs.readFileSync('./assets/sound9.mp3');baby.sendMessage(from, sembilan, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound10':sepuluh = fs.readFileSync('./assets/sound10.mp3');baby.sendMessage(from, sepuluh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound11':sebelas = fs.readFileSync('./assets/sound11.m4a');baby.sendMessage(from, sebelas, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound12':duabelas = fs.readFileSync('./assets/sound12.mp3');baby.sendMessage(from, duabelas, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound13':tigabelas = fs.readFileSync('./assets/sound13.mp3');baby.sendMessage(from, tigabelas, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound14':empatbelas = fs.readFileSync('./assets/sound14.mp3');baby.sendMessage(from, empatbelas, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound15':limabelas = fs.readFileSync('./assets/sound15.mp3');baby.sendMessage(from, limabelas, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound16':enambelas = fs.readFileSync('./assets/sound16.mp3');baby.sendMessage(from, enambelas, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound17':tujuhbelas = fs.readFileSync('./assets/sound17.mp3');baby.sendMessage(from, tujuhbelas, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound18':delapanbelas = fs.readFileSync('./assets/sound18.mp3');baby.sendMessage(from, delapanbelas, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound19':sembilanbelas = fs.readFileSync('./assets/sound19.mp3');baby.sendMessage(from, sembilanbelas, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound20':duapuluh = fs.readFileSync('./assets/sound20.mp3');baby.sendMessage(from, duapuluh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound21':duasatu = fs.readFileSync('./assets/sound21.mp3');baby.sendMessage(from, duasatu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound22':duadua = fs.readFileSync('./assets/sound22.mp3');baby.sendMessage(from, duadua, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound23':duatiga = fs.readFileSync('./assets/sound23.m4a');baby.sendMessage(from, duatiga, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound24':duaempat = fs.readFileSync('./assets/sound24.mp3');baby.sendMessage(from, duaempat, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound25':dualima = fs.readFileSync('./assets/sound25.mp3');baby.sendMessage(from, dualima, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound26':duaenam = fs.readFileSync('./assets/sound26.m4a');baby.sendMessage(from, duaenam, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound27':duatujuh = fs.readFileSync('./assets/sound27.mp3');baby.sendMessage(from, duatujuh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound28':duadelapan = fs.readFileSync('./assets/sound28.mp3');baby.sendMessage(from, duadelapan, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound29':duasembilan = fs.readFileSync('./assets/sound29.mp3');baby.sendMessage(from, duasembilan, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound30':tigapuluh = fs.readFileSync('./assets/sound30.mp3');baby.sendMessage(from, tigapuluh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound31':tigasatu = fs.readFileSync('./assets/sound31.mp3');baby.sendMessage(from, tigasatu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound32':tigadua = fs.readFileSync('./assets/sound32.mp3');baby.sendMessage(from, tigadua, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound33':tigatiga = fs.readFileSync('./assets/sound33.mp3');baby.sendMessage(from, tigatiga, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound34':tigaempat = fs.readFileSync('./assets/sound34.mp3');baby.sendMessage(from, tigaempat, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound35':tigalima = fs.readFileSync('./assets/sound35.mp3');baby.sendMessage(from, tigalima, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound36':tigaenam = fs.readFileSync('./assets/sound36.mp3');baby.sendMessage(from, tigaenam, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound37':tigatujuh = fs.readFileSync('./assets/sound37.mp3');baby.sendMessage(from, tigatujuh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound38':tigadelapan = fs.readFileSync('./assets/sound38.mp3');baby.sendMessage(from, tigadelapan, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound39':tigasembilan = fs.readFileSync('./assets/sound39.mp3');baby.sendMessage(from, tigasembilan, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound40':empatpuluh = fs.readFileSync('./assets/sound40.mp3');baby.sendMessage(from, empatpuluh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound41':empatsatu = fs.readFileSync('./assets/sound41.mp3');baby.sendMessage(from, empatsatu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound42':empatdua = fs.readFileSync('./assets/sound42.mp3');baby.sendMessage(from, empatdua, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound43':empattiga = fs.readFileSync('./assets/sound43.mp3');baby.sendMessage(from, empattiga, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound44':empatempat = fs.readFileSync('./assets/sound44.mp3');baby.sendMessage(from, empatempat, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound45':empatlima = fs.readFileSync('./assets/sound45.mp3');baby.sendMessage(from, empatlima, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound46':empatenam = fs.readFileSync('./assets/sound46.mp3');baby.sendMessage(from, empatenam, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound47':empattujuh = fs.readFileSync('./assets/sound47.mp3');baby.sendMessage(from, empattujuh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound48':empatdelapan = fs.readFileSync('./assets/sound48.mp3');baby.sendMessage(from, empatdelapan, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound49':empatsembilan = fs.readFileSync('./assets/sound49.mp3');baby.sendMessage(from, empatsembilan, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound50':limapuluh = fs.readFileSync('./assets/sound50.mp3');baby.sendMessage(from, limapuluh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'bernyanyi':const bernyanyi = fs.readFileSync('./assets/bernyanyi.mp3');baby.sendMessage(from, bernyanyi, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'tratata':const tratata = fs.readFileSync('./assets/tratata.mp3');baby.sendMessage(from, tratata, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'kebenaran':const kebenaran = fs.readFileSync('./assets/kebenaran.mp3');baby.sendMessage(from, kebenaran, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sad':const sad = fs.readFileSync('./assets/sad.mp3');baby.sendMessage(from, sad, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sad2':const sad1 = fs.readFileSync('./assets/sad1.mp3');baby.sendMessage(from, sad1, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sad3':const sad3 = fs.readFileSync('./assets/sad3.mp3');baby.sendMessage(from, sad3, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'iri':const irimp3 = fs.readFileSync('./assets/iri.mp3');baby.sendMessage(from, irimp3, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'pale':const pa = fs.readFileSync('assets/pale.mp3')baby.sendMessage(from, pa, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'gam2piri':const soun = fs.readFileSync('assets/sound.mp3')baby.sendMessage(from, soun, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})break case 'akusukakamu':satu = fs.readFileSync('./assets/sound1.mp3');baby.sendMessage(from, satu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'cidro2':tiga = fs.readFileSync('./assets/sound3.mp3');baby.sendMessage(from, tiga, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound4':empat = fs.readFileSync('./assets/sound4.mp3');baby.sendMessage(from, empat, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'sound5':lima = fs.readFileSync('./assets/sound5.mp3');baby.sendMessage(from, lima, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'candagodloking':enam = fs.readFileSync('./assets/sound6.mp3');baby.sendMessage(from, enam, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'babycute':  if (!isPrem) return reply(ind.premium())tujuh = fs.readFileSync('./assets/sound7.mp3');baby.sendMessage(from, tujuh, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})break													case 'wancak':                    ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/onecak?apikey=Api-team`)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek })                    breakcase 'wasted':                    ini_url = args[0]                    wasted = args[0]                    ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/editor/${wasted}?apikey=Api-team&img=${ini_url}`)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek })                    breakcase 'asupan':if (isBanned) return reply(mess.only.benned)                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/asupan?apikey=Api-team`)                    buffer = await getBuffer(get_result.result)                    baby.sendMessage(from, buffer, video, { quoted: mek, mimetype: Mimetype.mp4, filename: "asupan.mp4" })                    breakcase 'butterfly': // Update By RzkyO & ItsmeikyXSec404				  	if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro11?text=${ct}&theme=butterfly&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				breakcase '8bit': // UPDATE MRG{108P}				if (args.length < 1) return reply(`textnya mana om?`)			ct = body.slice(5)				ll1 = ct.split("|")[0];                ll2 = ct.split("|")[1];				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev13?text=${ll1}&text2=${ll2}&theme=8bit&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)    baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'ihh buriq'})				break				case 'hbd'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(4)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro10?text=${ct}&theme=birthday&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break				case 'shine'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(6)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro10?text=Itsmeiky&theme=shinetext&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'thenight'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(9)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro9?text=${ct}&theme=thenight&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'rainbow': //Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(8)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/pro9?text=${ct}&theme=rainbow3d&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'love'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(5)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev4?text=${ct}&theme=lovemessage&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'burnpaper'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev4?text=Itsmeiky&theme=burnpaper&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'textonecup'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(11)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev3?text=Itsmeiky&theme=textonecup&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'textsky'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(8)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev3?text=${ct}&theme=textsky&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'nature'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(7)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev2?text=${ct}&theme=nature&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'rosegold'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(7)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev2?text=${ct}&theme=rosegold&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'nature3d'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(9)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev1?text=${ct}&theme=nature3d&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'underglass'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(6)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev5?text=Itsmeiky&theme=underglass&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break		case 'woodheart'://Update fitur MrG{108P}								if (args.length < 1) return reply(`textnya mana om?`)					ct = body.slice(10)				reply(`[❕] Loading`)				anu = await fetchJson(`https://onlydevcity.herokuapp.com/api/textpro/onedev?text=${ct}&theme=woodheart&apikey=BeliApikey`,{method :'get'})				buffer = await getBuffer(anu.result.url)				baby.sendMessage(from, buffer, image, {quoted: mek, caption: 'nih kak'})				break  					case 'tupai':					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await baby.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.mp3')					exec(`ffmpeg -i ${media} -filter:a "atempo=0.5,asetrate=65100" ${ran}`, (err, stderr, stdout) => {						fs.unlinkSync(media)						if (err) return reply('Error!')						hah = fs.readFileSync(ran)						baby.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: mek})						fs.unlinkSync(ran)					})				breakcase 'blub':	                 if (!isQuotedAudio) return reply('Reply audio nya om')					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await client.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.mp3')					exec(`ffmpeg -i ${media} -filter:a "atempo=0.9,asetrate=95100" ${ran}`, (err, stderr, stdout) => {						fs.unlinkSync(media)						if (err) return reply('Error!')						hah = fs.readFileSync(ran)						baby.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: mek})						fs.unlinkSync(ran)					})				break					case 'bass':                 					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await baby.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.mp3')					exec(`ffmpeg -i ${media} -af equalizer=f=94:width_type=o:width=2:g=30 ${ran}`, (err, stderr, stdout) => {						fs.unlinkSync(media)						if (err) return reply('Error!')						hah = fs.readFileSync(ran)						baby.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: mek})						fs.unlinkSync(ran)					})				break				case 'terpesona':satu = fs.readFileSync('./assets/terpesona.mp3');baby.sendMessage(from, satu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'gajelas':satu = fs.readFileSync('./assets/gajelas.mp3');baby.sendMessage(from, satu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'ndabisabasaingris':satu = fs.readFileSync('./assets/ndabisabasaingris.mp3');baby.sendMessage(from, satu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'slow':					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await baby.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.mp3')					exec(`ffmpeg -i ${media} -filter:a "atempo=0.8,asetrate=44100" ${ran}`, (err, stderr, stdout) => {						fs.unlinkSync(media)						if (err) return reply('Error!')						hah = fs.readFileSync(ran)						baby.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: mek})						fs.unlinkSync(ran)					})				break								case 'kicktime':			if (isBanned) return reply(mess.only.benned)    				if (!isUser) return reply(mess.only.userB)					if (!isGroup) return reply(mess.only.group)					if (!isGroupAdmins) return reply(mess.only.admin)					if (!isBotGroupAdmins) return reply(mess.only.Badmin)					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Tag target yang ingin di tendang!')					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid					if (mentioned.length > 1) {						teks = 'Perintah di terima, mengeluarkan :\n'						for (let _ of mentioned) {							teks += `@${_.split('@')[0]}\n`						}						mentions(teks, mentioned, true)						 ba.groupRemove(from, mentioned)					} else {						setTimeout( () => {					mentions(`OTW BOS KU , SIAP BRO? : @${mentioned[0].split('@')[0]}`, mentioned, true)						}, 0) // 100 = 5s,					setTimeout( () => {					 baby.groupRemove(from, mentioned, {quoted: mek}) // ur cods					}, 30000) // 1000 = 5s,					setTimeout( () => {				 baby.sendMessage(from, 'SELAMAT TINGGAL', text) // ur cods					}, 20000) // 1000 = 5s,					setTimeout( () => {					 baby.sendMessage(from, '_UCAPKAN SELAMAT TINGGAL MWAH MWAH_…', text) // ur cods					}, 10000) // 1000 = 5s,					setTimeout( () => {					 baby.sendMessage(from, 'CIE KASIHAN MAU DI KICK', text) // ur cods					}, 1000) // 1000 = 5s,					setTimeout( () => {					 baby.sendMessage(from, 'SIAP SIAP REM BOT KICK NIH', text, { quoted: mek }) // ur cods					}, 0) // 1000 = 5s,					}					breakcase 'spamcall':          if (isBanned) return reply(nad.baned())          //UPDATE MRG{108P}          if (isLimit(sender)) return reply(nad.limitend(pusname))			call = `${body.slice(11)}`			anu = await fetchJson(`https://videfikri.com/api/call/?nohp=${call}`, {method: 'get'})			baby.sendMessage(from, `${anu.result.logs}`, text, {quoted: mek})			await limitAdd(sender) 			break  			case 'spamgmail':           if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}           if (isLimit(sender)) return reply(nad.limitend(pusname))			spam = `${body.slice(10)}`			anu = await fetchJson(`https://videfikri.com/api/spamemail/?email=${spam}&subjek=PT.PLN&pesan=Silahkan%20bayar%20tagihan%20listrik%20Anda`, {method: 'get'})			baby.sendMessage(from, `${anu.result.log_lengkap}`, text, {quoted: mek})			await limitAdd(sender) 			break 										case 'spamsms':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} 08303030303030`)                    nomor = args[0]                    await fetchJson(`http://api.lolhuman.xyz/api/sms/spam1?apikey=Api-team&nomor=${nomor}`)                    await fetchJson(`http://api.lolhuman.xyz/api/sms/spam2?apikey=Api-team&nomor=${nomor}`)                    await fetchJson(`http://api.lolhuman.xyz/api/sms/spam3?apikey=Api-team&nomor=${nomor}`)                    await fetchJson(`http://api.lolhuman.xyz/api/sms/spam4?apikey=Api-team&nomor=${nomor}`)                    await fetchJson(`http://api.lolhuman.xyz/api/sms/spam5?apikey=Api-team&nomor=${nomor}`)                    await fetchJson(`http://api.lolhuman.xyz/api/sms/spam6?apikey=Api-team&nomor=${nomor}`)                    await fetchJson(`http://api.lolhuman.xyz/api/sms/spam7?apikey=Api-team&nomor=${nomor}`)                    await fetchJson(`http://api.lolhuman.xyz/api/sms/spam8?apikey=Api-team&nomor=${nomor}`)                    reply("Success")                    breakcase 'dorking':				if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				reply(ind.wait())				dork = `${body.slice(9)}`					anu = await fetchJson(`https://api-anoncybfakeplayer.herokuapp.com/dorking?dork=${dork}`, {method: 'get'})					hasil = `${anu.result}`					baby.sendMessage(from, hasil, text, {quoted: mek})					await limitAdd(sender) 					break  				case 'encode64':			if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				encode64 = `${body.slice(10)}`				anu = await fetchJson(`https://api.i-tech.id/hash/bs64?key=${TechApi}&type=encode&string=${encode64}`, {method: 'get'})				baby.sendMessage(from, `${anu.result}`, text, {quoted: mek})					await limitAdd(sender) 					break 				case 'decode64':				if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				decode64 = `${body.slice(10)}`					anu = await fetchJson(`https://api.i-tech.id/hash/bs64?key=${TechApi}&type=decode&string=${decode64}`, {method: 'get'})					baby.sendMessage(from, `${anu.result}`, text, {quoted: mek})					await limitAdd(sender) 					break  				case 'decode32':				if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				decode32 = `${body.slice(10)}`					anu = await fetchJson(`https://api.i-tech.id/hash/bs32?key=${TechApi}&type=decode&string=${decode32}`, {method: 'get'})					baby.sendMessage(from, `${anu.result}`, text, {quoted: mek})					await limitAdd(sender) 					break  				case 'encode32':				if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				encode32 = `${body.slice(10)}`					anu = await fetchJson(`https://api.i-tech.id/hash/bs32?key=${TechApi}&type=encode&string=${encode32}`, {method: 'get'})					baby.sendMessage(from, `${anu.result}`, text, {quoted: mek})					await limitAdd(sender) 					break  				case 'encbinary':				if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				encbinary = `${body.slice(11)}`					anu = await fetchJson(`https://api.anoncybfakeplayer.com/api/binary/?encode=${encbinary}`, {method: 'get'})					baby.sendMessage(from, `${anu.result}`, text, {quoted: mek})					await limitAdd(sender) 					break  				case 'decbinary':				if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				decbin = `${body.slice(11)}`					anu = await fetchJson(`https://api.anoncybfakeplayer.com/api/binary/?decode=${decbin}`, {method: 'get'})					baby.sendMessage(from, `${anu.result}`, text, {quoted: mek})					await limitAdd(sender) 					break  				case 'encoctal':				if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				encoc = `${body.slice(10)}`					anu = await fetchJson(`https://api.anoncybfakeplayer.com/api/octal/?encode=${encoc}`, {method: 'get'})					baby.sendMessage(from, `${anu.result}`, text, {quoted: mek})					await limitAdd(sender)					break  				case 'decoctal':				if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				decoc = `${body.slice(10)}`					anu = await fetchJson(`https://api.anoncybfakeplayer.com/api/octal/?decode=${decoc}`, {method: 'get'})					baby.sendMessage(from, `${anu.result}`, text, {quoted: mek})					await limitAdd(sender) 					break  				case 'becrypt':				if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}				becry = `${body.slice(10)}`				anu = await fetchJson(`https://api.i-tech.id/hash/bcrypt?key=${TechApi}&string=${becry}`, {method: 'get'})				baby.sendMessage(from, `${anu.result}`, text, {quoted: mek})				await limitAdd(sender) 				break 					case 'hashidentifier':					if (isBanned) return reply(nad.baned())           //UPDATE MRG{108P}					  hash = `${body.slice(16)}`					  anu = await fetchJson(`https://freerestapi.herokuapp.com/api/v1/hash-identifier?hash=${hash}`)					  hasilhash = `Tipe: *${anu.hash_type}*\nChar Tipe: *${anu.char_type}*`					  baby.sendMessage(from, hasilhash, text, {quoted: mek})					  await limitAdd(sender)					  break case 'semoji':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} 😭`)                    emoji = args[0]                    try {                        emoji = encodeURI(emoji[0])                    } catch {                        emoji = encodeURI(emoji)                    }                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/smoji/${emoji}?apikey=Api-team`)                    baby.sendMessage(from, buffer, sticker, { quoted: mek })                    break                case 'fakedonald':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} LoL Human`)                    txt = args.join(" ")                    buffer = await getBuffer(`http://api.lolhuman.xyz/api/tweettrump?apikey=Api-team&text=${txt}`)                    baby.sendMessage(from, buffer, image, { quoted: mek })                    break                                      			    case 'stalkig':                   if (isBanned) return reply(nad.baned())                   //UPDATE MRG{108P}                   if (isLimit(sender)) return reply(nad.limitend(pusname))                     tess = body.slice(9)                     anu = await fetchJson(`https://api.shizukaa.xyz/api/igstalk?apikey=itsmeiky633&u=${tess}`, {method: 'get'})                     reply('「❗」Sabar Lagi Stalking IG nya kak')                     buffer = await getBuffer(anu.data.profilehd)                     hasil = `YAHAHA TELAH DI STALK BOS KU UNTUK USERNAME ${tess}*◯ Nama* : _${anu.data.fullname}_*◯ Jumlah Follower* : _${anu.data.follower}_*◯ Jumlah Following* : _${anu.data.following}_*◯ Biografi* : _${anu.data.bio}_`                    baby.sendMessage(from, buffer, image, {quoted: mek, caption: hasil})                    await limitAdd(sender)			       break				//lgiproses				case 'tesss':				if (isBanned) return reply(mess.only.benned)    				if (!isUser) return reply(mess.only.userB)					if (args.length < 1) return reply('mau apa om')					teks = body.slice(7)					if (teks.length > 8) return reply('Teksnya kepanjangan, maksimal 8 karakter')					reply(ind.wait())					anu = await fetchJson(`https://api-zeks.harispoppy.com/api/leavest?text=${teks}&apikey=RamlanID`)					buffer8 = await getBuffer(anu.result)					baby.sendMessage(from, buffer8, image, {quoted: mek})					break									case 'infomobil':				if (isBanned) return reply(mess.only.benned)    									if (args.length < 1) return reply('Masukan nama mobil!!')					ige = body.slice(9)					anu = await fetchJson(`https://api.vhtear.com/infomobil?merk=${ige}&apikey=BeliApikeyngab`, {method: 'get'})					buffer0 = await getBuffer(anu.result.image)					capt = `mobil Ditemukan!!\n\n*➸ title :* ${anu.result.title}\n*➸ harga :* ${anu.result.harga}\n*➸ kekurangan :* ${anu.result.kekurangan}\n*➸ kelebihan :* ${anu.result.kelebihan}`					baby.sendMessage(from, buffer0, image, {quoted: mek, caption: capt})					break									case 'playstore':				if (isBanned) return reply(mess.only.benned)    					kuji = body.slice(7)										anu = await getBuffer(`https://api.vhtear.com/playstore?query={kuji}&apikey=BeliApikeyngab`, {method: 'get'})					capty = `*➸ title :* ${anu.title}\n*➸ app_id :* ${anu.app_id}\n*➸ description :* ${anu.description}\n*➸ developer_id :* ${anu.developer_id}\n*➸ developer :* ${anu.developer}\n*➸ score :* ${anu.score}\n*➸ full_price :* ${anu.full_price}\n*➸ price :* ${anu.price}\n*➸ free :* ${anu.free}`					baby.sendMessage(from, anu, image, {quoted: mek, caption: capty})				breakcase 'desah':  if (!isPrem) return reply(ind.premium())satu = fs.readFileSync('./assets/desah.mp3');baby.sendMessage(from, satu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'fast':					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await baby.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.mp3')					exec(`ffmpeg -i ${media} -filter:a "atempo=1.63asetrate=44100" ${ran}`, (err, stderr, stdout) => {						fs.unlinkSync(media)						if (err) return reply('Error!')						hah = fs.readFileSync(ran)						baby.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: mek})						fs.unlinkSync(ran)					})				breakcase 'gemuk':					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await baby.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.mp3')					exec(`ffmpeg -i ${media} -filter:a "atempo=1.6,asetrate=22100" ${ran}`, (err, stderr, stdout) => {						fs.unlinkSync(media)						if (err) return reply('Error!')						hah = fs.readFileSync(ran)					baby.sendMessage(from, hah, audio, {mimetype: 'audio/mp4', ptt:true, quoted: mek})						fs.unlinkSync(ran)					})				break				case 'fasst':					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo					media = await baby.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.mp3/m4a/ptt')					exec(`ffmpeg -i ${media} -filter:a "atempo=1.4,asetrate=44100" ${ran}`, (err, stderr, stdout) => {						fs.unlinkSync(media)						if (err) return reply('NGEN(uh)')						hah = fs.readFileSync(ran)						baby.sendMessage(from, hah, audio, {mimetype: 'audio/mp3/ptt/mp4', ptt:true, quoted: mek})						fs.unlinkSync(ran)					})				break				                case 'tomp3':                if (isBanned) return reply(mess.only.benned)                                    	baby.updatePresence(from, Presence.composing) 					if (!isQuotedVideo) return reply('❌ reply videonya kak ❌')					reply(baby.wait)					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m'))					media = await baby.downloadAndSaveMediaMessage(encmedia)					ran = getRandom('.mp4')					exec(`ffmpeg -i ${media} ${ran}`, (err) => {						fs.unlinkSync(media)						if (err) return reply('❌ Gagal, pada saat mengkonversi video ke mp3 ❌')						bufferlkj = fs.readFileSync(ran)						baby.sendMessage(from, bufferlkj, audio, {mimetype: 'audio/mp4', quoted: mek})						fs.unlinkSync(ran)					})					break					case 'paplepap':satu = fs.readFileSync('./assets/PapLepap.mp3');baby.sendMessage(from, satu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})breakcase 'paplepapslow':satu = fs.readFileSync('./assets/PapLepapSlow.mp3');baby.sendMessage(from, satu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})break					case 'public':	                if (isBanned) return reply(mess.only.benned)    					 return reply					if (!isOwner) return reply('HANYA OWNER YANG DAPAT MENGGUNAKAN NYA BAKA')					if (args.length < 1) return reply('Pilih 1(Aktif) atau 2(Nonaktif) Sayang!')					if (Number(args[0]) === 1) {						if (isPublic) return reply('Sudah Aktif')						public.push(from)						fs.writeFileSync('./src/public.json', JSON.stringify(public))						reply('Sekarang semua anggota dapat mengirim perintah✔️')					} else if (Number(args[0]) === 0) {						public.splice(from, 1)						fs.writeFileSync('./src/public.json', JSON.stringify(public))						reply('Sekarang hanya owner dapat mengirim perintah✔️')					} else {						reply('Pilih 1(Aktif) atau 2(Nonaktif) Sayang!')					}					break								    case 'igstalk':                    if (isBanned) return reply(mess.only.benned)       					if (!isUser) return reply(mess.only.userB)   					if (!isPublic) return reply(mess.only.publikG)                     anu = await fetchJson(`https://mhankbarbar.tech/api/stalk?username=${body.slice(9)}&apiKey=IDxO1TFYnKADlX4pxcHa`, {method: 'get'})                     buffer = await getBuffer(anu.Profile_pic)                     reply(ind.wait())                     hasil = `「 *INSTAGRAM STALKER* 」\n\n• Link: https://www.instagram.com/${anu.Username}\n• Fullname : ${anu.Name}\n• Following : ${anu.Jumlah_Followers}\n• Followers : ${anu.Jumlah_Following}\n• Jumlah Postingan: ${anu.Jumlah_Post}\n• Bio : ${anu.Biodata}`                    baby.sendMessage(from, buffer, image, {quoted: mek, caption: hasil})                    breakcase 'tiktokmusic':                    if (args.length == 0) return reply(`Example: ${prefix + command} https://vt.tiktok.com/ZSwWCk5o/`)                    ini_link = args[0]                    get_audio = await getBuffer(`http://api.lolhuman.xyz/api/tiktokmp3?apikey=Api-team&url=${ini_link}`)                    baby.sendMessage(from, get_audio, audio, { mimetype: Mimetype.mp4Audio, quoted: mek })                    breakcase 'tiktod':			  case 'tiktok':					case 'tiktok':				if (args.length < 1) return reply('Urlnya mana um?')                  									if(!isUrl(args[0]) && !args[0].includes('youtu')) return reply('URL NYA TIDAK VALID KAK')                    url = args[0]					url =`http://api.lolhuman.xyz/api/tiktok?apikey=Api-team&url=https://vt.tiktok.com/ZSwWCk5o/${url}`					result = await fetchJson(url)                    buffer = await getBuffer(result.result.link)                    baby.sendMessage(from, buffer, video, { quoted: mek })                    break          case 'profiltiktok':			    reply(ind.wait())                    anu = await fetchJson(`https://api.vhtear.com/tiktokprofile?query=${body.slice(14)}&apikey=BeliApikeyngab`, {method: 'get'})			        tiktok = await getBuffer(anu.result.picture)              baby.sendMessage(from, tiktok, image, {quoted: mek})			        await limitAdd(sender) 			        break case 'tiktok':                case 'arcade8bit':                case 'battlefield4':                case 'pubg':                    if (args.length == 0) return reply(`Example: ${prefix + command} LoL Human`)                    txt1 = args[0]                    txt2 = args[1]                    ini_buffer = await getBuffer(`http://api.lolhuman.xyz/api/photooxy2/${command}?apikey=Api-team&text1=${txt1}&text2=${txt2}`)                    baby.sendMessage(from, ini_buffer, image, { quoted: mek })                    break                    case 'tiktokstalk':					try {						if (args.length < 1) return baby.sendMessage(from, 'Usernamenya mana um?', text, {quoted: mek})						let { user, stats } = await tiktod.getUserProfileInfo(args[0])												teks = `*ID* : ${user.id}\n*Username* : ${user.uniqueId}\n*Nickname* : ${user.nickname}\n*Followers* : ${stats.followerCount}\n*Followings* : ${stats.followingCount}\n*Posts* : ${stats.videoCount}\n*Luv* : ${stats.heart}\n`						buffer3 = await getBuffer(user.avatarLarger)						baby.sendMessage(from, buffer3, image, {quoted: mek, caption: teks})					} catch (e) {						console.log(`Error :`, color(e,'red'))						reply('Kemungkinan username tidak valid')					}					break// Anime By Sofyan AMV               case 'chara':              case 'character':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} Miku Nakano`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/character?apikey=Api-team&query=${query}`)                    get_result = get_result.result                    txt = `Id : ${get_result.id}\n`                    txt += `Name : ${get_result.name.full}\n`                    txt += `Native : ${get_result.name.native}\n`                    txt += `Description : ${get_result.description}\n`                    txt += `Favorites : ${get_result.favourites}\n`                    thumbnail = await getBuffer(get_result.image.large)                    baby.sendMessage(from, thumbnail, image, { quoted: mek, caption: txt })                    break              case 'manga':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} Miku Nakano`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/manga?apikey=Api-team&query=${query}`)                    get_result = get_result.result                    txt = `Id : ${get_result.id}\n`                    txt += `Title : ${get_result.title.romaji}\n`                    txt += `Native : ${get_result.title.native}\n`                    txt += `Format : ${get_result.format}\n`                    txt += `Chapters : ${get_result.chapters}\n`                    txt += `Status : ${get_result.status}\n`                    txt += `Source : ${get_result.source}\n`                    txt += `Genre : ${get_result.genres}\n`                    txt += `Description : ${get_result.description}\n`                    txt += `Synonyms : ${get_result.synonyms}\n`                    thumbnail = await getBuffer(get_result.coverImage.large)                    baby.sendMessage(from, thumbnail, image, { quoted: mek, caption: txt })                    break               case 'nhentai':                    henid = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/nhentai/${henid}?apikey=Api-team`)                    get_result = get_result.result                    txt = `Title Romaji : ${get_result.title_romaji}\n`                    txt += `Title Native : ${get_result.title_native}\n`                    txt += `Read Online : ${get_result.read}\n`                    get_info = get_result.info                    txt += `Parodies : ${get_info.parodies}\n`                    txt += `Character : ${get_info.characters.join(", ")}\n`                    txt += `Tags : ${get_info.tags.join(", ")}\n`                    txt += `Artist : ${get_info.artists}\n`                    txt += `Group : ${get_info.groups}\n`                    txt += `Languager : ${get_info.languages.join(", ")}\n`                    txt += `Categories : ${get_info.categories}\n`                    txt += `Pages : ${get_info.pages}\n`                    txt += `Uploaded : ${get_info.uploaded}\n`                    reply(txt)                    break                case 'kusonime':                    ini_url = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/kusonime?apikey=Api-team&url=${ini_url}`)                    get_result = get_result.result                    txt = `Title : ${get_result.title}\n`                    txt += `Japanese : ${get_result.japanese}\n`                    txt += `Genre : ${get_result.genre}\n`                    txt += `Seasons : ${get_result.seasons}\n`                    txt += `Producers : ${get_result.producers}\n`                    txt += `Type : ${get_result.type}\n`                    txt += `Status : ${get_result.status}\n`                    txt += `Total Episode : ${get_result.total_episode}\n`                    txt += `Score : ${get_result.score}\n`                    txt += `Duration : ${get_result.duration}\n`                    txt += `Released On : ${get_result.released_on}\n`                    txt += `Desc : ${get_result.desc}\n`                    link_dl = get_result.link_dl                    for (var x in link_dl) {                        txt += `\n${x}\n`                        for (var y in link_dl[x]) {                            txt += `${y} - ${link_dl[x][y]}\n`                        }                    }                    buffer = await getBuffer(get_result.thumbnail)                    baby.sendMessage(from, buffer, image, { quoted: mek, caption: txt })                    break                case 'kusonimesearch':                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/kusonimesearch?apikey=Api-team&query=${query}`)                    get_result = get_result.result                    txt = `Title : ${get_result.title}\n`                    txt += `Japanese : ${get_result.japanese}\n`                    txt += `Genre : ${get_result.genre}\n`                    txt += `Seasons : ${get_result.seasons}\n`                    txt += `Producers : ${get_result.producers}\n`                    txt += `Type : ${get_result.type}\n`                    txt += `Status : ${get_result.status}\n`                    txt += `Total Episode : ${get_result.total_episode}\n`                    txt += `Score : ${get_result.score}\n`                    txt += `Duration : ${get_result.duration}\n`                    txt += `Released On : ${get_result.released_on}\n`                    txt += `Desc : ${get_result.desc}\n`                    link_dl = get_result.link_dl                    for (var x in link_dl) {                        txt += `\n${x}\n`                        for (var y in link_dl[x]) {                            txt += `${y} - ${link_dl[x][y]}\n`                        }                    }                    buffer = await getBuffer(get_result.thumbnail)                    baby.sendMessage(from, buffer, image, { quoted: mek, caption: txt })                    break                case 'otakudesu':                    ini_url = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/otakudesu?apikey=Api-team&url=${ini_url}`)                    get_result = get_result.result                    txt = `Title : ${get_result.title}\n`                    txt += `Japanese : ${get_result.japanese}\n`                    txt += `Judul : ${get_result.judul}\n`                    txt += `Type : ${get_result.type}\n`                    txt += `Episode : ${get_result.episodes}\n`                    txt += `Aired : ${get_result.aired}\n`                    txt += `Producers : ${get_result.producers}\n`                    txt += `Genre : ${get_result.genres}\n`                    txt += `Duration : ${get_result.duration}\n`                    txt += `Studios : ${get_result.status}\n`                    txt += `Rating : ${get_result.rating}\n`                    txt += `Credit : ${get_result.credit}\n`                    get_link = get_result.link_dl                    for (var x in get_link) {                        txt += `\n\n*${get_link[x].title}*\n`                        for (var y in get_link[x].link_dl) {                            info = get_link[x].link_dl[y]                            txt += `\n\`\`\`Reso : \`\`\`${info.reso}\n`                            txt += `\`\`\`Size : \`\`\`${info.size}\n`                            txt += `\`\`\`Link : \`\`\`\n`                            down_link = info.link_dl                            for (var z in down_link) {                                txt += `${z} - ${down_link[z]}\n`                            }                        }                    }                    reply(txt)                    break                case 'otakudesusearch':                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/otakudesusearch?apikey=Api-team&query=${query}`)                    get_result = get_result.result                    txt = `Title : ${get_result.title}\n`                    txt += `Japanese : ${get_result.japanese}\n`                    txt += `Judul : ${get_result.judul}\n`                    txt += `Type : ${get_result.type}\n`                    txt += `Episode : ${get_result.episodes}\n`                    txt += `Aired : ${get_result.aired}\n`                    txt += `Producers : ${get_result.producers}\n`                    txt += `Genre : ${get_result.genres}\n`                    txt += `Duration : ${get_result.duration}\n`                    txt += `Studios : ${get_result.status}\n`                    txt += `Rating : ${get_result.rating}\n`                    txt += `Credit : ${get_result.credit}\n`                    get_link = get_result.link_dl                    for (var x in get_link) {                        txt += `\n\n*${get_link[x].title}*\n`                        for (var y in get_link[x].link_dl) {                            info = get_link[x].link_dl[y]                            txt += `\n\`\`\`Reso : \`\`\`${info.reso}\n`                            txt += `\`\`\`Size : \`\`\`${info.size}\n`                            txt += `\`\`\`Link : \`\`\`\n`                            down_link = info.link_dl                            for (var z in down_link) {                                txt += `${z} - ${down_link[z]}\n`                            }                        }                    }                    reply(txt)                    break                    case 'nekopoi':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} https://nekopoi.care/isekai-harem-monogatari-episode-4-subtitle-indonesia/`)                    ini_url = args[0]                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/nekopoi?apikey=Api-team&url=${ini_url}`)                    get_result = get_result.result                    console.log(get_result)                    txt = `Title : ${get_result.anime}\n`                    txt += `Porducers : ${get_result.producers}\n`                    txt += `Duration : ${get_result.duration}\n`                    txt += `Size : ${get_result.size}\n`                    txt += `Sinopsis : ${get_result.sinopsis}\n`                    link = get_result.link                    for (var x in link) {                        txt += `\n${link[x].name}\n`                        link_dl = link[x].link                        for (var y in link_dl) {                            txt += `${y} - ${link_dl[y]}\n`                        }                    }                    buffer = await getBuffer(get_result.thumb)                    baby.sendMessage(from, buffer, image, { quoted: mek, caption: txt })                    break                    case 'nekopoisearch':                    if (args.length == 0) return reply(`Usage: ${prefix + command} query\nExample: ${prefix + command} Overflow`)                    query = args.join(" ")                    get_result = await fetchJson(`http://api.lolhuman.xyz/api/nekopoisearch?apikey=Api-team&query=${query}`)                    get_result = get_result.result                    console.log(get_result)                    txt = `Title : ${get_result.title}\n`                    txt += `Link : ${get_result.link}\n`                    buffer = await getBuffer(get_result.thumbnail)                    baby.sendMessage(from, buffer, image, { quoted: mek, caption: txt })                    break                    case 'wait':                    if ((isMedia && !lol.message.videoMessage || isQuotedImage) && args.length == 0) {                        const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(lol).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo : lol                        const filePath = await baby.downloadAndSaveMediaMessage(encmedia, filename = getRandom());                        const form = new FormData();                        const stats = fs.statSync(filePath);                        const fileSizeInBytes = stats.size;                        const fileStream = fs.createReadStream(filePath);                        form.append('img', fileStream, { knownLength: fileSizeInBytes });                        const options = {                            method: 'POST',                            credentials: 'include',                            body: form                        }                        get_result = await fetchJson(`http://api.lolhuman.xyz/api/wait?apikey=Api-team`, {...options })                        fs.unlinkSync(filePath)                        get_result = get_result.result                        ini_video = await getBuffer(get_result.video)                        ini_txt = `Anilist id : ${get_result.anilist_id}\n`                        ini_txt += `MAL id : ${get_result.mal_id}\n`                        ini_txt += `Title Romaji : ${get_result.title_romaji}\n`                        ini_txt += `Title Native : ${get_result.title_native}\n`                        ini_txt += `Title English : ${get_result.title_english}\n`                        ini_txt += `at : ${get_result.at}\n`                        ini_txt += `Episode : ${get_result.episode}\n`                        ini_txt += `Similarity : ${get_result.similarity}`                        baby.sendMessage(from, ini_video, video, { quoted: mek, caption: ini_txt })                    } else {                        reply(`Kirim gambar dengan caption ${prefix + command} atau tag gambar yang sudah dikirim`)                    }                    break				default:if (body.startsWith(`${prefix}${command}`)) {                  reply(`Maaf *${pushname}*, Command *${prefix}${command}* Tidak Terdaftar Di Dalam *${prefix}menu*!`)                  }			if (budy.includes(`assalamualaikum`)) {                  reply(`Waalaikumsalam`)                  }		if (budy.includes(`Assalamualaikum`)) {                  reply(`Waalaikumsalam`)                  }		if (budy.includes(`Ngentod`)) {                  reply(`Jaga Omongan lapet`)                  }    if (budy.includes(`Woy`)) {                  reply(`APA NJING!!`)                  }if (budy.includes(`Woy`)) {                  reply(`APA NJING!!`)                  }		if (budy.includes(`Sayang`)) {                  reply(`Aku Juga Sayang Kamu Kak😍`)                  }		if (budy.includes(`sayang`)) {                  reply(`Aku Juga Sayang Kamu Kak😍`)                  }		if (budy.includes(`Thanks`)) {                  reply(`Yoii santuy borr`)                  }		if (budy.includes(`Makasih`)) {                  reply(`Yoii santuy borr`)                  }		if (budy.includes(`sendsticker`)) {                const darkbot = fs.readFileSync('./sticker/darkbot');                baby.sendMessage(from, darkbot, MessageType.sticker, {quoted: mek})                  }if (budy.includes(`@6281534162316`)) {                  reply(`Jangan Tag Arnando Kak, Dia Lagi Sibuk ✨`)                  }if (budy.includes(`@6281227825649`)) {                  reply(`Jangan Tag Sofyan Kak, Dia Lagi Sibuk ✨`)                  }		if (budy.includes(`Nico`)) {                const nico = fs.readFileSync('./sticker/nico');                baby.sendMessage(from, nico, MessageType.sticker, {quoted: mek})                  }                  if (budy.includes(`nico`)) {                const nico = fs.readFileSync('./sticker/nico');                baby.sendMessage(from, nico, MessageType.sticker, {quoted: mek})                  }                  if (budy.includes(`Tapi`)) {                const tapi = fs.readFileSync('./assets/tapi.mp3');                baby.sendMessage(from, tapi, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})                  }			if (body.startsWith(`${prefix}${command}`)) {			}            if (budy.includes(`tapi`)) {                const tapi = fs.readFileSync('./assets/tapi.mp3');                baby.sendMessage(from, tapi, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})                  }			if (body.startsWith(`${prefix}${command}`)) {			}			if (budy.includes(`Wibu`)) {                const wibu = fs.readFileSync('./assets/wibu.mp3');                baby.sendMessage(from, wibu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})                  }			if (body.startsWith(`${prefix}${command}`)) {			}			if (budy.includes(`wibu`)) {                const wibu = fs.readFileSync('./assets/wibu.mp3');                baby.sendMessage(from, wibu, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})                  }			if (body.startsWith(`${prefix}${command}`)) {			}			if (budy.includes(`yamete`)) {                const yamete = fs.readFileSync('./assets/yamete.mp3');                baby.sendMessage(from, yamete, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})                  }			if (body.startsWith(`${prefix}${command}`)) {			}			if (budy.includes(`Yamete`)) {                const Yamete = fs.readFileSync('./assets/yamete.mp3');                baby.sendMessage(from, Yamete, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})                  }			if (body.startsWith(`${prefix}${command}`)) {			}if (budy.includes(`tra`)) {                const tra = fs.readFileSync('./assets/tratata.mp3');                baby.sendMessage(from, tra, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})                  }			if (body.startsWith(`${prefix}${command}`)) {			}                  /*]=====> > RAMLAN ID> ARIFI RAZZAQ> SABILUL> ARYA > FEEDZ> EREN > HASUFA TEAM> REVOER ID> ARIS ID> NADIA CANS> NAZWA> VHTEAR> TOBZ> XTEAM> MHANKBARBAR> All Creator Bot WhatsApp*/							if (isGroup && !isCmd && isSimi && budy != undefined) {						console.log(budy)						muehe = await simih(budy)				//		reply(ind.cmdnf(prefix, command))					} else {						console.log(color('[ERROR]','red'), 'Unregistered Command from', color(sender.split('@')[0]))					}					}		} catch (e) {			console.log('Error : %s', color(e, 'red'))		}	})